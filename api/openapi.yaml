openapi: 3.0.1
info:
  contact:
    email: contact@sendinblue.com
    name: Sendinblue Support
    url: https://account.sendinblue.com/support
  description: |
    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :
      - Manage your campaigns and get the statistics
      - Manage your contacts
      - Send transactional Emails and SMS
      - and much more...

    You can download our wrappers at https://github.com/orgs/sendinblue

    **Possible responses**
      | Code | Message |
      | :-------------: | ------------- |
      | 200  | OK. Successful Request  |
      | 201  | OK. Successful Creation |
      | 202  | OK. Request accepted |
      | 204  | OK. Successful Update/Deletion  |
      | 400  | Error. Bad Request  |
      | 401  | Error. Authentication Needed  |
      | 402  | Error. Not enough credit, plan upgrade needed  |
      | 403  | Error. Permission denied  |
      | 404  | Error. Object does not exist |
      | 405  | Error. Method not allowed  |
      | 406  | Error. Not Acceptable  |
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: SendinBlue API
  version: 3.0.0
servers:
- url: https://api.sendinblue.com/v3
security:
- api-key: []
paths:
  /emailCampaigns:
    get:
      operationId: getEmailCampaigns
      parameters:
      - description: Filter on the type of the campaigns
        in: query
        name: type
        schema:
          enum:
          - classic
          - trigger
          type: string
      - description: Filter on the status of the campaign
        in: query
        name: status
        schema:
          enum:
          - suspended
          - archive
          - sent
          - queued
          - draft
          - inProcess
          type: string
      - description: Filter on type of the statistics required. Example **globalStats**
          value will only fetch globalStats info of the campaign in returned response.
        in: query
        name: statistics
        schema:
          enum:
          - globalStats
          - linksStats
          - statsByDomain
          type: string
      - description: Mandatory if endDate is used. Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to
          pass your timezone in date-time format for accurate result ( only available
          if either 'status' not passed and if passed is set to 'sent' )
        in: query
        name: startDate
        schema:
          format: date-time
          type: string
      - description: Mandatory if startDate is used. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to
          pass your timezone in date-time format for accurate result ( only available
          if either 'status' not passed and if passed is set to 'sent' )
        in: query
        name: endDate
        schema:
          format: date-time
          type: string
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 500
          format: int64
          maximum: 1000
          type: integer
      - description: Index of the first document in the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: "Use this flag to exclude htmlContent from the response body.\
          \ If set to **true**, htmlContent field will be returned as empty string\
          \ in the response body"
        in: query
        name: excludeHtmlContent
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailCampaigns'
            applications/json:
              example:
                campaigns:
                - id: 12
                  name: EN - Sales Summer 2017
                  subject: 20% OFF for 2017 Summer Sales
                  type: classic
                  status: sent
                  scheduledAt: 2017-06-01T12:30:00Z
                  testSent: true
                  header: "[DEFAULT_HEADER]"
                  footer: "[DEFAULT_FOOTER]"
                  sender:
                    email: marketing@mycompany.com
                    name: Marketing
                    id: 26
                  replyTo: replyto@domain.com
                  toField: "{FNAME} {LNAME}"
                  htmlContent: This is my HTML Content
                  shareLink: http://example.com/fhsgccc.html?t=9865448900
                  tag: Newsletter
                  createdAt: 2017-05-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
                  inlineImageActivation: true
                  mirrorActive: true
                  recurring: false
                  recipients:
                    lists:
                    - 5
                    exclusionLists:
                    - 13
                  statistics:
                    globalStats:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      trackableViews: 5661
                      unsubscriptions: 2
                      viewed: 8999
                    campaignStats:
                    - listId: 5
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      trackableViews: 5661
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
                    mirrorClick: 120
                    remaining: 1000
                    linksStats:
                      http://myUrl1.domain.com: 80
                    statsByDomain:
                      yahoo.com:
                        uniqueClicks: 298
                        clickers: 533
                        complaints: 0
                        sent: 25601
                        softBounces: 5
                        hardBounces: 0
                        uniqueViews: 3527
                        unsubscriptions: 17
                        viewed: 5255
                        delivered: 25596
                      hotmail.co.uk:
                        uniqueClicks: 1970
                        clickers: 2720
                        complaints: 5
                        sent: 117055
                        softBounces: 111
                        hardBounces: 0
                        uniqueViews: 21111
                        unsubscriptions: 105
                        viewed: 35251
                        delivered: 117056
                - id: 22
                  name: Weekly - 1
                  subject: Week 1 - Newsletter
                  type: Classic
                  status: draft
                  scheduledAt: ""
                  testSent: false
                  header: "[DEFAULT_HEADER]"
                  footer: "[DEFAULT_FOOTER]"
                  sender:
                    email: newsletter@mycompany.com
                    name: Newsletter
                    id: 26
                  replyTo: replyto@domain.com
                  toField: "{FNAME} {LNAME}"
                  htmlContent: This is my HTML Content
                  shareLink: http://example.com/fhsgccc.html?t=9865448900
                  tag: Newsletter
                  createdAt: 2017-05-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
                  inlineImageActivation: true
                  mirrorActive: true
                  recurring: false
                  recipients:
                    lists:
                    - 10
                    exclusionLists:
                    - 45
                  statistics:
                    globalStats:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      trackableViews: 5661
                      unsubscriptions: 2
                      viewed: 8999
                    campaignStats:
                    - listId: 10
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      trackableViews: 5661
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
                    mirrorClick: 120
                    remaining: 1000
                    linksStats:
                      http://myUrl1.domain.com:
                        nbClick: 80
                      http://myUrl2.domain.com:
                        nbClick: 80
                      http://myUrl3.domain.com:
                        nbClick: 80
                    statsByDomain:
                      gmail:
                        uniqueClicks: 2300
                        clickers: 2665
                        complaints: 1
                        delivered: 19765
                        sent: 19887
                        softBounces: 100
                        hardBounces: 87
                        uniqueViews: 7779
                        unsubscriptions: 2
                        viewed: 8999
                        deferred: 30
                      aol:
                        uniqueClicks: 2300
                        clickers: 2665
                        complaints: 1
                        delivered: 19765
                        sent: 19887
                        softBounces: 100
                        hardBounces: 87
                        uniqueViews: 7779
                        unsubscriptions: 2
                        viewed: 8999
                        deferred: 30
                count: 2
          description: Email campaigns informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Return all your created email campaigns
      tags:
      - Email Campaigns
    post:
      operationId: createEmailCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEmailCampaign'
        description: Values to create a campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: Email campaign created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create an email campaign
      tags:
      - Email Campaigns
      x-codegen-request-body-name: emailCampaigns
  /emailCampaigns/{campaignId}:
    delete:
      operationId: deleteEmailCampaign
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: Email campaign has been deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete an email campaign
      tags:
      - Email Campaigns
    get:
      operationId: getEmailCampaign
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      - description: Filter on type of the statistics required. Example **globalStats**
          value will only fetch globalStats info of the campaign in returned response.
        in: query
        name: statistics
        schema:
          enum:
          - globalStats
          - linksStats
          - statsByDomain
          - statsByDevice
          - statsByBrowser
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                id: 22
                name: Weekly - 1
                subject: Week 1 - Newsletter
                type: classic
                status: draft
                scheduledAt: 2017-09-22T12:30:00Z
                testSent: false
                header: "[DEFAULT_HEADER]"
                footer: "[DEFAULT_FOOTER]"
                sender:
                  email: newsletter@mycompany.com
                  name: Newsletter
                  id: 26
                replyTo: replyto@domain.com
                toField: "{FNAME} {LNAME}"
                htmlContent: This is my HTML Content
                shareLink: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
                tag: Newsletter
                createdAt: 2017-05-01T12:30:00Z
                modifiedAt: 2017-05-01T12:30:00Z
                inlineImageActivation: true
                mirrorActive: true
                recurring: false
                recipients:
                  lists:
                  - 22
                  exclusionLists:
                  - 45
                statistics:
                  globalStats:
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    trackableViews: 5661
                    unsubscriptions: 2
                    viewed: 8999
                  campaignStats:
                  - listId: 22
                    uniqueClicks: 2300
                    clickers: 2665
                    complaints: 1
                    delivered: 19765
                    sent: 19887
                    softBounces: 100
                    hardBounces: 87
                    uniqueViews: 7779
                    trackableViews: 5661
                    unsubscriptions: 2
                    viewed: 8999
                    deferred: 30
                  mirrorClick: 120
                  remaining: 1000
                  linksStats:
                    http://myUrl1.domain.com:
                      nbClick: 80
                    http://myUrl2.domain.com:
                      nbClick: 80
                    http://myUrl3.domain.com:
                      nbClick: 80
                  statsByDomain:
                    gmail:
                      uniqueClicks: 2300
                      clickers: 2665
                      complaints: 1
                      delivered: 19765
                      sent: 19887
                      softBounces: 100
                      hardBounces: 87
                      uniqueViews: 7779
                      unsubscriptions: 2
                      viewed: 8999
                      deferred: 30
                  statsByDevice:
                    desktop:
                      mac:
                        clickers: 1
                        uniqueClicks: 0
                        viewed: 2
                        uniqueViews: 1
                    mobile:
                      androidMobile:
                        clickers: 1
                        uniqueClicks: 0
                        viewed: 1
                        uniqueViews: 0
                      iPhone:
                        clickers: 1
                        uniqueClicks: 0
                        viewed: 2
                        uniqueViews: 0
                  statsByBrowser:
                    thunderbird:
                      clickers: 1
                      uniqueClicks: 0
                      viewed: 1
                      uniqueViews: 0
                    safari:
                      clickers: 1
                      uniqueClicks: 0
                      viewed: 1
                      uniqueViews: 0
                    internetExplorer:
                      clickers: 0
                      uniqueClicks: 0
                      viewed: 1
                      uniqueViews: 0
              schema:
                $ref: '#/components/schemas/getEmailCampaign'
          description: Email campaign informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get an email campaign report
      tags:
      - Email Campaigns
    put:
      operationId: updateEmailCampaign
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEmailCampaign'
        description: Values to update a campaign
        required: true
      responses:
        "204":
          content: {}
          description: Email Campaign has been updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Update an email campaign
      tags:
      - Email Campaigns
      x-codegen-request-body-name: emailCampaign
  /emailCampaigns/{campaignId}/sendNow:
    post:
      operationId: sendEmailCampaignNow
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: Email campaign has been scheduled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign could not be sent
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: You don't have enough credit to send your campaign. Please
            update your plan
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: "Send an email campaign immediately, based on campaignId"
      tags:
      - Email Campaigns
  /emailCampaigns/{campaignId}/sendTest:
    post:
      operationId: sendTestEmail
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        "204":
          content: {}
          description: Test email has been sent successfully to all recipients
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
          description: Test email could not be sent to the following email addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Send an email campaign to your test list
      tags:
      - Email Campaigns
      x-codegen-request-body-name: emailTo
  /emailCampaigns/{campaignId}/status:
    put:
      operationId: updateCampaignStatus
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        description: Status of the campaign
        required: true
      responses:
        "204":
          content: {}
          description: The campaign status has been updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Update an email campaign status
      tags:
      - Email Campaigns
      x-codegen-request-body-name: status
  /emailCampaigns/{campaignId}/sendReport:
    post:
      description: A PDF will be sent to the specified email addresses
      operationId: sendReport
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        description: Values for send a report
        required: true
      responses:
        "204":
          content: {}
          description: Report has been successfully sent to the defined recipients
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Send the report of a campaign
      tags:
      - Email Campaigns
      x-codegen-request-body-name: sendReport
  /emailCampaigns/{campaignId}/abTestCampaignResult:
    get:
      description: Obtain winning version of an A/B test email campaign
      operationId: getAbTestCampaignResult
      parameters:
      - description: Id of the A/B test campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                winningCriteria: Click
                statistics:
                  openers:
                    Version A: 20%
                    Version B: 100%
                  clicks:
                    Version A: 0%
                    Version B: 50%
                  unsubscribed:
                    Version A: 20%
                    Version B: 0%
                  softBounces:
                    Version A: 0%
                    Version B: 0%
                  hardBounces:
                    Version A: 0%
                    Version B: 0%
                  complaints:
                    Version A: 0%
                    Version B: 0%
                winningVersion: B
                openRate: 100%
                ClickRate: 50%
                winningVersionRate: 0%
                clickedLinks:
                  Version A:
                  - link: http://www.google.com
                    clicksCount: 0
                    clickRate: 0%
                  - link: http://www.youtube.com
                    clicksCount: 0
                    clickRate: 0%
                  Version B:
                  - link: http://www.github.com
                    clicksCount: 2
                    clickRate: 40%
                  - link: http://www.stackoverflow.com
                    clicksCount: 3
                    clickRate: 60%
              schema:
                $ref: '#/components/schemas/abTestCampaignResult'
          description: A/B test email campaign Result
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: A/B test Email Campaign not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get an A/B test email campaign results
      tags:
      - Email Campaigns
  /emailCampaigns/{campaignId}/sharedUrl:
    get:
      description: Get a unique URL to share & import an email template from one Sendinblue
        account to another.
      operationId: getSharedTemplateUrl
      parameters:
      - description: Id of the campaign or template
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                sharedUrl: https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
              schema:
                $ref: '#/components/schemas/getSharedTemplateUrl'
          description: Shared template URL information
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign/Template ID not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Only email campaigns or templates are allowed
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get a shared template url
      tags:
      - Email Campaigns
  /emailCampaigns/{campaignId}/exportRecipients:
    post:
      operationId: emailExportRecipients
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailExportRecipients'
        description: Values to send for a recipient export request
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
          description: Recipient export request has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Export the recipients of an email campaign
      tags:
      - Email Campaigns
      x-codegen-request-body-name: recipientExport
  /emailCampaigns/images:
    post:
      operationId: uploadImageToGallery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uploadImageToGallery'
        description: Parameters to upload an image
        required: true
      responses:
        "201":
          content: {}
          description: Image successfully uploaded
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Upload an image to your account's image gallery
      tags:
      - Email Campaigns
      x-codegen-request-body-name: uploadImage
  /smtp/email:
    post:
      operationId: sendTransacEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendSmtpEmail'
        description: Values to send a transactional email
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSmtpEmail'
          description: transactional email sent
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Send a transactional email
      tags:
      - SMTP
      x-codegen-request-body-name: sendSmtpEmail
  /smtp/emails:
    get:
      description: "This endpoint will show the list of emails for past 30 days by\
        \ default. To retrieve emails before that time, please pass startDate and\
        \ endDate in query filters."
      operationId: getTransacEmailsList
      parameters:
      - description: Mandatory if templateId and messageId are not passed in query
          filters. Email address to which transactional email has been sent.
        in: query
        name: email
        schema:
          type: string
      - description: Mandatory if email and messageId are not passed in query filters.
          Id of the template that was used to compose transactional email.
        in: query
        name: templateId
        schema:
          format: int64
          type: integer
      - description: Mandatory if templateId and email are not passed in query filters.
          Message ID of the transactional email sent.
        in: query
        name: messageId
        schema:
          type: string
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) from
          which you want to fetch the list. Maximum time period that can be selected
          is one month.
        in: query
        name: startDate
        schema:
          format: date
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) till
          which you want to fetch the list. Maximum time period that can be selected
          is one month.
        in: query
        name: endDate
        schema:
          format: date
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                transactionalEmails:
                - email: abc@xyz.com
                  subject: summer camp
                  templateId: 15
                  messageId: <201798300811.5787683@relay.domain.com>
                  uuid: 5a78c-209ok98262910-std2341
                  date: 2019-05-25T11:53:26Z
                - email: test@test.com
                  subject: details verification
                  templateId: 15
                  messageId: <201798300811.5700093@relay.domain.com>
                  uuid: 5a78c-209ok98262910-s99a341
                  date: 2019-05-25T07:28:11Z
              schema:
                $ref: '#/components/schemas/getTransacEmailsList'
          description: List of transactional emails
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get the list of transactional emails on the basis of allowed filters
      tags:
      - SMTP
  /smtp/emails/{uuid}:
    get:
      operationId: getTransacEmailContent
      parameters:
      - description: Unique id of the transactional email that has been sent to a
          particular contact
        in: path
        name: uuid
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                email: abc@example.com
                subject: Summer Camps
                templateId: 12
                date: 2016-02-25T11:53:26Z
                events:
                - name: sent
                  time: 2016-02-25T11:53:26Z
                - name: delivered
                  time: 2016-02-25T11:55:26Z
                - name: opened
                  time: 2016-02-26T09:53:26Z
                body: <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>
                  <p>This is the actual html content sent</p> </body> </html>
              schema:
                $ref: '#/components/schemas/getTransacEmailContent'
          description: Transactional email content
      summary: Get the personalized content of a sent transactional email
      tags:
      - SMTP
  /smtp/log/{messageId}:
    delete:
      parameters:
      - description: MessageId of the transactional log to delete
        in: path
        name: messageId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Transactional Logs deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Message ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete an SMTP transactional log
      tags:
      - SMTP
  /smtp/templates:
    get:
      operationId: getSmtpTemplates
      parameters:
      - description: "Filter on the status of the template. Active = true, inactive\
          \ = false"
        in: query
        name: templateStatus
        schema:
          type: boolean
      - description: Number of documents returned per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 1000
          type: integer
      - description: Index of the first document in the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                count: 2
                templates:
                - id: 5
                  name: ChristomasTimeTemplate
                  subject: Merry Christmas
                  isActive: false
                  testSent: false
                  sender:
                    name: John
                    email: john.smith@example.com
                    id: 23
                  replyTo: replyto@domain.com
                  toField: ""
                  tag: Festival
                  htmlContent: HTML CONTENT 1
                  createdAt: 2016-02-24T14:44:24Z
                  modifiedAt: 2016-02-24T15:37:11Z
                - id: 12
                  name: SummerSales2017Template
                  subject: Enjoy our summer Sales !
                  isActive: true
                  testSent: false
                  sender:
                    name: John
                    email: john.smith@example.com
                    id: 23
                  replyTo: replyto@domain.com
                  toField: ""
                  tag: Summer
                  htmlContent: HTML CONTENT 2
                  createdAt: 2016-02-25T11:53:26Z
                  modifiedAt: 2016-02-25T11:53:26Z
              schema:
                $ref: '#/components/schemas/getSmtpTemplates'
          description: transactional email templates informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get the list of email templates
      tags:
      - SMTP
    post:
      operationId: createSmtpTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmtpTemplate'
        description: values to update in transactional email template
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: transactional email template created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create an email template
      tags:
      - SMTP
      x-codegen-request-body-name: smtpTemplate
  /smtp/templates/{templateId}:
    delete:
      operationId: deleteSmtpTemplate
      parameters:
      - description: id of the template
        in: path
        name: templateId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: Inactive transactional email template has been deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Template ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete an inactive email template
      tags:
      - SMTP
    get:
      operationId: getSmtpTemplate
      parameters:
      - description: id of the template
        in: path
        name: templateId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                id: 33
                name: OrderConfirmation
                subject: "Order Confirmation : Thanks for your Purchase !"
                isActive: true
                testSent: false
                sender:
                  name: John
                  email: john.smith@example.com
                  id: 26
                replyTo: replyto@domain.com
                toField: ""
                tag: ""
                htmlContent: HTML CONTENT 4
                createdAt: 2016-02-25T11:53:26Z
                modifiedAt: 2016-02-25T11:53:26Z
                doiTemplate: false
              schema:
                $ref: '#/components/schemas/getSmtpTemplateOverview'
          description: Email template informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Template ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Returns the template information
      tags:
      - SMTP
    put:
      operationId: updateSmtpTemplate
      parameters:
      - description: id of the template
        in: path
        name: templateId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmtpTemplate'
        description: values to update in transactional email template
        required: true
      responses:
        "204":
          content: {}
          description: transactional email template updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Template ID not found
      summary: Update an email template
      tags:
      - SMTP
      x-codegen-request-body-name: smtpTemplate
  /smtp/templates/{templateId}/sendTest:
    post:
      operationId: sendTestTemplate
      parameters:
      - description: Id of the template
        in: path
        name: templateId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        "204":
          content: {}
          description: Test email has been sent successfully to all recipients
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
          description: Test email could not be sent to the following email addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Template ID not found
      summary: Send a template to your test list
      tags:
      - SMTP
      x-codegen-request-body-name: sendTestEmail
  /smtp/statistics/aggregatedReport:
    get:
      operationId: getAggregatedSmtpReport
      parameters:
      - description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD).
          Must be lower than equal to endDate
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD).
          Must be greater than equal to startDate
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of days in the past including today (positive integer).
          Not compatible with 'startDate' and 'endDate'
        in: query
        name: days
        schema:
          type: integer
      - description: Tag of the emails
        in: query
        name: tag
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                range: 2016-09-08|2017-04-28
                requests: 19887
                delivered: 18996
                hardBounces: 234
                softBounces: 1533
                clicks: 9987
                uniqueClicks: 8766
                opens: 17654
                uniqueOpens: 13688
                spamReports: 1
                blocked: 2
                invalid: 0
                unsubscribed: 2
              schema:
                $ref: '#/components/schemas/getAggregatedReport'
          description: Aggregated report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get your transactional email activity aggregated over a period of time
      tags:
      - SMTP
  /smtp/statistics/reports:
    get:
      operationId: getSmtpReport
      parameters:
      - description: Number of documents returned per page
        in: query
        name: limit
        schema:
          default: 10
          format: int64
          maximum: 30
          type: integer
      - description: Index of the first document on the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of days in the past including today (positive integer).
          Not compatible with 'startDate' and 'endDate'
        in: query
        name: days
        schema:
          type: integer
      - description: Tag of the emails
        in: query
        name: tag
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                reports:
                - date: 2017-04-30
                  requests: 10756
                  delivered: 10103
                  hardBounces: 21
                  softBounces: 137
                  clicks: 1026
                  uniqueClicks: 720
                  opens: 5091
                  uniqueOpens: 2318
                  spamReports: 0
                  blocked: 519
                  invalid: 1
                  unsubscribed: 0
                - date: 2017-05-01
                  requests: 18812
                  delivered: 17499
                  hardBounces: 34
                  softBounces: 254
                  clicks: 1514
                  uniqueClicks: 1090
                  opens: 10089
                  uniqueOpens: 4393
                  spamReports: 0
                  blocked: 920
                  invalid: 2
                  unsubscribed: 3
              schema:
                $ref: '#/components/schemas/getReports'
          description: Aggregated report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get your transactional email activity aggregated per day
      tags:
      - SMTP
  /smtp/statistics/events:
    get:
      operationId: getEmailEventReport
      parameters:
      - description: Number limitation for the result returned
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 100
          type: integer
      - description: Beginning point in the list to retrieve from.
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD).
          Must be lower than equal to endDate
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD).
          Must be greater than equal to startDate
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of days in the past including today (positive integer).
          Not compatible with 'startDate' and 'endDate'
        in: query
        name: days
        schema:
          type: integer
      - description: Filter the report for a specific email addresses
        in: query
        name: email
        schema:
          format: email
          type: string
      - description: Filter the report for a specific event type
        in: query
        name: event
        schema:
          enum:
          - bounces
          - hardBounces
          - softBounces
          - delivered
          - spam
          - requests
          - opened
          - clicks
          - invalid
          - deferred
          - blocked
          - unsubscribed
          type: string
      - description: Filter the report for tags (serialized and urlencoded array)
        in: query
        name: tags
        schema:
          type: string
      - description: Filter on a specific message id
        in: query
        name: messageId
        schema:
          type: string
      - description: Filter on a specific template id
        in: query
        name: templateId
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                events:
                - email: john.smith@example.com
                  date: 2017-03-12T12:30:00Z
                  messageId: <201798300811.5787683@example.domain.com>
                  event: deferred
                  reason: Error connection timeout
                  tag: OrderConfirmation
                  from: john@example.com
                - email: john.smith@example.com
                  date: 2017-03-13T16:30:00Z
                  messageId: <201798300811.5787683@example.domain.com>
                  event: delivered
                  tag: OrderConfirmation
                  from: john@example.com
              schema:
                $ref: '#/components/schemas/getEmailEventReport'
          description: Email events report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all your transactional email activity (unaggregated events)
      tags:
      - SMTP
  /smtp/blockedContacts/{email}:
    delete:
      parameters:
      - description: contact email (urlencoded) to unblock.
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Contact unblocked
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Contact email not found
      summary: Unblock or resubscribe a transactional contact
      tags:
      - SMTP
  /smtp/blockedContacts:
    get:
      operationId: getTransacBlockedContacts
      parameters:
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) from
          which you want to fetch the blocked or unsubscribed contacts
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) till
          which you want to fetch the blocked or unsubscribed contacts
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of documents returned per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 100
          type: integer
      - description: Index of the first document on the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Comma separated list of emails of the senders from which contacts
          are blocked or unsubscribed
        explode: false
        in: query
        name: senders
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                contacts:
                - email: abc@xyz.com
                  senderEmail: ez312@gmal.com
                  reason:
                    message: Admin blocked
                    code: adminBlocked
                  blockedAt: 2017-05-01T12:30:00Z
                count: 1
              schema:
                $ref: '#/components/schemas/getTransacBlockedContacts'
          description: List of blocked or unsubscribed transactional contacts
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get the list of blocked or unsubscribed transactional contacts
      tags:
      - SMTP
  /smtp/blockedDomains:
    get:
      description: Get the list of blocked domains
      operationId: getBlockedDomains
      responses:
        "200":
          content:
            application/json:
              example:
                domains:
                - example.com
                - testdomain.com
              schema:
                $ref: '#/components/schemas/getBlockedDomains'
          description: List of blocked domains
      summary: Get the list of blocked domains
      tags:
      - SMTP
    post:
      description: Blocks a new domain in order to avoid messages being sent to the
        same
      operationId: blockNewDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blockDomain'
        required: true
      responses:
        "201":
          content: {}
          description: Domain is successfully blocked
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Add a new domain to the list of blocked domains
      tags:
      - SMTP
      x-codegen-request-body-name: blockDomain
  /smtp/blockedDomains/{domain}:
    delete:
      description: Unblocks an existing domain from the list of blocked domains
      operationId: deleteBlockedDomain
      parameters:
      - description: The name of the domain to be deleted
        in: path
        name: domain
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Domain is successfully deleted from the list of blocked domains
        "404":
          content: {}
          description: Domain not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Unblock an existing domain from the list of blocked domains
      tags:
      - SMTP
  /smtp/deleteHardbounces:
    post:
      description: Delete hardbounces. To use carefully (e.g. in case of temporary
        ISP failures)
      operationId: deleteHardbounces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteHardbounces'
        description: values to delete hardbounces
        required: false
      responses:
        "204":
          content: {}
          description: Hardbounces deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete hardbounces
      tags:
      - SMTP
      x-codegen-request-body-name: deleteHardbounces
  /smtp/templates/{templateId}/send:
    post:
      deprecated: true
      description: This endpoint is deprecated. Prefer v3/smtp/email instead.
      operationId: sendTemplate
      parameters:
      - description: Id of the template
        in: path
        name: templateId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendEmail'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendTemplateEmail'
          description: Email has been sent successfully to all recipients
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
          description: Email could not be sent to the following email addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Template ID not found
      summary: Send a template
      tags:
      - SMTP
      x-codegen-request-body-name: sendEmail
  /contacts:
    get:
      operationId: getContacts
      parameters:
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 1000
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Filter (urlencoded) the contacts modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format
          for accurate result.
        in: query
        name: modifiedSince
        schema:
          format: date-time
          type: string
      - description: Filter (urlencoded) the contacts created after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format
          for accurate result.
        in: query
        name: createdSince
        schema:
          format: date-time
          type: string
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                contacts:
                - email: contact1@example.com
                  id: 247
                  emailBlacklisted: true
                  smsBlacklisted: true
                  createdAt: 2017-05-01T17:05:03Z
                  modifiedAt: 2017-05-01T17:05:03Z
                  listIds:
                  - 43
                  - 58
                  attributes:
                    SMS: "33058407250"
                    IDENTIFICATION: 1-3RHQ-259
                    CIV: MS
                    LAST_NAME: Brennon
                    FIRST_NAME: Meg
                    DOB: 1986-05-02
                    ADDRESS: 1 5th avenue
                    ZIP_CODE: "44300"
                    CITY: New-York
                    ACTION_CODE: 17HH98CH
                - email: 33058407248@mailin-sms.com
                  id: 245
                  emailBlacklisted: true
                  smsBlacklisted: false
                  createdAt: 2017-05-01T17:05:03Z
                  modifiedAt: 2017-05-01T17:05:03Z
                  listIds:
                  - 43
                  - 61
                  - 58
                  attributes:
                    SMS: "33058407248"
                    IDENTIFICATION: 1-78JS-432
                    CIV: MS
                    LAST_NAME: Press
                    FIRST_NAME: Sophia
                    DOB: 1980-09-11
                    ADDRESS: 5 Flower Street
                    ZIP_CODE: "44119"
                    CITY: Seattle
                    ACTION_CODE: 17HU765
                count: 3
              schema:
                $ref: '#/components/schemas/getContacts'
          description: All contacts listed
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all the contacts
      tags:
      - Contacts
    post:
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createContact'
        description: Values to create a contact
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateContactModel'
          description: Contact created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateContactModel'
          description: Contact updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactErrorModel'
          description: bad request
      summary: Create a contact
      tags:
      - Contacts
      x-codegen-request-body-name: createContact
  /contacts/doubleOptinConfirmation:
    post:
      operationId: createDoiContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDoiContact'
        description: Values to create the Double opt-in (DOI) contact
        required: true
      responses:
        "201":
          content: {}
          description: DOI Contact created
        "204":
          content: {}
          description: DOI Contact updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create Contact via DOI (Double-Opt-In) Flow
      tags:
      - Contacts
      x-codegen-request-body-name: createDoiContact
  /contacts/{email}:
    delete:
      operationId: deleteContact
      parameters:
      - description: Email (urlencoded) of the contact
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Contact deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Contact not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: You're not allowed to delete registered email contact with
            SendinBlue
      summary: Delete a contact
      tags:
      - Contacts
    get:
      operationId: getContactInfo
      parameters:
      - description: Email (urlencoded) of the contact OR its SMS attribute value
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                email: peggy.rain@example.com
                id: 42
                emailBlacklisted: false
                smsBlacklisted: false
                createdAt: 2017-05-02T16:40:31Z
                modifiedAt: 2017-05-02T16:40:31Z
                attributes:
                  FIRST_NAME: Peggy
                  LAST_NAME: Rain
                  SMS: "3087433387669"
                  CIV: "1"
                  DOB: 1986-04-13
                  ADDRESS: 987 5th avenue
                  ZIP_CODE: "87544"
                  CITY: New-York
                  AREA: NY
                listIds:
                - 40
                statistics:
                  messagesSent:
                  - campaignId: 21
                    eventTime: 2016-05-03T20:15:13Z
                  - campaignId: 42
                    eventTime: 2016-10-17T10:30:01Z
                  opened:
                  - campaignId: 21
                    count: 2
                    eventTime: 2016-05-03T21:24:56Z
                    ip: 66.249.93.118
                  - campaignId: 68
                    count: 1
                    eventTime: 2017-01-30T13:56:40Z
                    ip: 66.249.93.217
                  clicked:
                  - campaignId: 21
                    links:
                    - count: 2
                      eventTime: 2016-05-03T21:25:01Z
                      ip: 66.249.93.118
                      url: "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
              schema:
                $ref: '#/components/schemas/getExtendedContactDetails'
          description: Contact informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Contact's email not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get a contact's details
      tags:
      - Contacts
    put:
      operationId: updateContact
      parameters:
      - description: Email (urlencoded) of the contact
        in: path
        name: email
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateContact'
        description: Values to update a contact
        required: true
      responses:
        "204":
          content: {}
          description: Contact updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactErrorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactErrorModel'
          description: Contact's email not found
      summary: Update a contact
      tags:
      - Contacts
      x-codegen-request-body-name: updateContact
  /contacts/{email}/campaignStats:
    get:
      operationId: getContactStats
      parameters:
      - description: Email address (urlencoded) of the contact
        in: path
        name: email
        required: true
        schema:
          type: string
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be lower than equal to endDate
        in: query
        name: startDate
        schema:
          format: date
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the
          statistic events specific to campaigns. Must be greater than equal to startDate
        in: query
        name: endDate
        schema:
          format: date
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                messagesSent:
                - campaignId: 21
                  eventTime: 2016-05-03T20:15:13Z
                - campaignId: 42
                  eventTime: 2016-10-17T10:30:01Z
                - campaignId: 45
                  eventTime: 2016-11-09T11:45:02Z
                opened:
                - campaignId: 21
                  count: 2
                  eventTime: 2016-05-03T21:24:56Z
                  ip: 66.249.93.118
                - campaignId: 45
                  count: 1
                  eventTime: 2017-01-30T13:56:40Z
                  ip: 66.249.93.217
                clicked:
                - campaignId: 21
                  links:
                  - count: 2
                    eventTime: 2016-05-03T21:25:01Z
                    ip: 66.249.93.118
                    url: "https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=sendinblue&utm_campaign=test_camp&utm_medium=email"
              schema:
                $ref: '#/components/schemas/getContactCampaignStats'
          description: Contact campaign statistics informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Contact's email not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get email campaigns' statistics for a contact
      tags:
      - Contacts
  /contacts/attributes:
    get:
      operationId: getAttributes
      responses:
        "200":
          content:
            application/json:
              example:
                attributes:
                - name: LASTNAME
                  category: normal
                  type: text
                - name: FIRSTNAME
                  category: normal
                  type: text
                - name: DOB
                  category: normal
                  type: date
                - name: GENDER
                  category: category
                  type: text
                  enumeration:
                  - value: 1
                    label: Men
                  - value: 2
                    label: Women
                  - value: 3
                    label: Kid
              schema:
                $ref: '#/components/schemas/getAttributes'
          description: Attributes listed
      summary: List all attributes
      tags:
      - Contacts
      - Attributes
  /contacts/attributes/{attributeCategory}/{attributeName}:
    delete:
      operationId: deleteAttribute
      parameters:
      - description: Category of the attribute
        in: path
        name: attributeCategory
        required: true
        schema:
          enum:
          - normal
          - transactional
          - category
          - calculated
          - global
          type: string
      - description: Name of the existing attribute
        in: path
        name: attributeName
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Attribute deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Attribute not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete an attribute
      tags:
      - Contacts
      - Attributes
    post:
      operationId: createAttribute
      parameters:
      - description: Category of the attribute
        in: path
        name: attributeCategory
        required: true
        schema:
          enum:
          - normal
          - transactional
          - category
          - calculated
          - global
          type: string
      - description: Name of the attribute
        in: path
        name: attributeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createAttribute'
        description: Values to create an attribute
        required: true
      responses:
        "201":
          content: {}
          description: Attribute created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create contact attribute
      tags:
      - Contacts
      - Attributes
      x-codegen-request-body-name: createAttribute
    put:
      operationId: updateAttribute
      parameters:
      - description: Category of the attribute
        in: path
        name: attributeCategory
        required: true
        schema:
          enum:
          - category
          - calculated
          - global
          type: string
      - description: Name of the existing attribute
        in: path
        name: attributeName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAttribute'
        description: Values to update an attribute
        required: true
      responses:
        "204":
          content: {}
          description: Attribute updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Attribute not found
      summary: Update contact attribute
      tags:
      - Contacts
      - Attributes
      x-codegen-request-body-name: updateAttribute
  /contacts/folders:
    get:
      operationId: getFolders
      parameters:
      - description: Number of documents per page
        in: query
        name: limit
        required: true
        schema:
          default: 10
          format: int64
          maximum: 50
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        required: true
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                folders:
                - id: 42
                  name: Ninja_Form
                  totalBlacklisted: 98
                  totalSubscribers: 4567
                  uniqueSubscribers: 4665
                - id: 29
                  name: Prestashop
                  totalBlacklisted: 10
                  totalSubscribers: 6543
                  uniqueSubscribers: 6553
                count: 2
              schema:
                $ref: '#/components/schemas/getFolders'
          description: Folders informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all folders
      tags:
      - Contacts
      - Folders
    post:
      operationId: createFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        description: Name of the folder
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: Folder created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create a folder
      tags:
      - Contacts
      - Folders
      x-codegen-request-body-name: createFolder
  /contacts/segments:
    get:
      operationId: getSegments
      parameters:
      - description: Number of documents per page
        in: query
        name: limit
        required: true
        schema:
          default: 10
          format: int64
          maximum: 50
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        required: true
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                segments:
                - id: 42
                  segmentName: Segment1
                  categoryName: Category1
                  updatedAt: 2017-03-12T12:30:00Z
                - id: 42
                  segmentName: Segment1
                  categoryName: Category1
                  updatedAt: 2017-03-12T12:30:00Z
                count: 2
              schema:
                $ref: '#/components/schemas/getSegments'
          description: Folders informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all the segments
      tags:
      - Contacts
  /contacts/folders/{folderId}:
    delete:
      operationId: deleteFolder
      parameters:
      - description: Id of the folder
        in: path
        name: folderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: Folder deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Folder ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete a folder (and all its lists)
      tags:
      - Contacts
      - Folders
    get:
      operationId: getFolder
      parameters:
      - description: id of the folder
        in: path
        name: folderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                name: Client_Folder
                totalBlacklisted: 987
                totalSubscribers: 16778
                uniqueSubscribers: 17765
              schema:
                $ref: '#/components/schemas/getFolder'
          description: Folder details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Folder ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Returns a folder's details
      tags:
      - Contacts
      - Folders
    put:
      operationId: updateFolder
      parameters:
      - description: Id of the folder
        in: path
        name: folderId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        description: Name of the folder
        required: true
      responses:
        "204":
          content: {}
          description: Folder updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Folder ID not found
      summary: Update a folder
      tags:
      - Contacts
      - Folders
      x-codegen-request-body-name: updateFolder
  /contacts/folders/{folderId}/lists:
    get:
      operationId: getFolderLists
      parameters:
      - description: Id of the folder
        in: path
        name: folderId
        required: true
        schema:
          format: int64
          type: integer
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 10
          format: int64
          maximum: 50
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                lists:
                - id: 46
                  name: Reactiv
                  totalSubscribers: 7655
                  totalBlacklisted: 0
                - id: 41
                  name: NY_Area
                  totalSubscribers: 3654
                  totalBlacklisted: 23
                - id: 22
                  name: VIP_Customer
                  totalSubscribers: 8753
                  totalBlacklisted: 72
                count: 3
              schema:
                $ref: '#/components/schemas/getFolderLists'
          description: Folder's Lists details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Folder ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get lists in a folder
      tags:
      - Contacts
      - Folders
      - Lists
  /contacts/lists:
    get:
      operationId: getLists
      parameters:
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 10
          format: int64
          maximum: 50
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                lists:
                - id: 53
                  name: Spanish_Speakers
                  totalSubscribers: 5432
                  totalBlacklisted: 65
                  folderId: 1
                - id: 50
                  name: Other
                  totalSubscribers: 10976
                  totalBlacklisted: 765
                  folderId: 2
                count: 2
              schema:
                $ref: '#/components/schemas/getLists'
          description: Lists informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all the lists
      tags:
      - Contacts
      - Lists
    post:
      operationId: createList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createList'
        description: Values to create a list
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: List created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create a list
      tags:
      - Contacts
      - Lists
      x-codegen-request-body-name: createList
  /contacts/lists/{listId}:
    delete:
      operationId: deleteList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: List deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete a list
      tags:
      - Contacts
      - Lists
    get:
      operationId: getList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                id: 12
                name: Newsletter_Weekly
                totalSubscribers: 6533
                totalBlacklisted: 63
                folderId: 1
                createdAt: 2016-02-26T11:56:08Z
                campaignStats:
                - campaignId: 15
                  stats:
                    uniqueClicks: 701
                    clickers: 789
                    complaints: 0
                    delivered: 6632
                    sent: 6645
                    softBounces: 34
                    hardBounces: 4
                    uniqueViews: 3442
                    unsubscriptions: 4
                    viewed: 4322
                    deferred: 0
                - campaignId: 45
                  stats:
                    uniqueClicks: 654
                    clickers: 788
                    complaints: 1
                    delivered: 4078
                    sent: 4334
                    softBounces: 18
                    hardBounces: 2
                    uniqueViews: 987
                    unsubscriptions: 4
                    viewed: 1555
                    deferred: 0
                dynamicList: false
              schema:
                $ref: '#/components/schemas/getExtendedList'
          description: List informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get a list's details
      tags:
      - Contacts
      - Lists
    put:
      operationId: updateList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateList'
        description: Values to update a list
        required: true
      responses:
        "204":
          content: {}
          description: List updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
      summary: Update a list
      tags:
      - Contacts
      - Lists
      x-codegen-request-body-name: updateList
  /contacts/lists/{listId}/contacts:
    get:
      operationId: getContactsFromList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      - description: Filter (urlencoded) the contacts modified after a given UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format
          for accurate result.
        in: query
        name: modifiedSince
        schema:
          format: date-time
          type: string
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 500
          type: integer
      - description: Index of the first document of the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                contacts:
                - email: alex.pain@example.com
                  id: 45
                  emailBlacklisted: false
                  smsBlacklisted: true
                  createdAt: 2017-05-12T12:30:00Z
                  modifiedAt: 2017-05-12T12:30:00Z
                  listIds:
                  - 12
                  - 9
                  - 20
                  listUnsubscribed:
                  - 1
                  - 2
                  attributes:
                    LASTNAME: Pain
                    FIRSTNAME: Alex
                    DOB: 2010-12-31
                    GENDER: Kid
                - email: john.smith@example.com
                  id: 32
                  emailBlacklisted: true
                  smsBlacklisted: false
                  createdAt: 2017-05-12T12:30:00Z
                  modifiedAt: 2017-05-12T12:30:00Z
                  listIds:
                  - 12
                  listUnsubscribed:
                  - 1
                  attributes:
                    LASTNAME: Smith
                    FIRSTNAME: John
                    DOB: 1986-06-21
                    GENDER: Men
                - email: helen.rose@example.com
                  id: 65
                  emailBlacklisted: true
                  smsBlacklisted: false
                  createdAt: 2017-05-12T12:30:00Z
                  modifiedAt: 2017-05-12T12:30:00Z
                  listIds:
                  - 12
                  - 9
                  - 20
                  listUnsubscribed:
                  - 1
                  attributes:
                    LASTNAME: Rose
                    FIRSTNAME: Helen
                    DOB: 1988-11-02
                    GENDER: Women
                    SMS: "3375599887766"
                count: 17655
              schema:
                $ref: '#/components/schemas/getContacts'
          description: Contact informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
      summary: Get contacts in a list
      tags:
      - Contacts
      - Lists
  /contacts/lists/{listId}/contacts/add:
    post:
      operationId: addContactToList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addContactToList'
        description: Emails addresses of the contacts
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
          description: All contacts have been added successfully to the list with
            details of failed ones
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
      summary: Add existing contacts to a list
      tags:
      - Contacts
      - Lists
      x-codegen-request-body-name: contactEmails
  /contacts/lists/{listId}/contacts/remove:
    post:
      operationId: removeContactFromList
      parameters:
      - description: Id of the list
        in: path
        name: listId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeContactFromList'
        description: Emails adresses of the contact
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
          description: All contacts have been removed successfully from the list with
            details of failed ones
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: List ID not found
      summary: Delete a contact from a list
      tags:
      - Contacts
      - Lists
      x-codegen-request-body-name: contactEmails
  /contacts/export:
    post:
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input. File will be available in csv.
      operationId: requestContactExport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactExport'
        description: Values to request a contact export
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
          description: Contact export request has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Export contacts
      tags:
      - Contacts
      x-codegen-request-body-name: requestContactExport
  /contacts/import:
    post:
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input.
      operationId: importContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactImport'
        description: "Values to import contacts in Sendinblue. To know more about\
          \ the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``"
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
          description: Contact import request has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Import contacts
      tags:
      - Contacts
      x-codegen-request-body-name: requestContactImport
  /smsCampaigns:
    get:
      operationId: getSmsCampaigns
      parameters:
      - description: Status of campaign.
        in: query
        name: status
        schema:
          enum:
          - suspended
          - archive
          - sent
          - queued
          - draft
          - inProcess
          type: string
      - description: Mandatory if endDate is used. Starting (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass
          your timezone in date-time format for accurate result ( only available if
          either 'status' not passed and if passed is set to 'sent' )
        in: query
        name: startDate
        schema:
          format: date-time
          type: string
      - description: Mandatory if startDate is used. Ending (urlencoded) UTC date-time
          (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass
          your timezone in date-time format for accurate result ( only available if
          either 'status' not passed and if passed is set to 'sent' )
        in: query
        name: endDate
        schema:
          format: date-time
          type: string
      - description: Number limitation for the result returned
        in: query
        name: limit
        schema:
          default: 500
          format: int64
          maximum: 1000
          type: integer
      - description: Beginning point in the list to retrieve from.
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                campaigns:
                - id: 2
                  name: PROMO CODE
                  status: sent
                  content: Visit our Store and get some discount !
                  scheduledAt: 2017-06-01T12:30:00Z
                  testSent: true
                  sender: MyCompany
                  createdAt: 2017-06-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
                  sentDate: 2017-06-01T12:30:00Z
                  recipients:
                    lists:
                    - 21
                    exclusionLists:
                    - 13
                  statistics:
                    delivered: 2987
                    sent: 3000
                    processing: 0
                    softBounces: 3
                    hardBounces: 1
                    unsubscriptions: 3
                    answered: 2
                - id: 10
                  name: SUMMER SALE
                  status: draft
                  content: Summer Sale is starting tomorrow. Get extra 10% with this
                    code:SUM17
                  scheduledAt: 2017-08-04T12:30:00Z
                  testSent: false
                  sender: MyCompany
                  createdAt: 2017-06-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
                  sentDate: 2017-06-01T12:30:00Z
                  recipients:
                    lists:
                    - 21
                    exclusionLists:
                    - 13
                  statistics:
                    delivered: 2987
                    sent: 3000
                    processing: 0
                    softBounces: 3
                    hardBounces: 1
                    unsubscriptions: 3
                    answered: 2
                count: 12
              schema:
                $ref: '#/components/schemas/getSmsCampaigns'
          description: SMS campaigns informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Returns the information for all your created SMS campaigns
      tags:
      - SMS Campaigns
    post:
      operationId: createSmsCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmsCampaign'
        description: Values to create an SMS Campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: SMS campaign created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Creates an SMS campaign
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: createSmsCampaign
  /smsCampaigns/{campaignId}:
    delete:
      operationId: deleteSmsCampaign
      parameters:
      - description: id of the SMS campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: SMS campaign has been deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete an SMS campaign
      tags:
      - SMS Campaigns
    get:
      operationId: getSmsCampaign
      parameters:
      - description: id of the SMS campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                id: 2
                name: PROMO CODE
                status: sent
                content: Visit our Store and get some discount !
                scheduledAt: 2017-06-01T12:30:00Z
                testSent: true
                sender: MyCompany
                createdAt: 2017-06-01T12:30:00Z
                modifiedAt: 2017-05-01T12:30:00Z
                recipients:
                  lists:
                  - 21
                  exclusionLists:
                  - 13
                statistics:
                  delivered: 2987
                  sent: 3000
                  processing: 0
                  softBounces: 3
                  hardBounces: 1
                  unsubscriptions: 3
                  answered: 2
              schema:
                $ref: '#/components/schemas/getSmsCampaign'
          description: SMS campaign informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Get an SMS campaign
      tags:
      - SMS Campaigns
    put:
      operationId: updateSmsCampaign
      parameters:
      - description: id of the SMS campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmsCampaign'
        description: Values to update an SMS Campaign
        required: true
      responses:
        "204":
          content: {}
          description: SMS campaign updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Update an SMS campaign
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: updateSmsCampaign
  /smsCampaigns/{campaignId}/sendNow:
    post:
      operationId: sendSmsCampaignNow
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: SMS campaign has been scheduled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: SMS Campaign could not be sent
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: You don't have enough credit to send your campaign. Please
            update your plan
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Send your SMS campaign immediately
      tags:
      - SMS Campaigns
  /smsCampaigns/{campaignId}/status:
    put:
      operationId: updateSmsCampaignStatus
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        description: Status of the campaign.
        required: true
      responses:
        "204":
          content: {}
          description: The campaign status has been updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Update a campaign's status
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: status
  /smsCampaigns/{campaignId}/sendTest:
    post:
      operationId: sendTestSms
      parameters:
      - description: Id of the SMS campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestSms'
        description: Mobile number of the recipient with the country code. This number
          must belong to one of your contacts in SendinBlue account and must not be
          blacklisted
        required: true
      responses:
        "204":
          content: {}
          description: Test SMS has been sent successfully to the recipient
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendSmsTestFailed'
          description: Test SMS could not be sent to the following email addresses
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Send a test SMS campaign
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: phoneNumber
  /smsCampaigns/{campaignId}/exportRecipients:
    post:
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input.
      operationId: requestSmsRecipientExport
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestSmsRecipientExport'
        description: Values to send for a recipient export request
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
          description: Recipient export request has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Export an SMS campaign's recipients
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: recipientExport
  /smsCampaigns/{campaignId}/sendReport:
    post:
      description: "Send report of Sent and Archived campaign, to the specified email\
        \ addresses, with respective data and a pdf attachment in detail."
      operationId: sendSmsReport
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        description: Values for send a report
        required: true
      responses:
        "204":
          content: {}
          description: Report has been successfully sent to the defined recipients
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign ID not found
      summary: Send an SMS campaign's report
      tags:
      - SMS Campaigns
      x-codegen-request-body-name: sendReport
  /transactionalSMS/sms:
    post:
      operationId: sendTransacSms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTransacSms'
        description: Values to send a transactional SMS
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendSms'
          description: SMS has been sent successfully to the recipient
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: You don't have enough credit to send your SMS. Please update
            your plan
      summary: Send SMS message to a mobile number
      tags:
      - Transactional SMS
      x-codegen-request-body-name: sendTransacSms
  /transactionalSMS/statistics/aggregatedReport:
    get:
      operationId: getTransacAggregatedSmsReport
      parameters:
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the
          report
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the
          report
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of days in the past including today (positive integer).
          Not compatible with startDate and endDate
        in: query
        name: days
        schema:
          type: integer
      - description: Filter on a tag
        in: query
        name: tag
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                range: 2015-05-22|2017-11-29
                requests: 54
                delivered: 16
                hardBounces: 5
                softBounces: 26
                blocked: 4
                unsubscribed: 10
                replied: 8
                accepted: 6
                rejected: 14
              schema:
                $ref: '#/components/schemas/getTransacAggregatedSmsReport'
          description: Aggregated SMS report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get your SMS activity aggregated over a period of time
      tags:
      - Transactional SMS
  /transactionalSMS/statistics/reports:
    get:
      operationId: getTransacSmsReport
      parameters:
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the
          report
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the
          report
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of days in the past including today (positive integer).
          Not compatible with 'startDate' and 'endDate'
        in: query
        name: days
        schema:
          type: integer
      - description: Filter on a tag
        in: query
        name: tag
        schema:
          type: string
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                reports:
                - date: 2017-04-30
                  requests: 10756
                  delivered: 10103
                  hardBounces: 21
                  softBounces: 137
                  blocked: 1026
                  unsubscribed: 720
                  replied: 5091
                  accepted: 2318
                  rejected: 0
                - date: 2017-05-01
                  requests: 18812
                  delivered: 17499
                  hardBounces: 34
                  softBounces: 254
                  blocked: 1514
                  unsubscribed: 1090
                  replied: 10089
                  accepted: 4393
                  rejected: 0
                - date: 2017-05-02
                  requests: 14321
                  delivered: 13427
                  hardBounces: 16
                  softBounces: 176
                  blocked: 1646
                  unsubscribed: 1170
                  replied: 11563
                  accepted: 4689
                  rejected: 0
              schema:
                $ref: '#/components/schemas/getTransacSmsReport'
          description: Aggregated SMS report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get your SMS activity aggregated per day
      tags:
      - Transactional SMS
  /transactionalSMS/statistics/events:
    get:
      operationId: getSmsEvents
      parameters:
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 100
          type: integer
      - description: Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the
          report
        in: query
        name: startDate
        schema:
          type: string
      - description: Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the
          report
        in: query
        name: endDate
        schema:
          type: string
      - description: Index of the first document of the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Number of days in the past including today (positive integer).
          Not compatible with 'startDate' and 'endDate'
        in: query
        name: days
        schema:
          type: integer
      - description: Filter the report for a specific phone number
        in: query
        name: phoneNumber
        schema:
          type: string
      - description: Filter the report for specific events
        in: query
        name: event
        schema:
          enum:
          - bounces
          - hardBounces
          - softBounces
          - delivered
          - sent
          - accepted
          - unsubscription
          - replies
          - blocked
          - rejected
          type: string
      - description: Filter the report for specific tags passed as a serialized urlencoded
          array
        in: query
        name: tags
        schema:
          type: string
      - description: Sort the results in the ascending/descending order of record
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                events:
                - phoneNumber: "00911059469013"
                  date: 2015-05-20T12:30:00Z
                  messageId: "1473139351170140"
                  event: sent
                  reason: Recipient is currently unreachable
                  tag: cabWaiting
                - phoneNumber: "00911059469013"
                  date: 2015-05-20T16:30:00Z
                  messageId: "1473139351170140"
                  event: delivered
                  reason: Recipient is currently unreachable
                  tag: cabRequest
              schema:
                $ref: '#/components/schemas/getSmsEventReport'
          description: Sms events report informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all your SMS activity (unaggregated events)
      tags:
      - Transactional SMS
  /whatsappCampaigns/{campaignId}:
    delete:
      operationId: deleteWhatsAppCampaign
      parameters:
      - description: id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: WhatsApp campaign has been deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign Id not found
      summary: Delete a WhatsApp campaign
      tags:
      - WhatsApp Campaigns
    get:
      operationId: getWhatsAppCampaign
      parameters:
      - description: Id of the campaign
        in: path
        name: campaignId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                response:
                  value:
                    id: 1672035851100690
                    campaignName: Test WhatsApp Campaign
                    campaignStatus: sent
                    scheduledAt: 2022-12-26T09:50:00Z
                    senderNumber: 9368207029
                    type: list
                    includedLists:
                    - 22
                    excludedLists:
                    - 45
                    template:
                      name: official_campaign8
                      category: MARKETING
                      language: en
                      contains_button: true
                      display_header: false
                      components:
                      - type: BODY
                        text: making it look like readable English.
                      - type: BUTTONS
                        buttons:
                        - type: URL
                          text: vLorem Ipsum is simply du
                          url: app.sendinblue
                        - type: PHONE_NUMBER
                          text: Lorem Ipsum is simply dum
                          phone_number: "+918800613137"
                      header_variables:
                      - name: FIRSTNAME
                        default: INVALID HEADER
                        index: 1
                        datatype: text
                      header_type: text
                      body_variable: []
                      button_type: CALL_TO_ACTION
                      header_footer: true
                    stats:
                      sent: "3,"
                      delivered: "3,"
                      read: "2,"
                      unsubscribe: "0,"
                      notSent: 4
                    createdAt: 2022-12-26T06:50:00Z
                    modifiedAt: 2022-12-26T08:50:00Z
              schema:
                $ref: '#/components/schemas/getWhatsappCampaignOverview'
          description: Get WhatsApp campaign information on the basis of campaignId
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Campaign Id not found
      summary: Get a WhatsApp campaign
      tags:
      - WhatsApp Campaigns
  /whatsappCampaigns/template-list:
    get:
      operationId: getWhatsAppTemplates
      parameters:
      - description: |
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
          **Prefer to pass your timezone in date-time format for accurate result**
        in: query
        name: startDate
        schema:
          type: string
      - description: |
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
          **Prefer to pass your timezone in date-time format for accurate result**
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 100
          minimum: 0
          type: integer
      - description: Index of the first document in the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          modification. Default order is **descending** if `sort` is not passed
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                count: 2
                templates:
                - id: 235
                  name: campaign_22
                  type: whatsapp
                  status: approved
                  language: en
                  category: MARKETING
                  errorReason: NONE
                  createdAt: 2017-05-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
                - id: 124
                  name: test-template
                  type: whatsapp
                  status: draft
                  language: ""
                  category: MARKETING
                  errorReason: NONE
                  createdAt: 2017-05-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
              schema:
                $ref: '#/components/schemas/getWATemplates'
          description: WhatsApp templates informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Return all your created WhatsApp templates
      tags:
      - WhatsApp Campaigns
  /whatsappCampaigns:
    get:
      operationId: getWhatsAppCampaigns
      parameters:
      - description: |
          **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
          **Prefer to pass your timezone in date-time format for accurate result**
        in: query
        name: startDate
        schema:
          type: string
      - description: |
          **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
          **Prefer to pass your timezone in date-time format for accurate result**
        in: query
        name: endDate
        schema:
          type: string
      - description: Number of documents per page
        in: query
        name: limit
        schema:
          default: 50
          format: int64
          maximum: 100
          minimum: 0
          type: integer
      - description: Index of the first document in the page
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      - description: Sort the results in the ascending/descending order of record
          modification. Default order is **descending** if `sort` is not passed
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                count: 23
                campaigns:
                - id: 1672035851100690
                  campaignName: campaign_22
                  campaignStatus: sent
                  templateId: 637660278078655
                  scheduledAt: 2022-12-27T09:50:00Z
                  errorReason: NONE
                  name: campaign_22
                  type: whatsapp
                  status: approved
                  language: en
                  category: MARKETING
                  invalidatedContacts: 0
                  stats:
                    sent: 3
                    delivered: 3
                    read: 2
                    unsubscribe: 0
                    notSent: 4
                  readPercentage: 28.57
                  createdAt: 2017-05-01T12:30:00Z
                  modifiedAt: 2017-05-01T12:30:00Z
              schema:
                $ref: '#/components/schemas/getWhatsappCampaigns'
          description: WhatsApp campaigns informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Return all your created WhatsApp campaigns
      tags:
      - WhatsApp Campaigns
  /senders:
    get:
      operationId: getSenders
      parameters:
      - description: Filter your senders for a specific ip (available for dedicated
          IP usage only)
        in: query
        name: ip
        schema:
          type: string
      - description: Filter your senders for a specific domain
        in: query
        name: domain
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                senders:
                - id: 1
                  name: Marketing
                  email: marketing@mycompany.com
                  active: true
                  ips:
                  - ip: 123.98.689.7
                    domain: mycompany.com
                    weight: 100
                - id: 2
                  name: Newsletter
                  email: newsletter@mycompany.com
                  active: false
                  ips:
                  - ip: 123.98.689.7
                    domain: mycompany.com
                    weight: 50
                  - ip: 123.98.643.2
                    domain: news.mycompany.com
                    weight: 50
              schema:
                $ref: '#/components/schemas/getSendersList'
          description: list of senders
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get the list of all your senders
      tags:
      - Senders
    post:
      operationId: createSender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSender'
        description: sender's name
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSenderModel'
          description: sender created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create a new sender
      tags:
      - Senders
      x-codegen-request-body-name: sender
  /senders/{senderId}:
    delete:
      operationId: deleteSender
      parameters:
      - description: Id of the sender
        in: path
        name: senderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: sender deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Sender ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete a sender
      tags:
      - Senders
    put:
      operationId: updateSender
      parameters:
      - description: Id of the sender
        in: path
        name: senderId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSender'
        description: sender's name
        required: false
      responses:
        "204":
          content: {}
          description: sender updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Sender ID not found
      summary: Update a sender
      tags:
      - Senders
      x-codegen-request-body-name: sender
  /senders/{senderId}/ips:
    get:
      operationId: getIpsFromSender
      parameters:
      - description: Id of the sender
        in: path
        name: senderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                ips:
                - id: 3
                  ip: 123.65.8.22
                  domain: mailing.myshop.dom
                  weight: 40
                - id: 5
                  ip: 123.43.21.3
                  domain: newsletter.myshop.dom
                  weight: 60
              schema:
                $ref: '#/components/schemas/getIpsFromSender'
          description: list of dedicated IPs
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Sender ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all the dedicated IPs for a sender
      tags:
      - Senders
  /senders/ips:
    get:
      operationId: getIps
      responses:
        "200":
          content:
            application/json:
              example:
                ips:
                - id: 3
                  ip: 67.145.89.3
                  active: true
                  domain: mailing.myshop.com
                - id: 5
                  ip: 76.76.125.9
                  active: true
                  domain: newsletter.myshop.com
                - id: 6
                  ip: 123.65.8.22
                  active: false
                  domain: notifications.myshop.com
              schema:
                $ref: '#/components/schemas/getIps'
          description: list of dedicated IPs
      summary: Get all the dedicated IPs for your account
      tags:
      - Senders
  /webhooks:
    get:
      operationId: getWebhooks
      parameters:
      - description: Filter on webhook type
        in: query
        name: type
        schema:
          default: transactional
          enum:
          - marketing
          - transactional
          type: string
      - description: Sort the results in the ascending/descending order of webhook
          creation
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                webhooks:
                - url: https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1
                  id: 9864
                  description: Webhook triggered on campaign openings
                  events:
                  - opened
                  type: transac
                  createdAt: 2016-07-18T12:30:09Z
                  modifiedAt: 2016-07-18T16:00:50Z
                - url: http://exmaple.domain.com/15kxxxxxn1
                  id: 22770
                  description: Webhook triggered on campaign hard bounces
                  events:
                  - hardBounces
                  type: marketing
                  createdAt: 2017-02-20T14:30:00Z
                  modifiedAt: 2017-02-20T19:00:00Z
              schema:
                $ref: '#/components/schemas/getWebhooks'
          description: Webhooks informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get all webhooks
      tags:
      - Webhooks
    post:
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWebhook'
        description: Values to create a webhook
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
          description: Webhook created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Create a webhook
      tags:
      - Webhooks
      x-codegen-request-body-name: createWebhook
  /webhooks/{webhookId}:
    delete:
      operationId: deleteWebhook
      parameters:
      - description: Id of the webhook
        in: path
        name: webhookId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: Webhook deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Webhook ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Delete a webhook
      tags:
      - Webhooks
    get:
      operationId: getWebhook
      parameters:
      - description: Id of the webhook
        in: path
        name: webhookId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                url: http://example.domain.com/1brxxxxxx5p1
                id: 7287
                description: Webhook triggered on campaign openings and addition of
                  lists
                events:
                - listAdditions
                - opened
                type: marketing
                createdAt: 2016-06-07T09:10:10Z
                modifiedAt: 2016-06-08T11:30:00Z
              schema:
                $ref: '#/components/schemas/getWebhook'
          description: Webhook informations
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Webhook ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Get a webhook details
      tags:
      - Webhooks
    put:
      operationId: updateWebhook
      parameters:
      - description: Id of the webhook
        in: path
        name: webhookId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWebhook'
        description: Values to update a webhook
        required: true
      responses:
        "204":
          content: {}
          description: Webhook updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Webhook ID not found
      summary: Update a webhook
      tags:
      - Webhooks
      x-codegen-request-body-name: updateWebhook
  /account:
    get:
      operationId: getAccount
      responses:
        "200":
          content:
            application/json:
              example:
                plan:
                - type: payAsYouGo
                  credits: 5000
                  creditsType: sendLimit
                - type: subscription
                  credits: 39983
                  creditsType: sendLimit
                  startDate: 2017-03-11
                  endDate: 2017-04-11
                - type: sms
                  credits: 999.5360000000001
                  creditsType: sendLimit
                relay:
                  enabled: true
                  data:
                    userName: john.smith@example.com
                    relay: smtp-relay.domain.com
                    port: 587
                marketingAutomation:
                  key: kzfr5xxxxxxttuyo1
                  enabled: true
                email: john.smith@example.com
                firstName: John
                lastName: Smith
                companyName: MyShop
                address:
                  city: New-York
                  street: 1677B 8th Avenue
                  zipCode: "7665"
                  country: USA
              schema:
                $ref: '#/components/schemas/getAccount'
          description: account informations
      summary: "Get your account information, plan and credits details"
      tags:
      - Account
  /processes:
    get:
      operationId: getProcesses
      parameters:
      - description: Number limitation for the result returned
        in: query
        name: limit
        schema:
          default: 10
          format: int64
          maximum: 50
          type: integer
      - description: Beginning point in the list to retrieve from.
        in: query
        name: offset
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                processes:
                - id: 40
                  status: completed
                  name: TRANS-CALC
                - id: 43
                  status: queued
                  name: TRANS-GLOBAL-CALC
                - id: 194
                  status: completed
                  name: SEARCH_EXPORT_USERS
                  export_url: <a href="https://export-url.com/upload/file-name.csv"
                    target="_blank">filename.csv</a>
                count: 3
              schema:
                $ref: '#/components/schemas/getProcesses'
          description: processes informations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Return all the processes for your account
      tags:
      - Process
  /processes/{processId}:
    get:
      operationId: getProcess
      parameters:
      - description: Id of the process
        in: path
        name: processId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                id: 194
                status: completed
                name: SEARCH_EXPORT_USERS
                export_url: <a href="https://export-url.com/upload/file-name.csv"
                  target="_blank">filename.csv</a>
              schema:
                $ref: '#/components/schemas/getProcess'
          description: process informations
        "404":
          content:
            application/json:
              example:
                code: invalid_parameter
                message: processId is invalid
              schema:
                $ref: '#/components/schemas/errorModel'
          description: Process ID not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
          description: bad request
      summary: Return the informations for a process
      tags:
      - Process
components:
  schemas:
    getAccount:
      allOf:
      - $ref: '#/components/schemas/getExtendedClient'
      - properties:
          plan:
            description: Information about your plans and credits
            items:
              $ref: '#/components/schemas/getAccount_allOf_plan'
            type: array
          relay:
            $ref: '#/components/schemas/getAccount_allOf_relay'
          marketingAutomation:
            $ref: '#/components/schemas/getAccount_allOf_marketingAutomation'
        required:
        - plan
        - relay
        type: object
      example:
        firstName: John
        lastName: Smith
        address:
          zipCode: "9867"
          country: United States of America
          city: New-York
          street: 47 Harbour Street
        marketingAutomation:
          key: iso05aopqych87ysy0jymf
          enabled: false
        companyName: MyCompany
        relay:
          data:
            port: 125
            relay: relay.domain.com
            userName: john.smith@example.com
          enabled: true
        plan:
        - creditsType: sendLimit
          credits: 8755.0
          endDate: 2017-01-31
          type: subscription
          startDate: 2016-12-31
        - creditsType: sendLimit
          credits: 8755.0
          endDate: 2017-01-31
          type: subscription
          startDate: 2016-12-31
        email: john.smith@example.com
    getSsoToken:
      properties:
        token:
          description: Session token. It will remain valid for a short period of time
            only.
          example: ede520dxxxxxxxxxxxx76d631fba2
          type: string
      required:
      - token
      type: object
    getChildDomain:
      properties:
        domain:
          description: Sender domain
          example: mycustomdomain.com
          type: string
        active:
          description: indicates whether a domain is verified or not
          example: true
          type: boolean
      required:
      - active
      - domain
      type: object
    getClient:
      properties:
        email:
          description: Login Email
          example: john.smith@example.com
          format: email
          type: string
        firstName:
          description: First Name
          example: John
          type: string
        lastName:
          description: Last Name
          example: Smith
          type: string
        companyName:
          description: Name of the company
          example: MyCompany
          type: string
      required:
      - companyName
      - email
      - firstName
      - lastName
      type: object
    getExtendedClient:
      allOf:
      - $ref: '#/components/schemas/getClient'
      - properties:
          address:
            $ref: '#/components/schemas/getExtendedClient_allOf_address'
        required:
        - address
        type: object
    getSendersList:
      example:
        senders:
        - name: Marketing
          active: false
          id: 0
          ips:
          - ip: 123.98.689.7
            domain: mycompany.com
            weight: 50
          - ip: 123.98.689.7
            domain: mycompany.com
            weight: 50
          email: marketing@mycompany.com
        - name: Marketing
          active: false
          id: 0
          ips:
          - ip: 123.98.689.7
            domain: mycompany.com
            weight: 50
          - ip: 123.98.689.7
            domain: mycompany.com
            weight: 50
          email: marketing@mycompany.com
      properties:
        senders:
          description: List of the senders available in your account
          items:
            $ref: '#/components/schemas/getSendersList_senders_inner'
          type: array
      type: object
    createChild:
      properties:
        email:
          description: Email address to create the child account
          example: josh.cruise@example.com
          format: email
          type: string
        firstName:
          description: First name to use to create the child account
          example: Josh
          type: string
        lastName:
          description: Last name to use to create the child account
          example: Cruise
          type: string
        companyName:
          description: Company name to use to create the child account
          example: Your Company
          type: string
        password:
          description: Password for the child account to login
          example: Pa55w0rd65
          format: password
          type: string
        language:
          description: Language of the child account
          enum:
          - fr
          - es
          - pt
          - it
          - de
          - en
          example: en
          type: string
      required:
      - companyName
      - email
      - firstName
      - lastName
      - password
      type: object
    createSender:
      properties:
        name:
          description: From Name to use for the sender
          example: Newsletter
          type: string
        email:
          description: From email to use for the sender. A verification email will
            be sent to this address.
          example: newsletter@mycompany.com
          format: email
          type: string
        ips:
          description: "Mandatory in case of dedicated IP, IPs to associate to the\
            \ sender"
          items:
            $ref: '#/components/schemas/createSender_ips_inner'
          type: array
      required:
      - email
      - name
      type: object
    updateSender:
      properties:
        name:
          description: From Name to update the sender
          example: Newsletter
          type: string
        email:
          description: From Email to update the sender
          example: newsletter@mycompany.com
          format: email
          type: string
        ips:
          description: "Only in case of dedicated IP, IPs to associate to the sender.\
            \ If passed, will replace all the existing IPs."
          items:
            $ref: '#/components/schemas/createSender_ips_inner'
          type: array
      type: object
    updateChild:
      properties:
        email:
          description: New Email address to update the child account
          example: josh.cruise@example.com
          format: email
          type: string
        firstName:
          description: New First name to use to update the child account
          example: Josh
          type: string
        lastName:
          description: New Last name to use to update the child account
          example: Cruise
          type: string
        companyName:
          description: New Company name to use to update the child account
          example: Your Company
          type: string
        password:
          description: New password for the child account to login
          example: Pa55w0rd65
          format: password
          type: string
      type: object
    errorModel:
      example:
        code: method_not_allowed
        message: POST Method is not allowed on this path
      properties:
        code:
          description: Error code displayed in case of a failure
          enum:
          - invalid_parameter
          - missing_parameter
          - out_of_range
          - campaign_processing
          - campaign_sent
          - document_not_found
          - not_enough_credits
          - permission_denied
          - duplicate_parameter
          - duplicate_request
          - method_not_allowed
          - unauthorized
          - account_under_validation
          - not_acceptable
          example: method_not_allowed
          type: string
        message:
          description: Readable message associated to the failure
          example: POST Method is not allowed on this path
          type: string
      required:
      - code
      - message
      type: object
    contactErrorModel:
      example:
        metadata:
          duplicate_identifiers:
          - email
        code: duplicate_parameter
        message: email is already associated with another Contact
      properties:
        code:
          description: Error code displayed in case of a failure
          enum:
          - invalid_parameter
          - missing_parameter
          - document_not_found
          - account_in_process
          - duplicate_parameter
          - method_not_allowed
          - out_of_range
          example: duplicate_parameter
          type: string
        message:
          description: Readable message associated to the failure
          example: email is already associated with another Contact
          type: string
        metadata:
          description: Additional information about the error
          example:
            duplicate_identifiers:
            - email
          properties: {}
          type: object
      required:
      - code
      - message
      type: object
    removeCredits:
      properties:
        sms:
          description: Required if email credits are empty. SMS credits to be removed
            from the child account
          example: 300
          format: int64
          type: integer
        email:
          description: Required if sms credits are empty. Email credits to be removed
            from the child account
          example: 500
          format: int64
          type: integer
      type: object
    addChildDomain:
      properties:
        domain:
          description: Sender domain to add for a specific child account
          example: mychilddomain.com
          type: string
      type: object
    getProcesses:
      example:
        processes:
        - name: IMPORTUSER
          export_url: http://requestb.in/16ua3aj1
          id: 145
          status: queued
        - name: IMPORTUSER
          export_url: http://requestb.in/16ua3aj1
          id: 145
          status: queued
        count: 5
      properties:
        processes:
          description: List of processes available on your account
          items:
            $ref: '#/components/schemas/getProcess'
          type: array
        count:
          description: Number of processes available on your account
          example: 5
          format: int64
          type: integer
      required:
      - count
      type: object
    getProcess:
      example:
        name: IMPORTUSER
        export_url: http://requestb.in/16ua3aj1
        id: 145
        status: queued
      properties:
        id:
          description: Id of the process
          example: 145
          format: int64
          type: integer
        status:
          description: Status of the process
          enum:
          - queued
          - in_process
          - completed
          example: queued
          type: string
        name:
          description: Process name
          example: IMPORTUSER
          type: string
        export_url:
          description: URL on which send export the of contacts once the process is
            completed
          example: http://requestb.in/16ua3aj1
          type: string
      required:
      - id
      - name
      - status
      type: object
    getEmailCampaigns:
      example:
        campaigns:
        - footer: "[DEFAULT_FOOTER]"
          subject: 20% OFF for 2017 Summer Sales
          modifiedAt: 2017-05-01T12:30:00Z
          shareLink: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
          type: classic
          htmlContent: This is my HTML Content
          createdAt: 2017-05-01T12:30:00Z
          sentDate: 2018-12-01T16:30:00Z
          returnBounce: 5
          id: 12
          tag: Newsletter
          sendAtBestTime: true
          inlineImageActivation: true
          recurring: true
          winnerDelay: 50
          winnerCriteria: open
          testSent: true
          splitRule: 25
          subjectA: Discover the New Collection!
          sender:
            name: Marketing
            id: 43
            email: marketing@mycompany.com
          subjectB: Want to discover the New Collection?
          recipients: "{}"
          toField: "{FNAME} {LNAME}"
          name: EN - Sales Summer 2017
          replyTo: replyto@domain.com
          header: "[DEFAULT_HEADER]"
          scheduledAt: 2017-06-01T12:30:00Z
          abTesting: true
          mirrorActive: true
          status: sent
          statistics: "{}"
        - footer: "[DEFAULT_FOOTER]"
          subject: 20% OFF for 2017 Summer Sales
          modifiedAt: 2017-05-01T12:30:00Z
          shareLink: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
          type: classic
          htmlContent: This is my HTML Content
          createdAt: 2017-05-01T12:30:00Z
          sentDate: 2018-12-01T16:30:00Z
          returnBounce: 5
          id: 12
          tag: Newsletter
          sendAtBestTime: true
          inlineImageActivation: true
          recurring: true
          winnerDelay: 50
          winnerCriteria: open
          testSent: true
          splitRule: 25
          subjectA: Discover the New Collection!
          sender:
            name: Marketing
            id: 43
            email: marketing@mycompany.com
          subjectB: Want to discover the New Collection?
          recipients: "{}"
          toField: "{FNAME} {LNAME}"
          name: EN - Sales Summer 2017
          replyTo: replyto@domain.com
          header: "[DEFAULT_HEADER]"
          scheduledAt: 2017-06-01T12:30:00Z
          abTesting: true
          mirrorActive: true
          status: sent
          statistics: "{}"
        count: 24
      properties:
        campaigns:
          items:
            $ref: '#/components/schemas/getEmailCampaigns_campaigns_inner'
          type: array
        count:
          description: Number of Email campaigns retrieved
          example: 24
          format: int64
          type: integer
      required:
      - count
      type: object
    getSmsCampaigns:
      example:
        campaigns:
        - createdAt: 2017-06-01T12:30:00Z
          sender: MyCompany
          modifiedAt: 2017-05-01T12:30:00Z
          recipients: "{}"
          name: PROMO CODE
          id: 2
          content: Visit our Store and get some discount !
          scheduledAt: 2017-06-01T12:30:00Z
          status: draft
          statistics: "{}"
        - createdAt: 2017-06-01T12:30:00Z
          sender: MyCompany
          modifiedAt: 2017-05-01T12:30:00Z
          recipients: "{}"
          name: PROMO CODE
          id: 2
          content: Visit our Store and get some discount !
          scheduledAt: 2017-06-01T12:30:00Z
          status: draft
          statistics: "{}"
        count: 12
      properties:
        campaigns:
          items:
            $ref: '#/components/schemas/getSmsCampaigns_campaigns_inner'
          type: array
        count:
          description: Number of SMS campaigns retrieved
          example: 12
          format: int64
          type: integer
      required:
      - count
      type: object
    getSmsCampaign:
      allOf:
      - $ref: '#/components/schemas/getSmsCampaignOverview'
      - properties:
          recipients:
            $ref: '#/components/schemas/getSmsCampaign_allOf_recipients'
          statistics:
            $ref: '#/components/schemas/getSmsCampaign_allOf_recipients'
        required:
        - recipients
        - statistics
        type: object
      example:
        createdAt: 2017-06-01T12:30:00Z
        sender: MyCompany
        modifiedAt: 2017-05-01T12:30:00Z
        recipients: null
        name: PROMO CODE
        id: 2
        content: Visit our Store and get some discount !
        scheduledAt: 2017-06-01T12:30:00Z
        status: draft
        statistics: null
    getEmailCampaign:
      allOf:
      - $ref: '#/components/schemas/getExtendedCampaignOverview'
      - properties:
          recipients:
            $ref: '#/components/schemas/getSmsCampaign_allOf_recipients'
          statistics:
            $ref: '#/components/schemas/getSmsCampaign_allOf_recipients'
        required:
        - recipients
        - statistics
        type: object
      example:
        footer: "[DEFAULT_FOOTER]"
        subject: 20% OFF for 2017 Summer Sales
        modifiedAt: 2017-05-01T12:30:00Z
        shareLink: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
        type: classic
        htmlContent: This is my HTML Content
        createdAt: 2017-05-01T12:30:00Z
        sentDate: 2018-12-01T16:30:00Z
        returnBounce: 5
        id: 12
        tag: Newsletter
        sendAtBestTime: true
        inlineImageActivation: true
        recurring: true
        winnerDelay: 50
        winnerCriteria: open
        testSent: true
        splitRule: 25
        subjectA: Discover the New Collection!
        sender:
          name: Marketing
          id: 43
          email: marketing@mycompany.com
        subjectB: Want to discover the New Collection?
        recipients: null
        toField: "{FNAME} {LNAME}"
        name: EN - Sales Summer 2017
        replyTo: replyto@domain.com
        header: "[DEFAULT_HEADER]"
        scheduledAt: 2017-06-01T12:30:00Z
        abTesting: true
        mirrorActive: true
        status: sent
        statistics: null
    getCampaignOverview:
      properties:
        id:
          description: ID of the campaign
          example: 12
          format: int64
          type: integer
        name:
          description: Name of the campaign
          example: EN - Sales Summer 2017
          type: string
        subject:
          description: Subject of the campaign. Only available if `abTesting` flag
            of the campaign is `false`
          example: 20% OFF for 2017 Summer Sales
          type: string
        type:
          description: Type of campaign
          enum:
          - classic
          - trigger
          example: classic
          type: string
        status:
          description: Status of the campaign
          enum:
          - draft
          - sent
          - archive
          - queued
          - suspended
          - in_process
          example: sent
          type: string
        scheduledAt:
          description: UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
          format: date-time
          type: string
        abTesting:
          description: "Status of A/B Test for the campaign. abTesting = false means\
            \ it is disabled, & abTesting = true means it is enabled."
          example: true
          type: boolean
        subjectA:
          description: Subject A of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          example: Discover the New Collection!
          type: string
        subjectB:
          description: Subject B of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          example: Want to discover the New Collection?
          type: string
        splitRule:
          description: The size of your ab-test groups. Only available if `abTesting`
            flag of the campaign is `true`
          example: 25
          type: integer
        winnerCriteria:
          description: Criteria for the winning version. Only available if `abTesting`
            flag of the campaign is `true`
          example: open
          type: string
        winnerDelay:
          description: The duration of the test in hours at the end of which the winning
            version will be sent. Only available if `abTesting` flag of the campaign
            is `true`
          example: 50
          type: integer
        sendAtBestTime:
          description: "It is true if you have chosen to send your campaign at best\
            \ time, otherwise it is false"
          example: true
          type: boolean
      required:
      - id
      - name
      - status
      - type
      type: object
    getExtendedCampaignOverview:
      allOf:
      - $ref: '#/components/schemas/getCampaignOverview'
      - properties:
          testSent:
            description: Retrieved the status of test email sending. (true=Test email
              has been sent  false=Test email has not been sent)
            example: true
            type: boolean
          header:
            description: Header of the campaign
            example: "[DEFAULT_HEADER]"
            type: string
          footer:
            description: Footer of the campaign
            example: "[DEFAULT_FOOTER]"
            type: string
          sender:
            $ref: '#/components/schemas/getExtendedCampaignOverview_allOf_sender'
          replyTo:
            description: Email defined as the "Reply to" of the campaign
            example: replyto@domain.com
            format: email
            type: string
          toField:
            description: Customisation of the "to" field of the campaign
            example: "{FNAME} {LNAME}"
            type: string
          htmlContent:
            description: HTML content of the campaign
            example: This is my HTML Content
            type: string
          shareLink:
            description: Link to share the campaign on social medias
            example: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
            format: url
            type: string
          tag:
            description: Tag of the campaign
            example: Newsletter
            type: string
          createdAt:
            description: Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: 2017-05-01T12:30:00Z
            format: date-time
            type: string
          modifiedAt:
            description: UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: 2017-05-01T12:30:00Z
            format: date-time
            type: string
          inlineImageActivation:
            description: "Status of inline image. inlineImageActivation = false means\
              \ image can’t be embedded, & inlineImageActivation = true means image\
              \ can be embedded, in the email."
            example: true
            type: boolean
          mirrorActive:
            description: "Status of mirror links in campaign. mirrorActive = false\
              \ means mirror links are deactivated, & mirrorActive = true means mirror\
              \ links are activated, in the campaign"
            example: true
            type: boolean
          recurring:
            description: "FOR TRIGGER ONLY ! Type of trigger campaign.recurring =\
              \ false means contact can receive the same Trigger campaign only once,\
              \ & recurring = true means contact can receive the same Trigger campaign\
              \ several times"
            example: true
            type: boolean
          sentDate:
            description: Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ).
              Only available if 'status' of the campaign is 'sent'
            example: 2018-12-01T16:30:00Z
            format: date-time
            type: string
          returnBounce:
            description: Total number of non-delivered campaigns for a particular
              campaign id.
            example: 5
            format: int64
            type: integer
        required:
        - createdAt
        - footer
        - header
        - htmlContent
        - modifiedAt
        - replyTo
        - sender
        - tag
        - testSent
        - toField
        type: object
    getCampaignRecipients:
      properties:
        lists:
          items:
            description: List IDs included in the campaign
            example: 21
            format: int64
            type: integer
          type: array
        exclusionLists:
          items:
            description: List IDs excluded of the campaign
            example: 13
            format: int64
            type: integer
          type: array
      required:
      - exclusionLists
      - lists
      type: object
    getExtendedCampaignStats:
      properties:
        globalStats:
          allOf:
          - $ref: '#/components/schemas/getCampaignStats'
          description: Overall statistics of the campaign
          type: object
        campaignStats:
          description: List-wise statistics of the campaign.
          items:
            allOf:
            - $ref: '#/components/schemas/getCampaignStats'
            type: object
          type: array
        mirrorClick:
          description: Number of clicks on mirror link
          example: 120
          format: int64
          type: integer
        remaining:
          description: Number of remaning emails to send
          example: 1000
          format: int64
          type: integer
        linksStats:
          description: Statistics about the number of clicks for the links
          example:
            example.abc.com: 7
            example.domain.com: 10
          properties: {}
          type: object
        statsByDomain:
          additionalProperties:
            $ref: '#/components/schemas/getCampaignStats'
          type: object
        statsByDevice:
          $ref: '#/components/schemas/getStatsByDevice'
        statsByBrowser:
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          type: object
      required:
      - campaignStats
      - globalStats
      - linksStats
      - mirrorClick
      - remaining
      - statsByBrowser
      - statsByDevice
      - statsByDomain
      type: object
    getStatsByDomain:
      additionalProperties:
        $ref: '#/components/schemas/getCampaignStats'
      type: object
    getStatsByDevice:
      properties:
        desktop:
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of desktop devices
          type: object
        mobile:
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of mobile devices
          type: object
        tablet:
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of tablet devices
          type: object
        unknown:
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of unknown devices
          type: object
      type: object
    getStatsByBrowser:
      additionalProperties:
        $ref: '#/components/schemas/getDeviceBrowserStats'
      type: object
    addContactToList:
      properties:
        emails:
          description: "Emails to add to a list. You can pass a maximum of 150 emails\
            \ for addition in one request. If you need to add the emails in bulk,\
            \ please prefer /contacts/import api."
          items:
            description: Email to add to a list
            example: john.smith@contact.com
            format: email
            type: string
          maxItems: 150
          minItems: 1
          type: array
      type: object
    removeContactFromList:
      properties:
        emails:
          description: Required if 'all' is false. Emails to remove from a list. You
            can pass a maximum of 150 emails for removal in one request.
          items:
            description: Email to remove from a list
            example: john.smith@contact.com
            format: email
            type: string
          maxItems: 150
          minItems: 1
          type: array
        all:
          description: Required if 'emails' is empty. Remove all existing contacts
            from a list. A process will be created in this scenario. You can fetch
            the process details to know about the progress
          example: false
          type: boolean
      type: object
    getSmsCampaignOverview:
      properties:
        id:
          description: ID of the SMS Campaign
          example: 2
          format: int64
          type: integer
        name:
          description: Name of the SMS Campaign
          example: PROMO CODE
          type: string
        status:
          description: Status of the SMS Campaign
          enum:
          - draft
          - sent
          - archive
          - queued
          - suspended
          - inProcess
          example: draft
          type: string
        content:
          description: Content of the SMS Campaign
          example: Visit our Store and get some discount !
          type: string
        scheduledAt:
          description: UTC date-time on which SMS campaign is scheduled. Should be
            in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
          format: date-time
          type: string
        sender:
          description: Sender of the SMS Campaign
          example: MyCompany
          type: string
        createdAt:
          description: Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
          format: date-time
          type: string
        modifiedAt:
          description: UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
          format: date-time
          type: string
      required:
      - content
      - createdAt
      - id
      - modifiedAt
      - name
      - scheduledAt
      - sender
      - status
      type: object
    getWhatsappCampaignOverview:
      example:
        template:
          body_variables:
          - default: INVALID_HEADER
            datatype: text
            name: FIRSTNAME
          - default: INVALID_HEADER
            datatype: text
            name: FIRSTNAME
          hide_footer: true
          display_header: true
          components:
          - text: Life is a long lesson in humility
            type: BODY
          - text: Life is a long lesson in humility
            type: BODY
          button_type: QUICK_REPLIES
          name: wta107
          header_type: text
          language: en_GB
          contains_button: false
          header_variables:
          - default: INVALID_HEADER
            datatype: text
            name: FIRSTNAME
          - default: INVALID_HEADER
            datatype: text
            name: FIRSTNAME
          category: Marketing
        createdAt: 2017-06-01T12:30:00Z
        senderNumber: "9368207029"
        stats:
          read: 2
          unsubscribe: 0
          delivered: 3
          notSent: 4
          sent: 3
        modifiedAt: 2017-05-01T12:30:00Z
        campaignStatus: draft
        id: 1672035851100690
        campaignName: Test Campaign
        scheduledAt: 2017-06-01T12:30:00Z
      properties:
        id:
          description: ID of the WhatsApp Campaign
          example: 1672035851100690
          format: int64
          type: integer
        campaignName:
          description: Name of the WhatsApp Campaign
          example: Test Campaign
          type: string
        campaignStatus:
          description: Status of the WhatsApp Campaign
          enum:
          - draft
          - scheduled
          - pending
          - approved
          - running
          - suspended
          - rejected
          - sent
          example: draft
          type: string
        scheduledAt:
          description: UTC date-time on which WhatsApp campaign is scheduled. Should
            be in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
          type: string
        senderNumber:
          description: Sender of the WhatsApp Campaign
          example: "9368207029"
          type: string
        stats:
          $ref: '#/components/schemas/WhatsappCampStats'
        template:
          $ref: '#/components/schemas/WhatsappCampTemplate'
        createdAt:
          description: Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
          type: string
        modifiedAt:
          description: UTC date-time of last modification of the WhatsApp campaign
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
          type: string
      required:
      - campaignName
      - campaignStatus
      - createdAt
      - id
      - modifiedAt
      - senderNumber
      - template
      type: object
    WhatsappCampStats:
      example:
        read: 2
        unsubscribe: 0
        delivered: 3
        notSent: 4
        sent: 3
      properties:
        sent:
          example: 3
          type: integer
        delivered:
          example: 3
          type: integer
        read:
          example: 2
          type: integer
        unsubscribe:
          example: 0
          type: integer
        notSent:
          example: 4
          type: integer
      required:
      - delivered
      - notSent
      - read
      - sent
      - unsubscribe
      type: object
    WhatsappCampTemplate:
      example:
        body_variables:
        - default: INVALID_HEADER
          datatype: text
          name: FIRSTNAME
        - default: INVALID_HEADER
          datatype: text
          name: FIRSTNAME
        hide_footer: true
        display_header: true
        components:
        - text: Life is a long lesson in humility
          type: BODY
        - text: Life is a long lesson in humility
          type: BODY
        button_type: QUICK_REPLIES
        name: wta107
        header_type: text
        language: en_GB
        contains_button: false
        header_variables:
        - default: INVALID_HEADER
          datatype: text
          name: FIRSTNAME
        - default: INVALID_HEADER
          datatype: text
          name: FIRSTNAME
        category: Marketing
      properties:
        name:
          description: name of the template
          example: wta107
          type: string
        category:
          description: description of the template
          example: Marketing
          type: string
        language:
          description: language of the template
          example: en_GB
          type: string
        contains_button:
          example: false
          type: boolean
        display_header:
          example: true
          type: boolean
        header_type:
          description: type of header
          example: text
          type: string
        components:
          description: array of component item objects
          items:
            $ref: '#/components/schemas/componentItems'
          type: array
        header_variables:
          description: array of variables item object
          items:
            $ref: '#/components/schemas/variablesItems'
          type: array
        body_variables:
          description: array of variables item variables
          items:
            $ref: '#/components/schemas/variablesItems'
          type: array
        button_type:
          example: QUICK_REPLIES
          type: string
        hide_footer:
          example: true
          type: boolean
      type: object
    componentItems:
      example:
        text: Life is a long lesson in humility
        type: BODY
      properties:
        type:
          example: BODY
          type: string
        text:
          example: Life is a long lesson in humility
          type: string
      type: object
    variablesItems:
      example:
        default: INVALID_HEADER
        datatype: text
        name: FIRSTNAME
      properties:
        name:
          example: FIRSTNAME
          type: string
        default:
          example: INVALID_HEADER
          type: string
        datatype:
          example: text
          type: string
      type: object
    bodyVariablesItems:
      type: object
    getWATemplates:
      example:
        templates:
        - createdAt: 2017-06-01T12:30:00Z
          modifiedAt: 2017-05-01T12:30:00Z
          errorReason: NONE
          name: Test template
          language: en
          id: "235"
          category: MARKETING
          status: approved
        - createdAt: 2017-06-01T12:30:00Z
          modifiedAt: 2017-05-01T12:30:00Z
          errorReason: NONE
          name: Test template
          language: en
          id: "235"
          category: MARKETING
          status: approved
        count: 24
      properties:
        templates:
          items:
            $ref: '#/components/schemas/getWATemplates_templates_inner'
          type: array
        count:
          description: Number of whatsApp templates retrived
          example: 24
          format: int64
          type: integer
      required:
      - count
      - templates
      type: object
    getWhatsappCampaigns:
      example:
        campaigns:
        - createdAt: 2017-06-01T12:30:00Z
          stats:
            read: 2
            unsubscribe: 0
            delivered: 3
            notSent: 4
            sent: 3
          modifiedAt: 2017-05-01T12:30:00Z
          errorReason: NONE
          campaignStatus: draft
          readPercentage: 28.57
          id: 1672035851100690
          invalidatedContacts: 0
          templateId: "637660278078655"
          campaignName: Test Campaign
          scheduledAt: 2017-06-01T12:30:00Z
        - createdAt: 2017-06-01T12:30:00Z
          stats:
            read: 2
            unsubscribe: 0
            delivered: 3
            notSent: 4
            sent: 3
          modifiedAt: 2017-05-01T12:30:00Z
          errorReason: NONE
          campaignStatus: draft
          readPercentage: 28.57
          id: 1672035851100690
          invalidatedContacts: 0
          templateId: "637660278078655"
          campaignName: Test Campaign
          scheduledAt: 2017-06-01T12:30:00Z
        count: 24
      properties:
        campaigns:
          items:
            $ref: '#/components/schemas/getWhatsappCampaigns_campaigns_inner'
          type: array
        count:
          description: Number of WhatsApp campaigns retrived
          example: 24
          format: int64
          type: integer
      type: object
    createModel:
      example:
        id: 122
      properties:
        id:
          description: ID of the object created
          example: 122
          format: int64
          type: integer
      required:
      - id
      type: object
    createUpdateContactModel:
      example:
        id: 122
      properties:
        id:
          description: ID of the contact when a new contact is created
          example: 122
          format: int64
          type: integer
      type: object
    createSenderModel:
      example:
        dkimError: false
        id: 5
        spfError: true
      properties:
        id:
          description: ID of the Sender created
          example: 5
          format: int64
          type: integer
        spfError:
          description: "Status of SPF configuration for the sender (true = SPF not\
            \ well configured, false = SPF well configured)"
          example: true
          type: boolean
        dkimError:
          description: "Status of DKIM configuration for the sender (true = DKIM not\
            \ well configured, false = DKIM well configured)"
          example: false
          type: boolean
      required:
      - id
      type: object
    createSmtpEmail:
      example:
        messageId: <201798300811.5787683@relay.domain.com>
      properties:
        messageId:
          description: Message ID of the transactional email sent
          example: <201798300811.5787683@relay.domain.com>
          type: string
      required:
      - messageId
      type: object
    sendTemplateEmail:
      example:
        messageId: <201798300811.5787683@relay.domain.com>
      properties:
        messageId:
          description: Message ID of the template Email sent
          example: <201798300811.5787683@relay.domain.com>
          type: string
      required:
      - messageId
      type: object
    sendSms:
      example:
        reference: ab1cde2fgh3i4jklmno
        remainingCredits: 82.85
        smsCount: 2
        messageId: 1511882900176220
        usedCredits: 0.7
      properties:
        reference:
          example: ab1cde2fgh3i4jklmno
          type: string
        messageId:
          example: 1511882900176220
          format: int64
          type: integer
        smsCount:
          description: Count of SMS's to send multiple text messages
          example: 2
          format: int64
          type: integer
        usedCredits:
          description: SMS credits used per text message
          example: 0.7
          format: float
          type: number
        remainingCredits:
          description: Remaining SMS credits of the user
          example: 82.85
          format: float
          type: number
      required:
      - messageId
      - reference
      type: object
    createdProcessId:
      example:
        processId: 78
      properties:
        processId:
          description: Id of the process created
          example: 78
          format: int64
          type: integer
      required:
      - processId
      type: object
    createUpdateFolder:
      properties:
        name:
          description: Name of the folder
          example: Wordpress Contacts
          type: string
      type: object
    postSendFailed:
      example:
        code: 0
        unexistingEmails:
        - "matthew.dow@example.com, elisa.carrely@example.com"
        - "matthew.dow@example.com, elisa.carrely@example.com"
        withoutListEmails:
        - "jeff.dean@example.com, jim.sue@example.com"
        - "jeff.dean@example.com, jim.sue@example.com"
        blackListedEmails:
        - "jeff.dean@example.com, jim.sue@example.com"
        - "jeff.dean@example.com, jim.sue@example.com"
        message: The email could not be sent to all recipients
      properties:
        code:
          description: Response code
          format: int64
          type: integer
        message:
          description: Response message
          example: The email could not be sent to all recipients
          type: string
        unexistingEmails:
          items:
            description: "Email addresses you tried to sent an email to, but not existing\
              \ in your contacts"
            example: "matthew.dow@example.com, elisa.carrely@example.com"
            format: email
            type: string
          type: array
        withoutListEmails:
          items:
            description: "Email addresses you sent an email to, without a contact\
              \ list"
            example: "jeff.dean@example.com, jim.sue@example.com"
            format: email
            type: string
          type: array
        blackListedEmails:
          items:
            description: Email addresses which are blacklisted. ONLY FOR email-campign's
              sendTest OR smtp-template's sendTest api's.
            example: "jeff.dean@example.com, jim.sue@example.com"
            format: email
            type: string
          type: array
      required:
      - code
      - message
      type: object
    postSendSmsTestFailed:
      example:
        unexistingSms:
        - "337699086644@mailin.com, 41778899954@mailin.com"
        - "337699086644@mailin.com, 41778899954@mailin.com"
        code: 0
        withoutListSms:
        - "3542388988@mailin.com, 10976444477@mailin.com"
        - "3542388988@mailin.com, 10976444477@mailin.com"
        message: The SMS could not be sent to all recipients
      properties:
        code:
          description: Response code
          format: int64
          type: integer
        message:
          description: Response message
          example: The SMS could not be sent to all recipients
          type: string
        unexistingSms:
          items:
            description: "Email addresses you tried to sent a SMS to, but not existing\
              \ in your contacts"
            example: "337699086644@mailin.com, 41778899954@mailin.com"
            format: email
            type: string
          type: array
        withoutListSms:
          items:
            description: "Email addresses you sent a SMS to, without a contact list"
            example: "3542388988@mailin.com, 10976444477@mailin.com"
            format: email
            type: string
          type: array
      required:
      - code
      - message
      type: object
    postContactInfo:
      example:
        contacts:
          total: 27
          processId: 78
          success:
          - "jeff32@example.com, jim56@example.com"
          - "jeff32@example.com, jim56@example.com"
          failure:
          - "jeff32@example.com, jim56@example.com"
          - "jeff32@example.com, jim56@example.com"
      properties:
        contacts:
          $ref: '#/components/schemas/postContactInfo_contacts'
      required:
      - contacts
      type: object
    getAggregatedReport:
      example:
        range: 2016-09-08|2017-04-06
        delivered: 249
        requests: 263
        softBounces: 4
        uniqueOpens: 37
        unsubscribed: 0
        hardBounces: 1
        spamReports: 0
        blocked: 2
        invalid: 0
        clicks: 12
        opens: 47
        uniqueClicks: 8
      properties:
        range:
          description: Time frame of the report
          example: 2016-09-08|2017-04-06
          type: string
        requests:
          description: Number of requests for the timeframe
          example: 263
          format: int64
          type: integer
        delivered:
          description: Number of delivered emails for the timeframe
          example: 249
          format: int64
          type: integer
        hardBounces:
          description: Number of hardbounces for the timeframe
          example: 1
          format: int64
          type: integer
        softBounces:
          description: Number of softbounces for the timeframe
          example: 4
          format: int64
          type: integer
        clicks:
          description: Number of clicks for the timeframe
          example: 12
          format: int64
          type: integer
        uniqueClicks:
          description: Number of unique clicks for the timeframe
          example: 8
          format: int64
          type: integer
        opens:
          description: Number of openings for the timeframe
          example: 47
          format: int64
          type: integer
        uniqueOpens:
          description: Number of unique openings for the timeframe
          example: 37
          format: int64
          type: integer
        spamReports:
          description: Number of complaint (spam report) for the timeframe
          example: 0
          format: int64
          type: integer
        blocked:
          description: Number of blocked contact emails for the timeframe
          example: 2
          format: int64
          type: integer
        invalid:
          description: Number of invalid emails for the timeframe
          example: 0
          format: int64
          type: integer
        unsubscribed:
          description: Number of unsubscribed emails for the timeframe
          example: 0
          format: int64
          type: integer
      required:
      - blocked
      - clicks
      - delivered
      - hardBounces
      - invalid
      - opens
      - range
      - requests
      - softBounces
      - spamReports
      - uniqueClicks
      - uniqueOpens
      - unsubscribed
      type: object
    getTransacBlockedContacts:
      example:
        count: 1
        contacts:
        - reason: Admin blocked
          senderEmail: john.smith@example.com
          blockedAt: 2017-05-01T12:30:00Z
          email: john.smith@example.com
        - reason: Admin blocked
          senderEmail: john.smith@example.com
          blockedAt: 2017-05-01T12:30:00Z
          email: john.smith@example.com
      properties:
        count:
          description: Count of blocked or unsubscribed contact
          example: 1
          format: int64
          type: integer
        contacts:
          items:
            $ref: '#/components/schemas/getTransacBlockedContacts_contacts_inner'
          type: array
      type: object
    getReports:
      example:
        reports:
        - date: 2017-04-06
          delivered: 63
          requests: 65
          softBounces: 1
          uniqueOpens: 52
          unsubscribed: 0
          hardBounces: 1
          spamReports: 0
          blocked: 0
          invalid: 0
          clicks: 6
          opens: 58
          uniqueClicks: 5
        - date: 2017-04-06
          delivered: 63
          requests: 65
          softBounces: 1
          uniqueOpens: 52
          unsubscribed: 0
          hardBounces: 1
          spamReports: 0
          blocked: 0
          invalid: 0
          clicks: 6
          opens: 58
          uniqueClicks: 5
      properties:
        reports:
          items:
            $ref: '#/components/schemas/getReports_reports_inner'
          type: array
      type: object
    getEmailEventReport:
      example:
        events:
        - date: 2017-03-12T12:30:00Z
          reason: Error connection timeout
          subject: Sib client test
          ip: 165.87.3.15
          link: https://www.someexamplelink.com
          messageId: <201798300811.5787683@relay.domain.com>
          from: john@example.com
          tag: OrderConfirmation
          event: delivered
          email: john.smith@example.com
        - date: 2017-03-12T12:30:00Z
          reason: Error connection timeout
          subject: Sib client test
          ip: 165.87.3.15
          link: https://www.someexamplelink.com
          messageId: <201798300811.5787683@relay.domain.com>
          from: john@example.com
          tag: OrderConfirmation
          event: delivered
          email: john.smith@example.com
      properties:
        events:
          items:
            $ref: '#/components/schemas/getEmailEventReport_events_inner'
          type: array
      type: object
    getSmsEventReport:
      example:
        events:
        - date: 2017-03-12T12:30:00Z
          reason: Message is undeliverable due to an incorrect / invalid / blacklisted
            / permanently barred MSISDN for this operator
          phoneNumber: "00189001094"
          messageId: "1472640582425378"
          tag: CabWaiting
          event: accepted
          reply: reply
        - date: 2017-03-12T12:30:00Z
          reason: Message is undeliverable due to an incorrect / invalid / blacklisted
            / permanently barred MSISDN for this operator
          phoneNumber: "00189001094"
          messageId: "1472640582425378"
          tag: CabWaiting
          event: accepted
          reply: reply
      properties:
        events:
          items:
            $ref: '#/components/schemas/getSmsEventReport_events_inner'
          type: array
      type: object
    getSmtpTemplateOverview:
      example:
        subject: Thanks for your order !
        modifiedAt: 2017-05-12T12:30:00Z
        isActive: true
        doiTemplate: false
        testSent: true
        htmlContent: Your order n°xxxxx has been confirmed. Thanks for your purchase.
        createdAt: 2017-05-01T12:30:00Z
        sender:
          name: Mary form MyShop
          id: "43"
          email: contact@myshop.fr
        toField: "{FIRSTNAME} {LASTNAME}"
        name: Order Confirmation - EN
        replyTo: replyto@domain.com
        id: 4
        tag: sports
      properties:
        id:
          description: ID of the template
          example: 4
          format: int64
          type: integer
        name:
          description: Name of the template
          example: Order Confirmation - EN
          type: string
        subject:
          description: Subject of the template
          example: Thanks for your order !
          type: string
        isActive:
          description: "Status of template (true=active, false=inactive)"
          example: true
          type: boolean
        testSent:
          description: "Status of test sending for the template (true=test email has\
            \ been sent, false=test email has not been sent)"
          example: true
          type: boolean
        sender:
          $ref: '#/components/schemas/getSmtpTemplateOverview_sender'
        replyTo:
          description: Email defined as the "Reply to" for the template
          example: replyto@domain.com
          format: email
          type: string
        toField:
          description: Customisation of the "to" field for the template
          example: "{FIRSTNAME} {LASTNAME}"
          type: string
        tag:
          description: Tag of the template
          example: sports
          type: string
        htmlContent:
          description: HTML content of the template
          example: Your order n°xxxxx has been confirmed. Thanks for your purchase.
          type: string
        createdAt:
          description: Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
          format: date-time
          type: string
        modifiedAt:
          description: Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
          format: date-time
          type: string
        doiTemplate:
          description: "It is true if template is a valid Double opt-in (DOI) template,\
            \ otherwise it is false. This field will be available only in case of\
            \ single template detail call."
          example: false
          type: boolean
      required:
      - createdAt
      - htmlContent
      - id
      - isActive
      - modifiedAt
      - name
      - replyTo
      - sender
      - subject
      - tag
      - testSent
      - toField
      type: object
    getSmtpTemplates:
      example:
        templates:
        - subject: Thanks for your order !
          modifiedAt: 2017-05-12T12:30:00Z
          isActive: true
          doiTemplate: false
          testSent: true
          htmlContent: Your order n°xxxxx has been confirmed. Thanks for your purchase.
          createdAt: 2017-05-01T12:30:00Z
          sender:
            name: Mary form MyShop
            id: "43"
            email: contact@myshop.fr
          toField: "{FIRSTNAME} {LASTNAME}"
          name: Order Confirmation - EN
          replyTo: replyto@domain.com
          id: 4
          tag: sports
        - subject: Thanks for your order !
          modifiedAt: 2017-05-12T12:30:00Z
          isActive: true
          doiTemplate: false
          testSent: true
          htmlContent: Your order n°xxxxx has been confirmed. Thanks for your purchase.
          createdAt: 2017-05-01T12:30:00Z
          sender:
            name: Mary form MyShop
            id: "43"
            email: contact@myshop.fr
          toField: "{FIRSTNAME} {LASTNAME}"
          name: Order Confirmation - EN
          replyTo: replyto@domain.com
          id: 4
          tag: sports
        count: 1
      properties:
        count:
          description: Count of transactional email templates
          example: 1
          format: int64
          type: integer
        templates:
          items:
            $ref: '#/components/schemas/getSmtpTemplateOverview'
          type: array
      type: object
    getWebhook:
      example:
        createdAt: 2016-12-01T12:50:00Z
        modifiedAt: 2017-05-12T13:15:00Z
        description: Webhook triggered on campaign openings
        id: 654
        type: marketing
        url: http://requestb.in/173lyyx1
        events:
        - "opens,clicks"
        - "opens,clicks"
      properties:
        url:
          description: URL of the webhook
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        id:
          description: ID of the webhook
          example: 654
          format: int64
          type: integer
        description:
          description: Description of the webhook
          example: Webhook triggered on campaign openings
          type: string
        events:
          items:
            description: Events which will trigger the webhook when they occure
            example: "opens,clicks"
            type: string
          type: array
        type:
          description: Type of webhook (marketing or transac)
          enum:
          - marketing
          - transac
          example: marketing
          type: string
        createdAt:
          description: Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2016-12-01T12:50:00Z
          format: date-time
          type: string
        modifiedAt:
          description: Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T13:15:00Z
          format: date-time
          type: string
      required:
      - createdAt
      - description
      - events
      - id
      - modifiedAt
      - type
      - url
      type: object
    getWebhooks:
      example:
        webhooks:
        - "{}"
        - "{}"
      properties:
        webhooks:
          items:
            allOf:
            - $ref: '#/components/schemas/getWebhook'
            type: object
          type: array
      required:
      - webhooks
      type: object
    getContactDetails:
      properties:
        email:
          description: Email address of the contact for which you requested the details
          example: john.smith@example.com
          format: email
          type: string
        id:
          description: ID of the contact for which you requested the details
          example: 32
          format: int64
          type: integer
        emailBlacklisted:
          description: "Blacklist status for email campaigns (true=blacklisted, false=not\
            \ blacklisted)"
          example: false
          type: boolean
        smsBlacklisted:
          description: "Blacklist status for SMS campaigns (true=blacklisted, false=not\
            \ blacklisted)"
          example: true
          type: boolean
        createdAt:
          description: Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
          format: date-time
          type: string
        modifiedAt:
          description: Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
          format: date-time
          type: string
        listIds:
          items:
            description: List(s) in which the contact is included
            format: int64
            type: integer
          type: array
        listUnsubscribed:
          items:
            description: List(s) in which the contact is included (only available
              if unsubscription per list is activated for the account)
            format: int64
            type: integer
          type: array
        attributes:
          description: Set of attributes of the contact
          example:
            name: Joe
            email: joe@example.com
          properties: {}
          type: object
      required:
      - attributes
      - createdAt
      - emailBlacklisted
      - id
      - listIds
      - modifiedAt
      - smsBlacklisted
      type: object
    getExtendedContactDetails:
      allOf:
      - $ref: '#/components/schemas/getContactDetails'
      - properties:
          statistics:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics'
        required:
        - statistics
        type: object
      example:
        createdAt: 2017-05-12T12:30:00Z
        listIds:
        - 0
        - 0
        smsBlacklisted: true
        listUnsubscribed:
        - 6
        - 6
        modifiedAt: 2017-05-12T12:30:00Z
        emailBlacklisted: false
        attributes:
          name: Joe
          email: joe@example.com
        id: 32
        email: john.smith@example.com
        statistics:
          hardBounces:
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          unsubscriptions:
            adminUnsubscription:
            - ip: 165.87.3.15
              eventTime: 2017-03-12T20:15:13Z
            - ip: 165.87.3.15
              eventTime: 2017-03-12T20:15:13Z
            userUnsubscription:
            - campaignId: 3
              ip: 165.87.3.15
              eventTime: 2017-03-12T20:15:13Z
            - campaignId: 3
              ip: 165.87.3.15
              eventTime: 2017-03-12T20:15:13Z
          messagesSent:
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          complaints:
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          transacAttributes:
          - "{}"
          - "{}"
          opened:
          - campaignId: 3
            ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
          softBounces:
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            eventTime: 2017-03-12T20:15:13Z
          clicked:
          - campaignId: 3
            links:
            - ip: 165.87.3.15
              count: 1
              eventTime: 2017-03-12T20:15:13Z
              url: www.myshop.com
            - ip: 165.87.3.15
              count: 1
              eventTime: 2017-03-12T20:15:13Z
              url: www.myshop.com
          - campaignId: 3
            links:
            - ip: 165.87.3.15
              count: 1
              eventTime: 2017-03-12T20:15:13Z
              url: www.myshop.com
            - ip: 165.87.3.15
              count: 1
              eventTime: 2017-03-12T20:15:13Z
              url: www.myshop.com
    getContactCampaignStats:
      description: Campaign Statistics for the contact
      example:
        hardBounces:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        unsubscriptions:
          adminUnsubscription:
          - ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          - ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          userUnsubscription:
          - campaignId: 3
            ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
        messagesSent:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        complaints:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        transacAttributes:
        - orderId: 248
          orderPrice: 24.99
          orderDate: 2017-03-12
        - orderId: 248
          orderPrice: 24.99
          orderDate: 2017-03-12
        opened:
        - campaignId: 3
          ip: 165.87.3.15
          count: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          ip: 165.87.3.15
          count: 3
          eventTime: 2017-03-12T20:15:13Z
        softBounces:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        clicked:
        - campaignId: 3
          links:
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
        - campaignId: 3
          links:
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
      properties:
        messagesSent:
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        hardBounces:
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        softBounces:
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        complaints:
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        unsubscriptions:
          $ref: '#/components/schemas/getContactCampaignStats_unsubscriptions'
        opened:
          items:
            $ref: '#/components/schemas/getContactCampaignStats_opened_inner'
          type: array
        clicked:
          items:
            $ref: '#/components/schemas/getContactCampaignStats_clicked_inner'
          type: array
        transacAttributes:
          items:
            $ref: '#/components/schemas/getContactCampaignStats_transacAttributes_inner'
          type: array
      type: object
    getContacts:
      example:
        count: 17655
        contacts:
        - "{}"
        - "{}"
      properties:
        contacts:
          items:
            allOf:
            - $ref: '#/components/schemas/getContactDetails'
            type: object
          type: array
        count:
          description: Number of contacts
          example: 17655
          format: int64
          type: integer
      required:
      - contacts
      - count
      type: object
    getAttributes:
      example:
        attributes:
        - name: LASTNAME
          calculatedValue: "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
          category: category
          type: text
          enumeration:
          - label: Women
            value: 1
          - label: Women
            value: 1
        - name: LASTNAME
          calculatedValue: "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
          category: category
          type: text
          enumeration:
          - label: Women
            value: 1
          - label: Women
            value: 1
      properties:
        attributes:
          description: Listing of available contact attributes in your account
          items:
            $ref: '#/components/schemas/getAttributes_attributes_inner'
          type: array
      required:
      - attributes
      type: object
    getFolders:
      example:
        folders:
        - "{}"
        - "{}"
        count: 10
      properties:
        folders:
          items:
            allOf:
            - $ref: '#/components/schemas/getFolder'
            type: object
          type: array
        count:
          description: Number of folders available in your account
          example: 10
          format: int64
          type: integer
      type: object
    getFolder:
      example:
        totalBlacklisted: 32
        name: Magento Customers
        id: 2
        totalSubscribers: 19777
        uniqueSubscribers: 16222
      properties:
        id:
          description: ID of the folder
          example: 2
          format: int64
          type: integer
        name:
          description: Name of the folder
          example: Magento Customers
          type: string
        totalBlacklisted:
          description: Number of blacklisted contacts in the folder
          example: 32
          format: int64
          type: integer
        totalSubscribers:
          description: Number of contacts in the folder
          example: 19777
          format: int64
          type: integer
        uniqueSubscribers:
          description: Number of unique contacts in the folder
          example: 16222
          format: int64
          type: integer
      required:
      - id
      - name
      - totalBlacklisted
      - totalSubscribers
      - uniqueSubscribers
      type: object
    getSegments:
      example:
        count: 10
        segments:
          id: 23
          categoryName: New Category
          segmentName: My Segment
          updatedAt: 2017-03-13T17:05:09Z
      properties:
        segments:
          $ref: '#/components/schemas/getSegments_segments'
        count:
          description: Number of Segments in your account
          example: 10
          format: int64
          type: integer
      type: object
    getFolderLists:
      example:
        lists:
        - "{}"
        - "{}"
        count: 6
      properties:
        lists:
          items:
            allOf:
            - $ref: '#/components/schemas/getList'
            type: object
          type: array
        count:
          description: Number of lists in the folder
          example: 6
          format: int64
          type: integer
      required:
      - count
      - lists
      type: object
    getLists:
      example:
        lists:
        - totalBlacklisted: 13
          name: Magento Customers - EN
          id: 23
          totalSubscribers: 1776
          folderId: 2
        - totalBlacklisted: 13
          name: Magento Customers - EN
          id: 23
          totalSubscribers: 1776
          folderId: 2
        count: 150
      properties:
        lists:
          description: Listing of all the lists available in your account
          items:
            $ref: '#/components/schemas/getLists_lists_inner'
          type: array
        count:
          description: Number of lists in your account
          example: 150
          format: int64
          type: integer
      required:
      - count
      - lists
      type: object
    getList:
      properties:
        id:
          description: ID of the list
          example: 23
          format: int64
          type: integer
        name:
          description: Name of the list
          example: Magento Customers - EN
          type: string
        totalBlacklisted:
          description: Number of blacklisted contacts in the list
          example: 13
          format: int64
          type: integer
        totalSubscribers:
          description: Number of contacts in the list
          example: 1776
          format: int64
          type: integer
      required:
      - id
      - name
      - totalBlacklisted
      - totalSubscribers
      type: object
    getExtendedList:
      allOf:
      - $ref: '#/components/schemas/getList'
      - properties:
          folderId:
            description: ID of the folder
            example: 2
            format: int64
            type: integer
          createdAt:
            description: Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
            example: 2017-03-13T17:05:09Z
            format: date-time
            type: string
          campaignStats:
            items:
              $ref: '#/components/schemas/getExtendedList_allOf_campaignStats'
            type: array
          dynamicList:
            description: "Status telling if the list is dynamic or not (true=dynamic,\
              \ false=not dynamic)"
            example: false
            type: boolean
        required:
        - createdAt
        - folderId
        type: object
      example:
        createdAt: 2017-03-13T17:05:09Z
        totalBlacklisted: 13
        name: Magento Customers - EN
        id: 23
        campaignStats:
        - stats:
            deferred: 30
            complaints: 1
            delivered: 19765
            softBounces: 100
            sent: 19887
            listId: 2
            returnBounce: 5
            hardBounces: 87
            unsubscriptions: 2
            uniqueViews: 7779
            viewed: 8999
            clickers: 2665
            uniqueClicks: 2300
            trackableViews: 5661
          campaignId: 143
        - stats:
            deferred: 30
            complaints: 1
            delivered: 19765
            softBounces: 100
            sent: 19887
            listId: 2
            returnBounce: 5
            hardBounces: 87
            unsubscriptions: 2
            uniqueViews: 7779
            viewed: 8999
            clickers: 2665
            uniqueClicks: 2300
            trackableViews: 5661
          campaignId: 143
        dynamicList: false
        totalSubscribers: 1776
        folderId: 2
    getSmsCampaignStats:
      properties:
        delivered:
          description: Number of delivered SMS
          example: 2987
          format: int64
          type: integer
        sent:
          description: Number of sent SMS
          example: 3000
          format: int64
          type: integer
        processing:
          description: Number of processing SMS
          example: 0
          format: int64
          type: integer
        softBounces:
          description: Number of softbounced SMS
          example: 3
          format: int64
          type: integer
        hardBounces:
          description: Number of hardbounced SMS
          example: 1
          format: int64
          type: integer
        unsubscriptions:
          description: Number of unsubscription SMS
          example: 3
          format: int64
          type: integer
        answered:
          description: Number of replies to the SMS
          example: 2
          format: int64
          type: integer
      required:
      - answered
      - delivered
      - hardBounces
      - processing
      - sent
      - softBounces
      - unsubscriptions
      type: object
    getDeviceBrowserStats:
      properties:
        clickers:
          description: Number of total clicks for the campaign using the particular
            browser
          example: 2665
          format: int64
          type: integer
        uniqueClicks:
          description: Number of unique clicks for the campaign using the particular
            browser
          example: 2300
          format: int64
          type: integer
        viewed:
          description: Number of openings for the campaign using the particular browser
          example: 8999
          format: int64
          type: integer
        uniqueViews:
          description: Number of unique openings for the campaign using the particular
            browser
          example: 7779
          format: int64
          type: integer
      required:
      - clickers
      - uniqueClicks
      - uniqueViews
      - viewed
      type: object
    getCampaignStats:
      example:
        deferred: 30
        complaints: 1
        delivered: 19765
        softBounces: 100
        sent: 19887
        listId: 2
        returnBounce: 5
        hardBounces: 87
        unsubscriptions: 2
        uniqueViews: 7779
        viewed: 8999
        clickers: 2665
        uniqueClicks: 2300
        trackableViews: 5661
      properties:
        listId:
          description: List Id of email campaign (only in case of get email campaign(s)(not
            for global stats))
          example: 2
          format: int64
          type: integer
        uniqueClicks:
          description: Number of unique clicks for the campaign
          example: 2300
          format: int64
          type: integer
        clickers:
          description: Number of total clicks for the campaign
          example: 2665
          format: int64
          type: integer
        complaints:
          description: Number of complaints (Spam reports) for the campaign
          example: 1
          format: int64
          type: integer
        delivered:
          description: Number of delivered emails for the campaign
          example: 19765
          format: int64
          type: integer
        sent:
          description: Number of sent emails for the campaign
          example: 19887
          format: int64
          type: integer
        softBounces:
          description: Number of softbounce for the campaign
          example: 100
          format: int64
          type: integer
        hardBounces:
          description: Number of harbounce for the campaign
          example: 87
          format: int64
          type: integer
        uniqueViews:
          description: Number of unique openings for the campaign
          example: 7779
          format: int64
          type: integer
        trackableViews:
          description: Recipients without any privacy protection option enabled in
            their email client
          example: 5661
          format: int64
          type: integer
        unsubscriptions:
          description: Number of unsubscription for the campaign
          example: 2
          format: int64
          type: integer
        viewed:
          description: Number of openings for the campaign
          example: 8999
          format: int64
          type: integer
        deferred:
          description: Number of deferred emails for the campaign
          example: 30
          format: int64
          type: integer
        returnBounce:
          description: Total number of non-delivered campaigns for a particular campaign
            id.
          example: 5
          format: int64
          type: integer
      required:
      - clickers
      - complaints
      - delivered
      - hardBounces
      - sent
      - softBounces
      - trackableViews
      - uniqueClicks
      - uniqueViews
      - unsubscriptions
      - viewed
      type: object
    updateSmtpTemplate:
      properties:
        tag:
          description: Tag of the template
          example: OrderConfirmation
          type: string
        sender:
          $ref: '#/components/schemas/updateSmtpTemplate_sender'
        templateName:
          description: Name of the template
          example: Order Confirmation - EN
          type: string
        htmlContent:
          description: Required if htmlUrl is empty. Body of the message (HTML must
            have more than 10 characters)
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
          type: string
        htmlUrl:
          description: Required if htmlContent is empty. URL to the body of the email
            (HTML)
          example: https://html.domain.com
          format: url
          type: string
        subject:
          description: Subject of the email
          example: Thanks for your purchase !
          type: string
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          example: support@myshop.com
          format: email
          type: string
        toField:
          description: "To personalize the «To» Field. If you want to include the\
            \ first name and last name of your recipient, add {FNAME} {LNAME}. These\
            \ contact attributes must already exist in your SendinBlue account. If\
            \ input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}}\
            \ for personalization"
          example: "{FNAME} {LNAME}"
          type: string
        attachmentUrl:
          description: "Absolute url of the attachment (no local file). Extension\
            \ allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,\
            \ png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,\
            \ pptx, tar, ez, ics, mobi, msg, pub and eps"
          example: https://attachment.domain.com
          format: url
          type: string
        isActive:
          description: "Status of the template. isActive = false means template is\
            \ inactive, isActive = true means template is active"
          example: true
          type: boolean
      type: object
    updateCampaignStatus:
      description: Status of the campaign
      example: draft
      properties:
        status:
          description: Note:- replicateTemplate status will be available only for
            template type campaigns.
          enum:
          - suspended
          - archive
          - darchive
          - sent
          - queued
          - replicate
          - replicateTemplate
          - draft
          type: string
      type: object
    createSmtpTemplate:
      properties:
        tag:
          description: Tag of the template
          example: OrderConfirmation
          type: string
        sender:
          $ref: '#/components/schemas/createSmtpTemplate_sender'
        templateName:
          description: Name of the template
          example: Order Confirmation - EN
          type: string
        htmlContent:
          description: Body of the message (HTML version). The field must have more
            than 10 characters. REQUIRED if htmlUrl is empty
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
          type: string
        htmlUrl:
          description: Url which contents the body of the email message. REQUIRED
            if htmlContent is empty
          example: https://html.domain.com
          format: url
          type: string
        subject:
          description: Subject of the template
          example: Thanks for your purchase !
          type: string
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          example: support@myshop.com
          format: email
          type: string
        toField:
          description: "To personalize the «To» Field. If you want to include the\
            \ first name and last name of your recipient, add {FNAME} {LNAME}. These\
            \ contact attributes must already exist in your SendinBlue account. If\
            \ input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}}\
            \ for personalization"
          example: "{FNAME} {LNAME}"
          type: string
        attachmentUrl:
          description: "Absolute url of the attachment (no local file). Extension\
            \ allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,\
            \ png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,\
            \ pptx, tar, ez, ics, mobi, msg, pub and eps"
          example: https://attachment.domain.com
          format: url
          type: string
        isActive:
          description: Status of template. isActive = true means template is active
            and isActive = false means template is inactive
          example: true
          type: boolean
      required:
      - sender
      - subject
      - templateName
      type: object
    createEmailCampaign:
      properties:
        tag:
          description: Tag of the campaign
          example: Newsletter
          type: string
        sender:
          $ref: '#/components/schemas/createEmailCampaign_sender'
        name:
          description: Name of the campaign
          example: Newsletter - May 2017
          type: string
        htmlContent:
          description: Mandatory if htmlUrl and templateId are empty. Body of the
            message (HTML)
          example: "Spring is here, discover my new collection"
          type: string
        htmlUrl:
          description: Mandatory if htmlContent and templateId are empty. Url to the
            message (HTML)
          example: https://html.domain.com
          format: url
          type: string
        templateId:
          description: Mandatory if htmlContent and htmlUrl are empty. Id of the transactional
            email template with status 'active'. Used to copy only its content fetched
            from htmlContent/htmlUrl to an email campaign for RSS feature.
          format: int64
          type: integer
        scheduledAt:
          description: "Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to\
            \ pass your timezone in date-time format for accurate result. If sendAtBestTime\
            \ is set to true, your campaign will be sent according to the date passed\
            \ (ignoring the time part)."
          example: 2017-06-01T12:30:00+02:00
          format: date-time
          type: string
        subject:
          description: Subject of the campaign. Mandatory if abTesting is false. Ignored
            if abTesting is true.
          example: Discover the New Collection !
          type: string
        replyTo:
          description: Email on which the campaign recipients will be able to reply
            to
          example: support@myshop.com
          format: email
          type: string
        toField:
          description: "To personalize the «To» Field. If you want to include the\
            \ first name and last name of your recipient, add {FNAME} {LNAME}. These\
            \ contact attributes must already exist in your SendinBlue account. If\
            \ input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}}\
            \ for personalization"
          example: "{FNAME} {LNAME}"
          type: string
        recipients:
          $ref: '#/components/schemas/createEmailCampaign_recipients'
        attachmentUrl:
          description: "Absolute url of the attachment (no local file). Extension\
            \ allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,\
            \ png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,\
            \ pptx, tar, ez, ics, mobi, msg, pub and eps"
          example: https://attachment.domain.com
          format: url
          type: string
        inlineImageActivation:
          default: false
          description: Use true to embedded the images in your email. Final size of
            the email should be less than 4MB. Campaigns with embedded images can
            not be sent to more than 5000 contacts
          example: true
          type: boolean
        mirrorActive:
          description: Use true to enable the mirror link
          example: true
          type: boolean
        footer:
          description: Footer of the email campaign
          example: "[DEFAULT_FOOTER]"
          type: string
        header:
          description: Header of the email campaign
          example: "[DEFAULT_HEADER]"
          type: string
        utmCampaign:
          description: "Customize the utm_campaign value. If this field is empty,\
            \ the campaign name will be used. Only alphanumeric characters and spaces\
            \ are allowed"
          example: NL_05_2017
          type: string
        params:
          description: "Pass the set of attributes to customize the type classic campaign.\
            \ For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. Only available\
            \ if 'type' is 'classic'. It's considered only if campaign is in New Template\
            \ Language format. The New Template Language is dependent on the values\
            \ of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'"
          example:
            FNAME: Joe
            LNAME: Doe
          properties: {}
          type: object
        sendAtBestTime:
          default: false
          description: Set this to true if you want to send your campaign at best
            time.
          example: true
          type: boolean
        abTesting:
          default: false
          description: "Status of A/B Test. abTesting = false means it is disabled,\
            \ & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule',\
            \ 'winnerCriteria' & 'winnerDelay' will be considered when abTesting is\
            \ set to true. 'subjectA' & 'subjectB' are mandatory together & 'subject'\
            \ if passed is ignored. Can be set to true only if 'sendAtBestTime' is\
            \ 'false'. You will be able to set up two subject lines for your campaign\
            \ and send them to a random sample of your total recipients. Half of the\
            \ test group will receive version A, and the other half will receive version\
            \ B"
          example: true
          type: boolean
        subjectA:
          description: Subject A of the campaign. Mandatory if abTesting = true. subjectA
            & subjectB should have unique value
          example: Discover the New Collection!
          type: string
        subjectB:
          description: Subject B of the campaign. Mandatory if abTesting = true. subjectA
            & subjectB should have unique value
          example: Want to discover the New Collection?
          type: string
        splitRule:
          description: "Add the size of your test groups. Mandatory if abTesting =\
            \ true & 'recipients' is passed. We'll send version A and B to a random\
            \ sample of recipients, and then the winning version to everyone else"
          example: 50
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        winnerCriteria:
          description: "Choose the metrics that will determinate the winning version.\
            \ Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria'\
            \ is ignored if passed"
          enum:
          - open
          - click
          example: open
          type: string
        winnerDelay:
          description: "Choose the duration of the test in hours. Maximum is 7 days,\
            \ pass 24*7 = 168 hours. The winning version will be sent at the end of\
            \ the test. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50,\
            \ 'winnerDelay' is ignored if passed"
          example: 50
          format: int64
          maximum: 168
          minimum: 1
          type: integer
        ipWarmupEnable:
          default: false
          description: Available for dedicated ip clients. Set this to true if you
            wish to warm up your ip.
          example: true
          type: boolean
        initialQuota:
          description: Mandatory if ipWarmupEnable is set to true. Set an initial
            quota greater than 1 for warming up your ip. We recommend you set a value
            of 3000.
          example: 3000
          format: int64
          type: integer
        increaseRate:
          description: "Mandatory if ipWarmupEnable is set to true. Set a percentage\
            \ increase rate for warming up your ip. We recommend you set the increase\
            \ rate to 30% per day. If you want to send the same number of emails every\
            \ day, set the daily increase value to 0%."
          example: 70
          format: int64
          maximum: 100
          minimum: 0
          type: integer
      required:
      - name
      - sender
      type: object
    updateEmailCampaign:
      properties:
        tag:
          description: Tag of the campaign
          example: Newsletter
          type: string
        sender:
          $ref: '#/components/schemas/updateEmailCampaign_sender'
        name:
          description: Name of the campaign
          example: Newsletter - May 2017
          type: string
        htmlContent:
          description: Body of the message (HTML version). REQUIRED if htmlUrl is
            empty
          example: "Spring is here, discover my new collection"
          type: string
        htmlUrl:
          description: Url which contents the body of the email message. REQUIRED
            if htmlContent is empty
          example: https://html.domain.com
          format: url
          type: string
        scheduledAt:
          description: "UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).\
            \ Prefer to pass your timezone in date-time format for accurate result.\
            \ If sendAtBestTime is set to true, your campaign will be sent according\
            \ to the date passed (ignoring the time part)."
          example: 2017-06-01T12:30:00+02:00
          format: date-time
          type: string
        subject:
          description: Subject of the campaign
          example: Discover the New Collection !
          type: string
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          example: support@myshop.com
          format: email
          type: string
        toField:
          description: "To personalize the «To» Field. If you want to include the\
            \ first name and last name of your recipient, add {FNAME} {LNAME}. These\
            \ contact attributes must already exist in your SendinBlue account. If\
            \ input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}}\
            \ for personalization"
          example: "{FNAME} {LNAME}"
          type: string
        recipients:
          $ref: '#/components/schemas/updateEmailCampaign_recipients'
        attachmentUrl:
          description: "Absolute url of the attachment (no local file). Extension\
            \ allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,\
            \ png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,\
            \ pptx, tar, ez, ics, mobi, msg, pub and eps"
          example: https://attachment.domain.com
          format: url
          type: string
        inlineImageActivation:
          default: false
          description: "Status of inline image. inlineImageActivation = false means\
            \ image can’t be embedded, & inlineImageActivation = true means image\
            \ can be embedded, in the email. You cannot send a campaign of more than\
            \ 4MB with images embedded in the email. Campaigns with the images embedded\
            \ in the email must be sent to less than 5000 contacts."
          example: true
          type: boolean
        mirrorActive:
          description: "Status of mirror links in campaign. mirrorActive = false means\
            \ mirror links are deactivated, & mirrorActive = true means mirror links\
            \ are activated, in the campaign"
          example: true
          type: boolean
        recurring:
          default: false
          description: "FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false\
            \ means contact can receive the same Trigger campaign only once, & recurring\
            \ = true means contact can receive the same Trigger campaign several times"
          example: false
          type: boolean
        footer:
          description: Footer of the email campaign
          example: "[DEFAULT_FOOTER]"
          type: string
        header:
          description: Header of the email campaign
          example: "[DEFAULT_HEADER]"
          type: string
        utmCampaign:
          description: "Customize the utm_campaign value. If this field is empty,\
            \ the campaign name will be used. Only alphanumeric characters and spaces\
            \ are allowed"
          example: NL_05_2017
          type: string
        params:
          description: "Pass the set of attributes to customize the type 'classic'\
            \ campaign. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. The 'params'\
            \ field will get updated, only if the campaign is in New Template Language,\
            \ else ignored. The New Template Language is dependent on the values of\
            \ 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField'"
          example:
            FNAME: Joe
            LNAME: Doe
          properties: {}
          type: object
        sendAtBestTime:
          description: "Set this to true if you want to send your campaign at best\
            \ time. Note:- if true, warmup ip will be disabled."
          example: true
          type: boolean
        abTesting:
          default: false
          description: "Status of A/B Test. abTesting = false means it is disabled,\
            \ & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule',\
            \ 'winnerCriteria' & 'winnerDelay' will be considered if abTesting is\
            \ set to true. 'subject' if passed is ignored.  Can be set to true only\
            \ if 'sendAtBestTime' is 'false'. You will be able to set up two subject\
            \ lines for your campaign and send them to a random sample of your total\
            \ recipients. Half of the test group will receive version A, and the other\
            \ half will receive version B"
          example: true
          type: boolean
        subjectA:
          description: Subject A of the campaign. Considered if abTesting = true.
            subjectA & subjectB should have unique value
          example: Discover the New Collection!
          type: string
        subjectB:
          description: Subject B of the campaign. Considered if abTesting = true.
            subjectA & subjectB should have unique value
          example: Want to discover the New Collection?
          type: string
        splitRule:
          description: "Add the size of your test groups. Considered if abTesting\
            \ = true. We'll send version A and B to a random sample of recipients,\
            \ and then the winning version to everyone else"
          example: 50
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        winnerCriteria:
          description: "Choose the metrics that will determinate the winning version.\
            \ Considered if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria'\
            \ is ignored if passed or alreday exist in record"
          enum:
          - open
          - click
          example: open
          type: string
        winnerDelay:
          description: "Choose the duration of the test in hours. Maximum is 7 days,\
            \ pass 24*7 = 168 hours. The winning version will be sent at the end of\
            \ the test. Considered if 'splitRule' >= 1 and < 50. If splitRule = 50,\
            \ 'winnerDelay' is ignored if passed or alreday exist in record"
          example: 50
          format: int64
          maximum: 168
          minimum: 1
          type: integer
        ipWarmupEnable:
          default: false
          description: Available for dedicated ip clients. Set this to true if you
            wish to warm up your ip.
          example: true
          type: boolean
        initialQuota:
          description: Set an initial quota greater than 1 for warming up your ip.
            We recommend you set a value of 3000.
          example: 3000
          format: int64
          type: integer
        increaseRate:
          description: "Set a percentage increase rate for warming up your ip. We\
            \ recommend you set the increase rate to 30% per day. If you want to send\
            \ the same number of emails every day, set the daily increase value to\
            \ 0%."
          example: 70
          format: int64
          maximum: 100
          minimum: 0
          type: integer
      type: object
    getSharedTemplateUrl:
      example:
        sharedUrl: https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
      properties:
        sharedUrl:
          description: A unique URL for the email campaign or transactional template.
            This URL can be shared with other Sendinblue users.
          example: https://my.sendinblue.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
          format: url
          type: string
      required:
      - sharedUrl
      type: object
    abTestCampaignResult:
      example:
        winningSubjectLine: Subject Line A
        openRate: 70%
        winningVersionRate: 70%
        winningVersion: A
        clickRate: 70%
        clickedLinks:
          Version B:
          - clickRate: 40%
            link: https://facbook.com/versionA
            clicksCount: 3
          - clickRate: 40%
            link: https://facbook.com/versionA
            clicksCount: 3
          Version A:
          - clickRate: 40%
            link: https://facbook.com/versionA
            clicksCount: 3
          - clickRate: 40%
            link: https://facbook.com/versionA
            clicksCount: 3
        winningCriteria: Open
        statistics:
          unsubscribed:
            Version B: 50%
            Version A: 50%
          hardBounces:
            Version B: 50%
            Version A: 50%
          complaints:
            Version B: 50%
            Version A: 50%
          openers:
            Version B: 50%
            Version A: 50%
          clicks:
            Version B: 50%
            Version A: 50%
          softBounces:
            Version B: 50%
            Version A: 50%
      properties:
        winningVersion:
          description: "Winning Campaign Info. pending = Campaign has been picked\
            \ for sending and winning version is yet to be decided, tie = A tie happened\
            \ between both the versions, notAvailable = Campaign has not yet been\
            \ picked for sending."
          enum:
          - notAvailable
          - pending
          - tie
          - A
          - B
          example: A
          type: string
        winningCriteria:
          description: Criteria choosen for winning version (Open/Click)
          enum:
          - Open
          - Click
          example: Open
          type: string
        winningSubjectLine:
          description: Subject Line of current winning version
          example: Subject Line A
          type: string
        openRate:
          description: Open rate for current winning version
          example: 70%
          type: string
        clickRate:
          description: Click rate for current winning version
          example: 70%
          type: string
        winningVersionRate:
          description: Open/Click rate for the winner version
          example: 70%
          type: string
        statistics:
          $ref: '#/components/schemas/abTestCampaignResult_statistics'
        clickedLinks:
          $ref: '#/components/schemas/abTestCampaignResult_clickedLinks'
      type: object
    emailExportRecipients:
      properties:
        notifyURL:
          description: "Webhook called once the export process is finished. For reference,\
            \ https://help.sendinblue.com/hc/en-us/articles/360007666479"
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        recipientsType:
          description: Type of recipients to export for a campaign
          enum:
          - all
          - nonClickers
          - nonOpeners
          - clickers
          - openers
          - softBounces
          - hardBounces
          - unsubscribed
          example: openers
          type: string
      required:
      - recipientsType
      type: object
    requestSmsRecipientExport:
      properties:
        notifyURL:
          description: "URL that will be called once the export process is finished.\
            \ For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479"
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        recipientsType:
          description: Filter the recipients based on how they interacted with the
            campaign
          enum:
          - all
          - delivered
          - answered
          - softBounces
          - hardBounces
          - unsubscribed
          example: answered
          type: string
      required:
      - recipientsType
      type: object
    sendReport:
      properties:
        language:
          default: fr
          description: Language of email content for campaign report sending.
          enum:
          - fr
          - es
          - pt
          - it
          - de
          - en
          example: en
          type: string
        email:
          $ref: '#/components/schemas/sendReport_email'
      required:
      - email
      type: object
    uploadImageToGallery:
      properties:
        imageUrl:
          description: "The absolute url of the image (no local file). Maximum allowed\
            \ size for image is 2MB. Allowed extensions for images are - jpeg, jpg,\
            \ png, bmp, gif."
          example: https://somedomain.com/image1.jpg
          type: string
        name:
          description: Name of the image.
          example: nature.jpg
          type: string
      required:
      - imageUrl
      type: object
    sendSmtpEmail:
      properties:
        sender:
          $ref: '#/components/schemas/sendSmtpEmail_sender'
        to:
          description: "List of email addresses and names (optional) of the recipients.\
            \ For example, [{\"name\":\"Jimmy\", \"email\":\"jimmy98@example.com\"\
            }, {\"name\":\"Joe\", \"email\":\"joe@example.com\"}]"
          items:
            $ref: '#/components/schemas/sendSmtpEmail_to_inner'
          type: array
        bcc:
          description: List of email addresses and names (optional) of the recipients
            in bcc
          items:
            $ref: '#/components/schemas/sendSmtpEmail_bcc_inner'
          type: array
        cc:
          description: List of email addresses and names (optional) of the recipients
            in cc
          items:
            $ref: '#/components/schemas/sendSmtpEmail_cc_inner'
          type: array
        htmlContent:
          description: "HTML body of the message ( Mandatory if 'templateId' is not\
            \ passed, ignored if 'templateId' is passed )"
          example: <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please
            confirm your email address by clicking on the link below</p> </body> </html>
          type: string
        textContent:
          description: Plain Text body of the message ( Ignored if 'templateId' is
            passed )
          example: Please confirm your email address by clicking on the link https://text.domain.com
          type: string
        subject:
          description: Subject of the message. Mandatory if 'templateId' is not passed
          example: Login Email confirmation
          type: string
        replyTo:
          $ref: '#/components/schemas/sendSmtpEmail_replyTo'
        attachment:
          description: "Pass the absolute URL (no local file) or the base64 content\
            \ of the attachment along with the attachment name (Mandatory if attachment\
            \ content is passed). For example, `[{\"url\":\"https://attachment.domain.com/myAttachmentFromUrl.jpg\"\
            , \"name\":\"myAttachmentFromUrl.jpg\"}, {\"content\":\"base64 example\
            \ content\", \"name\":\"myAttachmentFromBase64.jpg\"}]`. Allowed extensions\
            \ for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt,\
            \ gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm,\
            \ zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a,\
            \ m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg,\
            \ mpg and wmv ( If 'templateId' is passed and is in New Template Language\
            \ format then both attachment url and content are accepted. If template\
            \ is in Old template Language format, then 'attachment' is ignored )"
          items:
            $ref: '#/components/schemas/sendSmtpEmail_attachment_inner'
          type: array
        headers:
          description: "Pass the set of custom headers (not the standard headers)\
            \ that shall be sent along the mail headers in the original email. 'sender.ip'\
            \ header can be set (only for dedicated ip users) to mention the IP to\
            \ be used for sending transactional emails. Headers are allowed in `This-Case-Only`\
            \ (i.e. words separated by hyphen with first letter of each word in capital\
            \ letter), they will be converted to such case styling if not in this\
            \ format in the request payload. For example, `{\"sender.ip\":\"1.2.3.4\"\
            , \"X-Mailin-custom\":\"some_custom_header\", \"idempotencyKey\":\"abc-123\"\
            }`."
          example:
            sender.ip: 1.2.3.4
            X-Mailin-custom: some_custom_header
            idempotencyKey: abc-123
          properties: {}
          type: object
        templateId:
          description: Id of the template
          example: 2
          format: int64
          type: integer
        params:
          description: "Pass the set of attributes to customize the template. For\
            \ example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. It's considered only\
            \ if template is in New Template Language format."
          example:
            FNAME: Joe
            LNAME: Doe
          properties: {}
          type: object
        tags:
          description: Tag your emails to find them more easily
          items:
            example: tag1
            type: string
          type: array
      required:
      - to
      type: object
    deleteHardbounces:
      properties:
        startDate:
          description: Starting date (YYYY-MM-DD) of the time period for deletion.
            The hardbounces occurred after this date will be deleted. Must be less
            than or equal to the endDate
          example: 2016-12-31
          type: string
        endDate:
          description: Ending date (YYYY-MM-DD) of the time period for deletion. The
            hardbounces until this date will be deleted. Must be greater than or equal
            to the startDate
          example: 2017-01-31
          type: string
        contactEmail:
          description: Target a specific email address
          example: alex76@example.com
          format: email
          type: string
      type: object
    createWebhook:
      properties:
        url:
          description: URL of the webhook
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        description:
          description: Description of the webhook
          example: Webhook triggered on unsubscription
          type: string
        events:
          description: "Events triggering the webhook. Possible values for Transactional\
            \ type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,\
            \ `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened`\
            \ and `unsubscribed` and possible values for Marketing type webhook –\
            \ `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`,\
            \ `listAddition` & `delivered`"
          items:
            enum:
            - sent
            - hardBounce
            - softBounce
            - blocked
            - spam
            - delivered
            - request
            - click
            - invalid
            - deferred
            - opened
            - uniqueOpened
            - unsubscribed
            - listAddition
            - contactUpdated
            - contactDeleted
            example: unsubscribed
            type: string
          type: array
        type:
          default: transactional
          description: Type of the webhook
          enum:
          - transactional
          - marketing
          example: marketing
          type: string
      required:
      - events
      - url
      type: object
    updateWebhook:
      properties:
        url:
          description: URL of the webhook
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        description:
          description: Description of the webhook
          example: Webhook triggered on contact hardbounce
          type: string
        events:
          description: "Events triggering the webhook. Possible values for Transactional\
            \ type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,\
            \ `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened`\
            \ and `unsubscribed` and possible values for Marketing type webhook –\
            \ `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`,\
            \ `listAddition` and `delivered`"
          items:
            enum:
            - hardBounce
            - softBounce
            - blocked
            - spam
            - delivered
            - request
            - click
            - invalid
            - deferred
            - opened
            - uniqueOpened
            - unsubscribed
            - listAddition
            - contactUpdated
            - contactDeleted
            example: hardBounce
            type: string
          type: array
      type: object
    createDoiContact:
      properties:
        email:
          description: Email address where the confirmation email will be sent. This
            email address will be the identifier for all other contact attributes.
          example: elly@example.com
          format: email
          type: string
        attributes:
          description: "Pass the set of attributes and their values. These attributes\
            \ must be present in your SendinBlue account. For eg. {'FNAME':'Elly',\
            \ 'LNAME':'Roger'}"
          example:
            FNAME: Elly
            LNAME: Roger
          properties: {}
          type: object
        includeListIds:
          description: Lists under user account where contact should be added
          items:
            description: Id of the list
            example: 36
            format: int64
            type: integer
          type: array
        excludeListIds:
          description: Lists under user account where contact should not be added
          items:
            description: Id of the list
            example: 36
            format: int64
            type: integer
          type: array
        templateId:
          description: Id of the Double opt-in (DOI) template
          example: 2
          format: int64
          type: integer
        redirectionUrl:
          description: "URL of the web page that user will be redirected to after\
            \ clicking on the double opt in URL. When editing your DOI template you\
            \ can reference this URL by using the tag {{ params.DOIurl }}."
          example: http://requestb.in/173lyyx1
          format: url
          type: string
      required:
      - email
      - includeListIds
      - redirectionUrl
      - templateId
      type: object
    createContact:
      properties:
        email:
          description: "Email address of the user. Mandatory if \"SMS\" field is not\
            \ passed in \"attributes\" parameter. Mobile Number in \"SMS\" field should\
            \ be passed with proper country code. For example {\"SMS\":\"+91xxxxxxxxxx\"\
            } or {\"SMS\":\"0091xxxxxxxxxx\"}"
          example: elly@example.com
          format: email
          type: string
        attributes:
          description: "Pass the set of attributes and their values. These attributes\
            \ must be present in your SendinBlue account. For eg. {\"FNAME\":\"Elly\"\
            , \"LNAME\":\"Roger\"}"
          example:
            FNAME: Elly
            LNAME: Roger
          properties: {}
          type: object
        emailBlacklisted:
          description: Set this field to blacklist the contact for emails (emailBlacklisted
            = true)
          example: false
          type: boolean
        smsBlacklisted:
          description: Set this field to blacklist the contact for SMS (smsBlacklisted
            = true)
          example: false
          type: boolean
        listIds:
          description: Ids of the lists to add the contact to
          items:
            description: Id of the list to add the contact to
            example: 36
            format: int64
            type: integer
          type: array
        updateEnabled:
          default: false
          description: Facilitate to update the existing contact in the same request
            (updateEnabled = true)
          example: false
          type: boolean
        smtpBlacklistSender:
          description: transactional email forbidden sender for contact. Use only
            for email Contact ( only available if updateEnabled = true )
          items:
            format: email
            type: string
          type: array
      type: object
    updateContact:
      properties:
        attributes:
          description: "Pass the set of attributes to be updated. These attributes\
            \ must be present in your account. To update existing email address of\
            \ a contact with the new one please pass EMAIL in attribtes. For example,\
            \ `{ \"EMAIL\":\"newemail@domain.com\", \"FNAME\":\"Ellie\", \"LNAME\"\
            :\"Roger\"}`. Keep in mind transactional attributes can be updated the\
            \ same way as normal attributes. Mobile Number in \"SMS\" field should\
            \ be passed with proper country code. For example {\"SMS\":\"+91xxxxxxxxxx\"\
            } or {\"SMS\":\"0091xxxxxxxxxx\"}"
          example:
            EMAIL: newemail@domain.com
            FNAME: Ellie
            LNAME: Roger
          properties: {}
          type: object
        emailBlacklisted:
          description: Set/unset this field to blacklist/allow the contact for emails
            (emailBlacklisted = true)
          example: false
          type: boolean
        smsBlacklisted:
          description: Set/unset this field to blacklist/allow the contact for SMS
            (smsBlacklisted = true)
          example: true
          type: boolean
        listIds:
          description: Ids of the lists to add the contact to
          items:
            description: Id of the list to add the contact to
            example: 65
            format: int64
            type: integer
          type: array
        unlinkListIds:
          description: Ids of the lists to remove the contact from
          items:
            description: Id of the list to remove the contact from
            example: 36
            format: int64
            type: integer
          type: array
        smtpBlacklistSender:
          description: transactional email forbidden sender for contact. Use only
            for email Contact
          items:
            format: email
            type: string
          type: array
      type: object
    createAttribute:
      properties:
        value:
          description: Value of the attribute. Use only if the attribute's category
            is 'calculated' or 'global'
          example: "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
          type: string
        enumeration:
          description: "List of values and labels that the attribute can take. Use\
            \ only if the attribute's category is \"category\". For example, [{\"\
            value\":1, \"label\":\"male\"}, {\"value\":2, \"label\":\"female\"}]"
          items:
            $ref: '#/components/schemas/createAttribute_enumeration_inner'
          type: array
        type:
          description: "Type of the attribute. Use only if the attribute's category\
            \ is 'normal', 'category' or 'transactional' ( type 'boolean' is only\
            \ available if the category is 'normal' attribute, type 'id' is only available\
            \ if the category is 'transactional' attribute & type 'category' is only\
            \ available if the category is 'category' attribute )"
          enum:
          - text
          - date
          - float
          - boolean
          - id
          - category
          example: text
          type: string
      type: object
    updateAttribute:
      properties:
        value:
          description: Value of the attribute to update. Use only if the attribute's
            category is 'calculated' or 'global'
          example: "COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]"
          type: string
        enumeration:
          description: "List of the values and labels that the attribute can take.\
            \ Use only if the attribute's category is \"category\". For example, [{\"\
            value\":1, \"label\":\"male\"}, {\"value\":2, \"label\":\"female\"}]"
          items:
            $ref: '#/components/schemas/updateAttribute_enumeration_inner'
          type: array
      type: object
    createList:
      properties:
        name:
          description: Name of the list
          example: Magento Customer - ES
          type: string
        folderId:
          description: Id of the parent folder in which this list is to be created
          example: 2
          format: int64
          type: integer
      required:
      - folderId
      - name
      type: object
    updateList:
      properties:
        name:
          description: "Name of the list. Either of the two parameters (name, folderId)\
            \ can be updated at a time."
          example: Magento Customer - ES
          type: string
        folderId:
          description: "Id of the folder in which the list is to be moved. Either\
            \ of the two parameters (name, folderId) can be updated at a time."
          example: 2
          format: int64
          type: integer
      type: object
    requestContactExport:
      properties:
        exportAttributes:
          description: "List of all the attributes that you want to export. These\
            \ attributes must be present in your contact database. For example, ['fname',\
            \ 'lname', 'email', 'CONTACT ID']."
          items:
            example: NAME
            type: string
          type: array
        contactFilter:
          description: |
            This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {"blacklisted":true} will export all the blacklisted contacts.
          example:
            blacklisted: true
            listid.id: 32
          properties: {}
          type: object
        customContactFilter:
          $ref: '#/components/schemas/requestContactExport_customContactFilter'
        notifyUrl:
          description: "Webhook that will be called once the export process is finished.\
            \ For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479"
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        skipFilesMerge:
          default: false
          description: To stop merging the file into single file
          example: false
          type: boolean
        disableNotification:
          default: false
          description: To disable email notification
          example: false
          type: boolean
        disableFrontendNotification:
          default: false
          description: To disable frontend notification
          example: false
          type: boolean
        exportMandatoryAttributes:
          default: true
          description: "To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME"
          example: false
          type: boolean
        exportSubscriptionStatus:
          description: Export subscription status of contacts for email & sms marketting.
            Pass email_marketing to obtain the marketing email subscription status
            & sms_marketing to retrieve the marketing SMS status of the contact.
          items:
            example: email_marketing
            type: string
          type: array
        exportMetadata:
          description: "Export metadata of contacts such as _listIds, ADDED_TIME,\
            \ MODIFIED_TIME."
          items:
            example: _listIds
            type: string
          type: array
      type: object
    requestContactImport:
      properties:
        fileUrl:
          description: "Mandatory if fileBody is not defined. URL of the file to be\
            \ imported (no local file). Possible file formats: .txt, .csv"
          example: https://importfile.domain.com
          format: url
          type: string
        fileBody:
          description: Mandatory if fileUrl is not defined. CSV content to be imported.
            Use semicolon to separate multiple attributes. Maximum allowed file body
            size is 10MB . However we recommend a safe limit of around 8 MB to avoid
            the issues caused due to increase of file body size while parsing. Please
            use fileUrl instead to import bigger files.
          example: NAME;SURNAME;EMAIL\n"Smith";"John";"john.smith@example.com"\n"Roger";"Ellie";"ellie36@example.com
          type: string
        jsonBody:
          description: |
            **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files.
          items:
            $ref: '#/components/schemas/requestContactImport_jsonBody_inner'
          type: array
        listIds:
          description: "Mandatory if newList is not defined. Ids of the lists in which\
            \ the contacts shall be imported. For example, [2, 4, 7]."
          items:
            description: List Id in which the contacts shall be imported
            example: 76
            format: int64
            type: integer
          type: array
        notifyUrl:
          description: "URL that will be called once the import process is finished.\
            \ For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479"
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        newList:
          $ref: '#/components/schemas/requestContactImport_newList'
        emailBlacklist:
          default: false
          description: To blacklist all the contacts for email
          example: false
          type: boolean
        allowExport:
          default: false
          description: "To enable allow export. if allow export will be true, we will\
            \ save import_process_ids [12, 13, 14] in the users metadata"
          example: false
          type: boolean
        disableNotification:
          default: false
          description: To disable email notification
          example: false
          type: boolean
        disableFrontendNotification:
          default: false
          description: To disable frontend notification
          example: false
          type: boolean
        smsBlacklist:
          default: false
          description: To blacklist all the contacts for sms
          example: false
          type: boolean
        updateExistingContacts:
          default: true
          description: To facilitate the choice to update the existing contacts
          example: true
          type: boolean
        emptyContactsAttributes:
          default: false
          description: "To facilitate the choice to erase any attribute of the existing\
            \ contacts with empty value. emptyContactsAttributes = true means the\
            \ empty fields in your import will erase any attribute that currently\
            \ contain data in SendinBlue, & emptyContactsAttributes = false means\
            \ the empty fields will not affect your existing data ( only available\
            \ if `updateExistingContacts` set to true )"
          example: true
          type: boolean
      type: object
    createSmsCampaign:
      properties:
        name:
          description: Name of the campaign
          example: Spring Promo Code
          type: string
        sender:
          description: Name of the sender. **The number of characters is limited to
            11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
          maxLength: 15
          type: string
        content:
          description: "Content of the message. The maximum characters used per SMS\
            \ is 160, if used more than that, it will be counted as more than one\
            \ SMS"
          example: "Get a discount by visiting our NY store and saying : Happy Spring\
            \ !"
          type: string
        recipients:
          $ref: '#/components/schemas/createSmsCampaign_recipients'
        scheduledAt:
          description: UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).
            Prefer to pass your timezone in date-time format for accurate result.
          example: 2017-05-05T12:30:00+02:00
          format: date-time
          type: string
      required:
      - content
      - name
      - sender
      type: object
    updateSmsCampaign:
      properties:
        name:
          description: Name of the campaign
          example: Spring Promo Code
          type: string
        sender:
          description: Name of the sender. **The number of characters is limited to
            11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
          maxLength: 15
          type: string
        content:
          description: "Content of the message. The maximum characters used per SMS\
            \ is 160, if used more than that, it will be counted as more than one\
            \ SMS"
          example: "Get a discount by visiting our NY store and saying : Happy Spring!"
          type: string
        recipients:
          $ref: '#/components/schemas/createSmsCampaign_recipients'
        scheduledAt:
          description: UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).
            Prefer to pass your timezone in date-time format for accurate result.
          example: 2017-05-05T12:30:00+02:00
          format: date-time
          type: string
      type: object
    sendTransacSms:
      properties:
        sender:
          description: Name of the sender. **The number of characters is limited to
            11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
          maxLength: 15
          type: string
        recipient:
          description: Mobile number to send SMS with the country code
          example: "33689965433"
          type: string
        content:
          description: "Content of the message. If more than 160 characters long,\
            \ will be sent as multiple text messages"
          example: Enter this code:CCJJG8 to validate your account
          type: string
        type:
          default: transactional
          description: "Type of the SMS. Marketing SMS messages are those sent typically\
            \ with marketing content. Transactional SMS messages are sent to individuals\
            \ and are triggered in response to some action, such as a sign-up, purchase,\
            \ etc."
          enum:
          - transactional
          - marketing
          example: marketing
          type: string
        tag:
          description: Tag of the message
          example: accountValidation
          type: string
        webUrl:
          description: Webhook to call for each event triggered by the message (delivered
            etc.)
          example: http://requestb.in/173lyyx1
          format: url
          type: string
        organisationPrefix:
          description: "A recognizable prefix will ensure your audience knows who\
            \ you are.**Mandatory for U.S. Carriers**.This will be added as your Brand\
            \ Name before the message content and will be included in content,**Prefer\
            \ to verify maximum length of 160 characters including this prefix to\
            \ avoid multiple sending of same sms**."
          example: MyCompany
          type: string
      required:
      - content
      - recipient
      - sender
      type: object
    sendTestEmail:
      properties:
        emailTo:
          description: "List of the email addresses of the recipients whom you wish\
            \ to send the test mail. If left empty, the test mail will be sent to\
            \ your entire test list."
          items:
            description: Email addres of the recipient
            example: helen.jurger@example.com
            format: email
            type: string
          type: array
      type: object
    sendTestSms:
      properties:
        phoneNumber:
          description: Mobile number of the recipient with the country code. This
            number must belong to one of your contacts in SendinBlue account and must
            not be blacklisted
          example: "33689965433"
          type: string
      type: object
    getTransacAggregatedSmsReport:
      example:
        unsubscribed: 6
        hardBounces: 1
        blocked: 2
        replied: 12
        rejected: 8
        range: 2016-09-08|2017-04-06
        accepted: 252
        delivered: 249
        requests: 263
        softBounces: 4
      properties:
        range:
          description: Time frame of the report
          example: 2016-09-08|2017-04-06
          type: string
        requests:
          description: Number of requests for the timeframe
          example: 263
          format: int64
          type: integer
        delivered:
          description: Number of delivered SMS for the timeframe
          example: 249
          format: int64
          type: integer
        hardBounces:
          description: Number of hardbounces for the timeframe
          example: 1
          format: int64
          type: integer
        softBounces:
          description: Number of softbounces for the timeframe
          example: 4
          format: int64
          type: integer
        blocked:
          description: Number of blocked contact for the timeframe
          example: 2
          format: int64
          type: integer
        unsubscribed:
          description: Number of unsubscription for the timeframe
          example: 6
          format: int64
          type: integer
        replied:
          description: Number of answered SMS for the timeframe
          example: 12
          format: int64
          type: integer
        accepted:
          description: Number of accepted for the timeframe
          example: 252
          format: int64
          type: integer
        rejected:
          description: Number of rejected for the timeframe
          example: 8
          format: int64
          type: integer
      required:
      - accepted
      - blocked
      - delivered
      - hardBounces
      - range
      - rejected
      - replied
      - requests
      - softBounces
      - unsubscribed
      type: object
    getTransacSmsReport:
      example:
        reports:
        - date: 2017-03-17
          unsubscribed: 1
          hardBounces: 1
          blocked: 0
          replied: 2
          rejected: 1
          accepted: 85
          delivered: 85
          requests: 87
          softBounces: 1
        - date: 2017-03-17
          unsubscribed: 1
          hardBounces: 1
          blocked: 0
          replied: 2
          rejected: 1
          accepted: 85
          delivered: 85
          requests: 87
          softBounces: 1
      properties:
        reports:
          items:
            $ref: '#/components/schemas/getTransacSmsReport_reports_inner'
          type: array
      type: object
    getIp:
      example:
        ip: 123.65.8.22
        domain: mailing.myshop.com
        active: true
        id: 3
      properties:
        id:
          description: ID of the dedicated IP
          example: 3
          format: int64
          type: integer
        ip:
          description: Dedicated IP
          example: 123.65.8.22
          type: string
        active:
          description: "Status of the IP (true=active, false=inactive)"
          example: true
          type: boolean
        domain:
          description: Domain associated to the IP
          example: mailing.myshop.com
          type: string
      required:
      - active
      - domain
      - id
      - ip
      type: object
    getIpsFromSender:
      example:
        ips:
        - ip: 123.65.8.22
          domain: mailing.myshop.dom
          weight: 75
          id: 3
        - ip: 123.65.8.22
          domain: mailing.myshop.dom
          weight: 75
          id: 3
      properties:
        ips:
          description: Dedicated IP(s) linked to a sender
          items:
            $ref: '#/components/schemas/getIpFromSender'
          type: array
      required:
      - ips
      type: object
    getIps:
      example:
        ips:
        - ip: 123.65.8.22
          domain: mailing.myshop.com
          active: true
          id: 3
        - ip: 123.65.8.22
          domain: mailing.myshop.com
          active: true
          id: 3
      properties:
        ips:
          description: Dedicated IP(s) available on your account
          items:
            $ref: '#/components/schemas/getIp'
          type: array
      required:
      - ips
      type: object
    getIpFromSender:
      example:
        ip: 123.65.8.22
        domain: mailing.myshop.dom
        weight: 75
        id: 3
      properties:
        id:
          description: ID of the dedicated IP
          example: 3
          format: int64
          type: integer
        ip:
          description: Dedicated IP
          example: 123.65.8.22
          type: string
        domain:
          description: Domain associated to the IP
          example: mailing.myshop.dom
          type: string
        weight:
          description: Weight of the IP
          example: 75
          format: int64
          type: integer
      required:
      - domain
      - id
      - ip
      - weight
      type: object
    sendEmail:
      properties:
        emailTo:
          description: "List of the email addresses of the recipients. For example,\
            \ ['abc@example.com', 'asd@example.com']."
          items:
            description: Email address of the recipient
            example: john.smith@example.com
            format: email
            type: string
          type: array
        emailBcc:
          description: List of the email addresses of the recipients in bcc
          items:
            description: Email address of the recipient in bcc
            example: jeff87@example.com
            format: email
            type: string
          type: array
        emailCc:
          description: List of the email addresses of the recipients in cc
          items:
            description: Email address of the recipient in cc
            example: alex9877@example.com
            format: email
            type: string
          type: array
        replyTo:
          description: Email address which shall be used by campaign recipients to
            reply back
          example: support@myshop.com
          format: email
          type: string
        attachmentUrl:
          description: "Absolute url of the attachment (no local file). Extension\
            \ allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,\
            \ png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,\
            \ pptx, tar, ez, ics, mobi, msg, pub and eps"
          example: https://attachment.domain.com
          format: url
          type: string
        attachment:
          description: "Pass the list of content (base64 encoded) and name of the\
            \ attachment. For example, [{\"content\":\"base64 encoded content 1\"\
            , \"name\":\"attcahment1\"}, {\"content\":\"base64 encoded content 2\"\
            , \"name\":\"attcahment2\"}]."
          items:
            $ref: '#/components/schemas/sendEmail_attachment_inner'
          type: array
        headers:
          description: "Pass the set of headers that shall be sent along the mail\
            \ headers in the original email. 'sender.ip' header can be set (only for\
            \ dedicated ip users) to mention the IP to be used for sending transactional\
            \ emails. Headers are allowed in `This-Case-Only` (i.e. words separated\
            \ by hyphen with first letter of each word in capital letter), they will\
            \ be converted to such case styling if not in this format in the request\
            \ payload. For example, {\"Content-Type\":\"text/html\", \"charset\":\"\
            iso-8859-1\", \"sender.ip\":\"1.2.3.4\"}"
          example:
            Content-Type: text/html
            charset: iso-8859-1
            sender.ip: 1.2.3.4
          properties: {}
          type: object
        attributes:
          description: "Pass the set of attributes to customize the template. For\
            \ example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}"
          example:
            FNAME: Joe
            LNAME: Doe
          properties: {}
          type: object
        tags:
          description: Tag your emails to find them more easily
          items:
            example: tag1
            type: string
          type: array
      required:
      - emailTo
      type: object
    getTransacEmailContent:
      example:
        date: 2017-03-12T12:30:00Z
        subject: Summer Camp
        attachmentCount: 2
        templateId: 2
        body: <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1> <p>This
          is the actual html content sent</p> </body> </html>
        email: abc@example.com
        events:
        - name: delivered
          time: 2017-03-12T12:30:00Z
        - name: delivered
          time: 2017-03-12T12:30:00Z
      properties:
        email:
          description: Email address to which transactional email has been sent
          example: abc@example.com
          format: email
          type: string
        subject:
          description: Subject of the sent email
          example: Summer Camp
          type: string
        templateId:
          description: Id of the template
          example: 2
          format: int64
          type: integer
        date:
          description: Date on which transactional email was sent
          example: 2017-03-12T12:30:00Z
          format: date-time
          type: string
        events:
          description: Series of events which occurred on the transactional email
          items:
            $ref: '#/components/schemas/getTransacEmailContent_events_inner'
          type: array
        body:
          description: Actual content of the transactional email that has been sent
          example: <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>
            <p>This is the actual html content sent</p> </body> </html>
          type: string
        attachmentCount:
          description: Count of the attachments that were sent in the email
          example: 2
          format: int64
          type: integer
      required:
      - attachmentCount
      - body
      - date
      - email
      - events
      - subject
      type: object
    getTransacEmailsList:
      example:
        transactionalEmails:
        - date: 2017-03-12T12:30:00Z
          subject: Summer Camp
          messageId: <201798300811.5700093@relay.domain.com>
          from: diana.doe@example.com
          templateId: 2
          uuid: 5a78c-209ok98262910-s99a341
          email: john.smith@example.com
          tags:
          - tag1
          - tag1
        - date: 2017-03-12T12:30:00Z
          subject: Summer Camp
          messageId: <201798300811.5700093@relay.domain.com>
          from: diana.doe@example.com
          templateId: 2
          uuid: 5a78c-209ok98262910-s99a341
          email: john.smith@example.com
          tags:
          - tag1
          - tag1
      properties:
        transactionalEmails:
          items:
            $ref: '#/components/schemas/getTransacEmailsList_transactionalEmails_inner'
          type: array
      type: object
    abTestVersionStats:
      description: Percentage of a particular event for both versions
      example:
        Version B: 50%
        Version A: 50%
      properties:
        Version A:
          description: percentage of an event for version A
          example: 50%
          type: string
        Version B:
          description: percentage of an event for version B
          example: 50%
          type: string
      required:
      - Version A
      - Version B
      type: object
    abTestVersionClicks:
      description: Information on clicked links for a particular version
      items:
        $ref: '#/components/schemas/abTestVersionClicks_inner'
      type: array
    blockDomain:
      properties:
        domain:
          description: name of the domain to be blocked
          example: example.com
          type: string
      required:
      - domain
      type: object
    getBlockedDomains:
      description: list of blocked domains
      example:
        domains:
        - contact.com
        - contact.com
      properties:
        domains:
          description: List of all blocked domains
          items:
            description: name of blocked domain
            example: contact.com
            type: string
          type: array
      required:
      - domains
      type: object
    getAccount_allOf_plan:
      example:
        creditsType: sendLimit
        credits: 8755.0
        endDate: 2017-01-31
        type: subscription
        startDate: 2016-12-31
      properties:
        type:
          description: Displays the plan type of the user
          enum:
          - payAsYouGo
          - free
          - subscription
          - sms
          example: subscription
          type: string
        creditsType:
          description: "This is the type of the credit, \"Send Limit\" is one of the\
            \ possible types of credit of a user. \"Send Limit\" implies the total\
            \ number of emails you can send to the subscribers in your account."
          enum:
          - sendLimit
          example: sendLimit
          type: string
        credits:
          description: Remaining credits of the user
          example: 8755.0
          format: float
          type: number
        startDate:
          description: Date of the period from which the plan will start (only available
            for "subscription" plan type)
          example: 2016-12-31
          format: date
          type: string
        endDate:
          description: Date of the period from which the plan will end (only available
            for "subscription" plan type)
          example: 2017-01-31
          format: date
          type: string
      required:
      - credits
      - creditsType
      - type
      type: object
    getAccount_allOf_relay_data:
      description: Data regarding the transactional email account
      example:
        port: 125
        relay: relay.domain.com
        userName: john.smith@example.com
      properties:
        userName:
          description: Email to use as login on transactional platform
          example: john.smith@example.com
          format: email
          type: string
        relay:
          description: URL of the SMTP Relay
          example: relay.domain.com
          type: string
        port:
          description: Port used for SMTP Relay
          example: 125
          type: integer
      required:
      - port
      - relay
      - userName
      type: object
    getAccount_allOf_relay:
      description: Information about your transactional email account
      example:
        data:
          port: 125
          relay: relay.domain.com
          userName: john.smith@example.com
        enabled: true
      properties:
        enabled:
          description: "Status of your transactional email Account (true=Enabled,\
            \ false=Disabled)"
          example: true
          type: boolean
        data:
          $ref: '#/components/schemas/getAccount_allOf_relay_data'
      required:
      - data
      - enabled
      type: object
    getAccount_allOf_marketingAutomation:
      example:
        key: iso05aopqych87ysy0jymf
        enabled: false
      properties:
        key:
          description: Marketing Automation Tracker ID
          example: iso05aopqych87ysy0jymf
          type: string
        enabled:
          description: "Status of Marketing Automation Plateform activation for your\
            \ account (true=enabled, false=disabled)"
          example: false
          type: boolean
      required:
      - enabled
      type: object
    getExtendedClient_allOf_address:
      description: Address informations
      example:
        zipCode: "9867"
        country: United States of America
        city: New-York
        street: 47 Harbour Street
      properties:
        street:
          description: Street information
          example: 47 Harbour Street
          type: string
        city:
          description: City information
          example: New-York
          type: string
        zipCode:
          description: Zip Code information
          example: "9867"
          type: string
        country:
          description: Country information
          example: United States of America
          type: string
      required:
      - city
      - country
      - street
      - zipCode
      type: object
    getSendersList_senders_inner_ips_inner:
      example:
        ip: 123.98.689.7
        domain: mycompany.com
        weight: 50
      properties:
        ip:
          description: Dedicated IP available in your account
          example: 123.98.689.7
          type: string
        domain:
          description: Domain of the IP
          example: mycompany.com
          type: string
        weight:
          description: Weight of the IP for this sender
          example: 50
          format: int64
          type: integer
      required:
      - domain
      - ip
      - weight
      type: object
    getSendersList_senders_inner:
      example:
        name: Marketing
        active: false
        id: 0
        ips:
        - ip: 123.98.689.7
          domain: mycompany.com
          weight: 50
        - ip: 123.98.689.7
          domain: mycompany.com
          weight: 50
        email: marketing@mycompany.com
      properties:
        id:
          description: Id of the sender
          example: 0
          format: int64
          type: integer
        name:
          description: From Name associated to the sender
          example: Marketing
          type: string
        email:
          description: From Email associated to the sender
          example: marketing@mycompany.com
          type: string
        active:
          description: "Status of sender (true=activated, false=deactivated)"
          example: false
          type: boolean
        ips:
          description: List of dedicated IP(s) available in the account. This data
            is displayed only for dedicated IPs
          items:
            $ref: '#/components/schemas/getSendersList_senders_inner_ips_inner'
          type: array
      required:
      - active
      - email
      - id
      - name
      type: object
    createSender_ips_inner:
      properties:
        ip:
          description: Dedicated IP available in your account
          example: 123.98.689.7
          type: string
        domain:
          description: Domain of the IP
          example: mycompany.com
          type: string
        weight:
          description: "Weight to apply to the IP. Sum of all IP weights must be 100.\
            \ Should be passed for either ALL or NONE of the IPs. If it's not passed,\
            \ the sending will be equally balanced on all IPs."
          example: 50
          format: int64
          maximum: 100
          minimum: 1
          type: integer
      required:
      - domain
      - ip
      type: object
    getEmailCampaigns_campaigns_inner:
      allOf:
      - $ref: '#/components/schemas/getExtendedCampaignOverview'
      - properties:
          recipients:
            allOf:
            - $ref: '#/definitions/getCampaignRecipients'
            type: object
          statistics:
            allOf:
            - $ref: '#/definitions/getExtendedCampaignStats'
            type: object
          shareLink:
            description: Link to share the campaign on social medias
            example: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
            format: url
            type: string
        required:
        - recipients
        - statistics
        type: object
      example:
        footer: "[DEFAULT_FOOTER]"
        subject: 20% OFF for 2017 Summer Sales
        modifiedAt: 2017-05-01T12:30:00Z
        shareLink: http://dhh.sendinblue.com/fhsgccc.html?t=9865448900
        type: classic
        htmlContent: This is my HTML Content
        createdAt: 2017-05-01T12:30:00Z
        sentDate: 2018-12-01T16:30:00Z
        returnBounce: 5
        id: 12
        tag: Newsletter
        sendAtBestTime: true
        inlineImageActivation: true
        recurring: true
        winnerDelay: 50
        winnerCriteria: open
        testSent: true
        splitRule: 25
        subjectA: Discover the New Collection!
        sender:
          name: Marketing
          id: 43
          email: marketing@mycompany.com
        subjectB: Want to discover the New Collection?
        recipients: "{}"
        toField: "{FNAME} {LNAME}"
        name: EN - Sales Summer 2017
        replyTo: replyto@domain.com
        header: "[DEFAULT_HEADER]"
        scheduledAt: 2017-06-01T12:30:00Z
        abTesting: true
        mirrorActive: true
        status: sent
        statistics: "{}"
      type: object
    getSmsCampaigns_campaigns_inner:
      allOf:
      - $ref: '#/components/schemas/getSmsCampaignOverview'
      - properties:
          recipients:
            allOf:
            - $ref: '#/definitions/getCampaignRecipients'
            type: object
          statistics:
            allOf:
            - $ref: '#/definitions/getSmsCampaignStats'
            type: object
        required:
        - recipients
        - statistics
        type: object
      example:
        createdAt: 2017-06-01T12:30:00Z
        sender: MyCompany
        modifiedAt: 2017-05-01T12:30:00Z
        recipients: "{}"
        name: PROMO CODE
        id: 2
        content: Visit our Store and get some discount !
        scheduledAt: 2017-06-01T12:30:00Z
        status: draft
        statistics: "{}"
      type: object
    getSmsCampaign_allOf_recipients:
      type: object
    getExtendedCampaignOverview_allOf_sender:
      example:
        name: Marketing
        id: 43
        email: marketing@mycompany.com
      properties:
        name:
          description: Sender name of the campaign
          example: Marketing
          type: string
        email:
          description: Sender email of the campaign
          example: marketing@mycompany.com
          format: email
          type: string
        id:
          description: Sender id of the campaign
          example: 43
          format: int64
          type: integer
      type: object
    getWATemplates_templates_inner:
      example:
        createdAt: 2017-06-01T12:30:00Z
        modifiedAt: 2017-05-01T12:30:00Z
        errorReason: NONE
        name: Test template
        language: en
        id: "235"
        category: MARKETING
        status: approved
      properties:
        id:
          description: id of the template
          example: "235"
          type: string
        name:
          description: Name of the WhatsApp template
          example: Test template
          type: string
        status:
          description: Status of the WhatsApp template
          example: approved
          type: string
        language:
          description: Language in which template exists
          example: en
          type: string
        category:
          description: category of the template
          example: MARKETING
          type: string
        errorReason:
          description: Error reason in the template creation
          example: NONE
          type: string
        createdAt:
          description: Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
          type: string
        modifiedAt:
          description: UTC date-time of last modification of the whatsApp template
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
          type: string
      required:
      - category
      - createdAt
      - id
      - language
      - modifiedAt
      - name
      - status
      type: object
    getWhatsappCampaigns_campaigns_inner:
      example:
        createdAt: 2017-06-01T12:30:00Z
        stats:
          read: 2
          unsubscribe: 0
          delivered: 3
          notSent: 4
          sent: 3
        modifiedAt: 2017-05-01T12:30:00Z
        errorReason: NONE
        campaignStatus: draft
        readPercentage: 28.57
        id: 1672035851100690
        invalidatedContacts: 0
        templateId: "637660278078655"
        campaignName: Test Campaign
        scheduledAt: 2017-06-01T12:30:00Z
      properties:
        id:
          description: ID of the WhatsApp Campaign
          example: 1672035851100690
          format: int64
          type: integer
        campaignName:
          description: Name of the WhatsApp Campaign
          example: Test Campaign
          type: string
        templateId:
          description: Id of the WhatsApp template
          example: "637660278078655"
          type: string
        campaignStatus:
          description: Status of the WhatsApp Campaign
          enum:
          - draft
          - scheduled
          - pending
          - approved
          - running
          - suspended
          - rejected
          - sent
          example: draft
          type: string
        scheduledAt:
          description: UTC date-time on which WhatsApp campaign is scheduled. Should
            be in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
          type: string
        errorReason:
          description: Error reason in the campaign creation
          example: NONE
          type: string
        invalidatedContacts:
          description: Count of invalidated contacts
          example: 0
          format: int64
          type: integer
        readPercentage:
          description: Read percentage of the the WhatsApp campaign created
          example: 28.57
          format: float
          type: number
        stats:
          $ref: '#/components/schemas/WhatsappCampStats'
        createdAt:
          description: Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
          type: string
        modifiedAt:
          description: UTC date-time of last modification of the whatsApp template
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
          type: string
      required:
      - campaignName
      - campaignStatus
      - createdAt
      - id
      - modifiedAt
      - scheduledAt
      - templateId
      type: object
    postContactInfo_contacts:
      example:
        total: 27
        processId: 78
        success:
        - "jeff32@example.com, jim56@example.com"
        - "jeff32@example.com, jim56@example.com"
        failure:
        - "jeff32@example.com, jim56@example.com"
        - "jeff32@example.com, jim56@example.com"
      properties:
        success:
          items:
            description: Email addresses which are successfully imported
            example: "jeff32@example.com, jim56@example.com"
            format: email
            type: string
          type: array
        failure:
          items:
            description: "Email addresses which can not be imported, could be already\
              \ in/out list and/or doesn't exist"
            example: "jeff32@example.com, jim56@example.com"
            format: email
            type: string
          type: array
        total:
          description: Displays the count of total number of contacts removed from
            list when user opts for "all" option.
          example: 27
          format: int64
          type: integer
        processId:
          description: Id of the process created to remove contacts from list when
            user opts for "all" option.
          example: 78
          format: int64
          type: integer
      type: object
    getTransacBlockedContacts_contacts_inner_reason:
      description: Reason for blocking / unsubscribing
      example: Admin blocked
      properties:
        code:
          description: Reason code for blocking / unsubscribing (This code is safe
            for comparison)
          enum:
          - unsubscribedViaMA
          - unsubscribedViaEmail
          - adminBlocked
          - unsubscribedViaApi
          - hardBounce
          - contactFlaggedAsSpam
          example: AdminBlocked
          type: string
        message:
          description: Reason for blocking / unsubscribing (This string is not safe
            for comparison)
          example: Admin blocked
          type: string
      type: object
    getTransacBlockedContacts_contacts_inner:
      example:
        reason: Admin blocked
        senderEmail: john.smith@example.com
        blockedAt: 2017-05-01T12:30:00Z
        email: john.smith@example.com
      properties:
        email:
          description: Email address of the blocked or unsubscribed contact
          example: john.smith@example.com
          format: email
          type: string
        senderEmail:
          description: Sender email address of the blocked or unsubscribed contact
          example: john.smith@example.com
          format: email
          type: string
        reason:
          $ref: '#/components/schemas/getTransacBlockedContacts_contacts_inner_reason'
        blockedAt:
          description: Date when the contact was blocked or unsubscribed on
          example: 2017-05-01T12:30:00Z
          format: date-time
          type: string
      required:
      - blockedAt
      - email
      - reason
      - senderEmail
      type: object
    getReports_reports_inner:
      example:
        date: 2017-04-06
        delivered: 63
        requests: 65
        softBounces: 1
        uniqueOpens: 52
        unsubscribed: 0
        hardBounces: 1
        spamReports: 0
        blocked: 0
        invalid: 0
        clicks: 6
        opens: 58
        uniqueClicks: 5
      properties:
        date:
          description: Date of the statistics
          example: 2017-04-06
          format: date
          type: string
        requests:
          description: Number of requests for the date
          example: 65
          format: int64
          type: integer
        delivered:
          description: Number of delivered emails for the date
          example: 63
          format: int64
          type: integer
        hardBounces:
          description: Number of hardbounces for the date
          example: 1
          format: int64
          type: integer
        softBounces:
          description: Number of softbounces for the date
          example: 1
          format: int64
          type: integer
        clicks:
          description: Number of clicks for the date
          example: 6
          format: int64
          type: integer
        uniqueClicks:
          description: Number of unique clicks for the date
          example: 5
          format: int64
          type: integer
        opens:
          description: Number of openings for the date
          example: 58
          format: int64
          type: integer
        uniqueOpens:
          description: Number of unique openings for the date
          example: 52
          format: int64
          type: integer
        spamReports:
          description: Number of complaints (spam reports) for the date
          example: 0
          format: int64
          type: integer
        blocked:
          description: Number of blocked emails for the date
          example: 0
          format: int64
          type: integer
        invalid:
          description: Number of invalid emails for the date
          example: 0
          format: int64
          type: integer
        unsubscribed:
          description: Number of unsubscribed emails for the date
          example: 0
          format: int64
          type: integer
      required:
      - blocked
      - clicks
      - date
      - delivered
      - hardBounces
      - invalid
      - opens
      - requests
      - softBounces
      - spamReports
      - uniqueClicks
      - uniqueOpens
      - unsubscribed
      type: object
    getEmailEventReport_events_inner:
      example:
        date: 2017-03-12T12:30:00Z
        reason: Error connection timeout
        subject: Sib client test
        ip: 165.87.3.15
        link: https://www.someexamplelink.com
        messageId: <201798300811.5787683@relay.domain.com>
        from: john@example.com
        tag: OrderConfirmation
        event: delivered
        email: john.smith@example.com
      properties:
        email:
          description: Email address which generates the event
          example: john.smith@example.com
          format: email
          type: string
        date:
          description: UTC date-time on which the event has been generated
          example: 2017-03-12T12:30:00Z
          format: date-time
          type: string
        subject:
          description: Subject of the event
          example: Sib client test
          type: string
        messageId:
          description: Message ID which generated the event
          example: <201798300811.5787683@relay.domain.com>
          type: string
        event:
          description: Event which occurred
          enum:
          - bounces
          - hardBounces
          - softBounces
          - delivered
          - spam
          - requests
          - opened
          - clicks
          - invalid
          - deferred
          - blocked
          - unsubscribed
          example: delivered
          type: string
        reason:
          description: Reason of bounce (only available if the event is hardbounce
            or softbounce)
          example: Error connection timeout
          type: string
        tag:
          description: Tag of the email which generated the event
          example: OrderConfirmation
          type: string
        ip:
          description: IP from which the user has opened the email or clicked on the
            link (only available if the event is opened or clicks)
          example: 165.87.3.15
          type: string
        link:
          description: The link which is sent to the user (only available if the event
            is requests or opened or clicks)
          example: https://www.someexamplelink.com
          type: string
        from:
          description: Sender email from which the emails are sent
          example: john@example.com
          format: email
          type: string
      required:
      - date
      - email
      - event
      - messageId
      type: object
    getSmsEventReport_events_inner:
      example:
        date: 2017-03-12T12:30:00Z
        reason: Message is undeliverable due to an incorrect / invalid / blacklisted
          / permanently barred MSISDN for this operator
        phoneNumber: "00189001094"
        messageId: "1472640582425378"
        tag: CabWaiting
        event: accepted
        reply: reply
      properties:
        phoneNumber:
          description: Phone number which has generated the event
          example: "00189001094"
          type: string
        date:
          description: UTC date-time on which the event has been generated
          example: 2017-03-12T12:30:00Z
          format: date-time
          type: string
        messageId:
          description: Message ID which generated the event
          example: "1472640582425378"
          type: string
        event:
          description: Event which occurred
          enum:
          - bounces
          - hardBounces
          - softBounces
          - delivered
          - sent
          - accepted
          - unsubscription
          - replies
          - blocked
          - rejected
          example: accepted
          type: string
        reason:
          description: Reason of bounce (only available if the event is hardbounce
            or softbounce)
          example: Message is undeliverable due to an incorrect / invalid / blacklisted
            / permanently barred MSISDN for this operator
          type: string
        reply:
          type: string
        tag:
          description: Tag of the SMS which generated the event
          example: CabWaiting
          type: string
      required:
      - date
      - event
      - messageId
      - phoneNumber
      type: object
    getSmtpTemplateOverview_sender:
      example:
        name: Mary form MyShop
        id: "43"
        email: contact@myshop.fr
      properties:
        name:
          description: From email for the template
          example: Mary form MyShop
          type: string
        email:
          description: From email for the template
          example: contact@myshop.fr
          format: email
          type: string
        id:
          description: Sender id of the template
          example: "43"
          type: string
      type: object
    getExtendedContactDetails_allOf_statistics_messagesSent:
      example:
        campaignId: 3
        eventTime: 2017-03-12T20:15:13Z
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
      required:
      - campaignId
      - eventTime
      type: object
    getExtendedContactDetails_allOf_statistics_unsubscriptions_userUnsubscription:
      example:
        campaignId: 3
        ip: 165.87.3.15
        eventTime: 2017-03-12T20:15:13Z
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
        ip:
          description: IP from which the user has unsubscribed
          example: 165.87.3.15
          type: string
      required:
      - campaignId
      - eventTime
      type: object
    getExtendedContactDetails_allOf_statistics_unsubscriptions_adminUnsubscription:
      example:
        ip: 165.87.3.15
        eventTime: 2017-03-12T20:15:13Z
      properties:
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
        ip:
          description: IP from which the user has been unsubscribed
          example: 165.87.3.15
          type: string
      required:
      - eventTime
      type: object
    getExtendedContactDetails_allOf_statistics_unsubscriptions:
      description: Listing of the unsubscription for the contact
      example:
        adminUnsubscription:
        - ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        - ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        userUnsubscription:
        - campaignId: 3
          ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
      properties:
        userUnsubscription:
          description: Contact unsubscribe via unsubscription link in a campaign
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_unsubscriptions_userUnsubscription'
          type: array
        adminUnsubscription:
          description: Contact has been unsubscribed from the administrator
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_unsubscriptions_adminUnsubscription'
          type: array
      required:
      - adminUnsubscription
      - userUnsubscription
      type: object
    getExtendedContactDetails_allOf_statistics_opened:
      example:
        campaignId: 3
        ip: 165.87.3.15
        count: 1
        eventTime: 2017-03-12T20:15:13Z
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        count:
          description: Number of openings for the campaign
          example: 1
          format: int64
          type: integer
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
        ip:
          description: IP from which the user has opened the email
          example: 165.87.3.15
          type: string
      required:
      - campaignId
      - count
      - eventTime
      - ip
      type: object
    getExtendedContactDetails_allOf_statistics_links:
      example:
        ip: 165.87.3.15
        count: 1
        eventTime: 2017-03-12T20:15:13Z
        url: www.myshop.com
      properties:
        count:
          description: Number of clicks on this link for the campaign
          example: 1
          format: int64
          type: integer
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
        ip:
          description: IP from which the user has clicked on the link
          example: 165.87.3.15
          type: string
        url:
          description: URL of the clicked link
          example: www.myshop.com
          type: string
      required:
      - count
      - eventTime
      - ip
      - url
      type: object
    getExtendedContactDetails_allOf_statistics_clicked:
      example:
        campaignId: 3
        links:
        - ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
          url: www.myshop.com
        - ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
          url: www.myshop.com
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        links:
          description: Listing of the clicked links for the campaign
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_links'
          type: array
      required:
      - campaignId
      - links
      type: object
    getExtendedContactDetails_allOf_statistics:
      description: Campaign statistics of the contact
      example:
        hardBounces:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        unsubscriptions:
          adminUnsubscription:
          - ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          - ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          userUnsubscription:
          - campaignId: 3
            ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
          - campaignId: 3
            ip: 165.87.3.15
            eventTime: 2017-03-12T20:15:13Z
        messagesSent:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        complaints:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        transacAttributes:
        - "{}"
        - "{}"
        opened:
        - campaignId: 3
          ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
        softBounces:
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          eventTime: 2017-03-12T20:15:13Z
        clicked:
        - campaignId: 3
          links:
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
        - campaignId: 3
          links:
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
          - ip: 165.87.3.15
            count: 1
            eventTime: 2017-03-12T20:15:13Z
            url: www.myshop.com
      properties:
        messagesSent:
          description: Listing of the sent campaign for the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        hardBounces:
          description: Listing of the hardbounes generated by the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        softBounces:
          description: Listing of the softbounes generated by the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        complaints:
          description: Listing of the complaints generated by the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_messagesSent'
          type: array
        unsubscriptions:
          $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_unsubscriptions'
        opened:
          description: Listing of the openings generated by the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_opened'
          type: array
        clicked:
          description: Listing of the clicks generated by the contact
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_clicked'
          type: array
        transacAttributes:
          description: Listing of the transactional attributes for the contact
          items:
            properties: {}
            type: object
          type: array
      type: object
    getContactCampaignStats_unsubscriptions:
      example:
        adminUnsubscription:
        - ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        - ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        userUnsubscription:
        - campaignId: 3
          ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
        - campaignId: 3
          ip: 165.87.3.15
          eventTime: 2017-03-12T20:15:13Z
      properties:
        userUnsubscription:
          description: Contact has unsubscribed via the unsubscription link in the
            email
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_unsubscriptions_userUnsubscription'
          type: array
        adminUnsubscription:
          description: Contact has been unsubscribed from the administrator
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_unsubscriptions_adminUnsubscription'
          type: array
      required:
      - adminUnsubscription
      - userUnsubscription
      type: object
    getContactCampaignStats_opened_inner:
      example:
        campaignId: 3
        ip: 165.87.3.15
        count: 3
        eventTime: 2017-03-12T20:15:13Z
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        count:
          description: Number of openings of the campaign
          example: 3
          format: int64
          type: integer
        eventTime:
          description: UTC date-time of the event
          example: 2017-03-12T20:15:13Z
          format: date-time
          type: string
        ip:
          description: IP from which the user has opened the campaign
          example: 165.87.3.15
          type: string
      required:
      - campaignId
      - count
      - eventTime
      - ip
      type: object
    getContactCampaignStats_clicked_inner:
      example:
        campaignId: 3
        links:
        - ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
          url: www.myshop.com
        - ip: 165.87.3.15
          count: 1
          eventTime: 2017-03-12T20:15:13Z
          url: www.myshop.com
      properties:
        campaignId:
          description: ID of the campaign which generated the event
          example: 3
          format: int64
          type: integer
        links:
          items:
            $ref: '#/components/schemas/getExtendedContactDetails_allOf_statistics_links'
          type: array
      required:
      - campaignId
      - links
      type: object
    getContactCampaignStats_transacAttributes_inner:
      example:
        orderId: 248
        orderPrice: 24.99
        orderDate: 2017-03-12
      properties:
        orderDate:
          description: Date of the order
          example: 2017-03-12
          format: date
          type: string
        orderPrice:
          description: Price of the order
          example: 24.99
          format: float
          type: number
        orderId:
          description: ID of the order
          example: 248
          format: int64
          type: integer
      required:
      - orderDate
      - orderId
      - orderPrice
      type: object
    getAttributes_attributes_inner_enumeration_inner:
      example:
        label: Women
        value: 1
      properties:
        value:
          description: ID of Value of the "category" type attribute
          example: 1
          format: int64
          type: integer
        label:
          description: Label of the "category" type attribute
          example: Women
          type: string
      required:
      - label
      - value
      type: object
    getAttributes_attributes_inner:
      example:
        name: LASTNAME
        calculatedValue: "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
        category: category
        type: text
        enumeration:
        - label: Women
          value: 1
        - label: Women
          value: 1
      properties:
        name:
          description: Name of the attribute
          example: LASTNAME
          type: string
        category:
          description: Category of the attribute
          enum:
          - normal
          - transactional
          - category
          - calculated
          - global
          example: category
          type: string
        type:
          description: Type of the attribute
          enum:
          - text
          - date
          - float
          - id
          - boolean
          example: text
          type: string
        enumeration:
          description: Parameter only available for "category" type attributes.
          items:
            $ref: '#/components/schemas/getAttributes_attributes_inner_enumeration_inner'
          type: array
        calculatedValue:
          description: Calculated value formula
          example: "COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]"
          type: string
      required:
      - category
      - name
      type: object
    getSegments_segments:
      description: Listing of all the segments available in your account
      example:
        id: 23
        categoryName: New Category
        segmentName: My Segment
        updatedAt: 2017-03-13T17:05:09Z
      properties:
        id:
          description: ID of the list
          example: 23
          format: int64
          type: integer
        segmentName:
          description: Name of the Segment
          example: My Segment
          type: string
        categoryName:
          description: Name of the Segment Category
          example: New Category
          format: string
          type: string
        updatedAt:
          description: Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-03-13T17:05:09Z
          type: string
      type: object
    getLists_lists_inner:
      allOf:
      - $ref: '#/components/schemas/getList'
      - properties:
          folderId:
            description: ID of the folder
            example: 2
            format: int64
            type: integer
        required:
        - folderId
        type: object
      example:
        totalBlacklisted: 13
        name: Magento Customers - EN
        id: 23
        totalSubscribers: 1776
        folderId: 2
      type: object
    getExtendedList_allOf_campaignStats:
      example:
        stats:
          deferred: 30
          complaints: 1
          delivered: 19765
          softBounces: 100
          sent: 19887
          listId: 2
          returnBounce: 5
          hardBounces: 87
          unsubscriptions: 2
          uniqueViews: 7779
          viewed: 8999
          clickers: 2665
          uniqueClicks: 2300
          trackableViews: 5661
        campaignId: 143
      properties:
        campaignId:
          description: ID of the campaign
          example: 143
          format: int64
          type: integer
        stats:
          $ref: '#/components/schemas/getCampaignStats'
      required:
      - campaignId
      - stats
      type: object
    updateSmtpTemplate_sender:
      description: "Sender details including id or email and name (optional). Only\
        \ one of either Sender's email or Sender's ID shall be passed in one request\
        \ at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"\
        }` , `{\"name\":\"xyz\", \"id\":123}`"
      properties:
        name:
          description: Name of the sender
          example: Mary from MyShop
          type: string
        email:
          description: Email of the sender
          example: contact@myshop.com
          format: email
          type: string
        id:
          description: "Select the sender for the template on the basis of sender\
            \ id. In order to select a sender with specific pool of IP’s, dedicated\
            \ ip users shall pass id (instead of email)."
          example: 3
          format: int64
          type: integer
      type: object
    createSmtpTemplate_sender:
      description: "Sender details including id or email and name (optional). Only\
        \ one of either Sender's email or Sender's ID shall be passed in one request\
        \ at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"\
        }` , `{\"name\":\"xyz\", \"id\":123}`"
      properties:
        name:
          description: "Name of the sender. If not passed, will be set to default"
          example: Mary from MyShop
          type: string
        email:
          description: Email of the sender
          example: contact@myshop.com
          format: email
          type: string
        id:
          description: "Select the sender for the template on the basis of sender\
            \ id. In order to select a sender with specific pool of IP’s, dedicated\
            \ ip users shall pass id (instead of email)."
          example: 3
          format: int64
          type: integer
      type: object
    createEmailCampaign_sender:
      description: "Sender details including id or email and name (optional). Only\
        \ one of either Sender's email or Sender's ID shall be passed in one request\
        \ at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"\
        }` , `{\"name\":\"xyz\", \"id\":123}`"
      properties:
        name:
          description: Sender Name
          example: Mary from MyShop
          type: string
        email:
          description: Sender email
          example: newsletter@myshop.com
          format: email
          type: string
        id:
          description: "Select the sender for the campaign on the basis of sender\
            \ id. In order to select a sender with specific pool of IP’s, dedicated\
            \ ip users shall pass id (instead of email)."
          example: 3
          format: int64
          type: integer
      type: object
    createEmailCampaign_recipients:
      description: List ids to include/exclude from campaign
      properties:
        exclusionListIds:
          description: List ids to exclude from the campaign
          items:
            example: 8
            format: int64
            type: integer
          type: array
        listIds:
          description: Mandatory if scheduledAt is not empty. List Ids to send the
            campaign to
          items:
            example: 32
            format: int64
            type: integer
          type: array
      type: object
    updateEmailCampaign_sender:
      description: "Sender details including id or email and name (optional). Only\
        \ one of either Sender's email or Sender's ID shall be passed in one request\
        \ at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"\
        }` , `{\"name\":\"xyz\", \"id\":123}`"
      properties:
        name:
          description: Sender Name from which the campaign emails are sent
          example: Mary from MyShop
          type: string
        email:
          description: Sender email from which the campaign emails are sent
          example: newsletter@myshop.com
          format: email
          type: string
        id:
          description: "Select the sender for the campaign on the basis of sender\
            \ id. In order to select a sender with specific pool of IP’s, dedicated\
            \ ip users shall pass id (instead of email)."
          example: 3
          format: int64
          type: integer
      type: object
    updateEmailCampaign_recipients:
      description: List ids to include/exclude from campaign
      properties:
        exclusionListIds:
          description: List ids which have to be excluded from a campaign
          items:
            example: 8
            format: int64
            type: integer
          type: array
        listIds:
          description: Lists Ids to send the campaign to. REQUIRED if already not
            present in campaign and scheduledAt is not empty
          items:
            example: 32
            format: int64
            type: integer
          type: array
      type: object
    abTestCampaignResult_statistics:
      example:
        unsubscribed:
          Version B: 50%
          Version A: 50%
        hardBounces:
          Version B: 50%
          Version A: 50%
        complaints:
          Version B: 50%
          Version A: 50%
        openers:
          Version B: 50%
          Version A: 50%
        clicks:
          Version B: 50%
          Version A: 50%
        softBounces:
          Version B: 50%
          Version A: 50%
      properties:
        openers:
          $ref: '#/components/schemas/abTestVersionStats'
        clicks:
          $ref: '#/components/schemas/abTestVersionStats'
        unsubscribed:
          $ref: '#/components/schemas/abTestVersionStats'
        hardBounces:
          $ref: '#/components/schemas/abTestVersionStats'
        softBounces:
          $ref: '#/components/schemas/abTestVersionStats'
        complaints:
          $ref: '#/components/schemas/abTestVersionStats'
      required:
      - clicks
      - complaints
      - hardBounces
      - openers
      - softBounces
      - unsubscribed
      type: object
    abTestCampaignResult_clickedLinks:
      example:
        Version B:
        - clickRate: 40%
          link: https://facbook.com/versionA
          clicksCount: 3
        - clickRate: 40%
          link: https://facbook.com/versionA
          clicksCount: 3
        Version A:
        - clickRate: 40%
          link: https://facbook.com/versionA
          clicksCount: 3
        - clickRate: 40%
          link: https://facbook.com/versionA
          clicksCount: 3
      properties:
        Version A:
          description: Information on clicked links for a particular version
          items:
            $ref: '#/components/schemas/abTestVersionClicks_inner'
          type: array
        Version B:
          description: Information on clicked links for a particular version
          items:
            $ref: '#/components/schemas/abTestVersionClicks_inner'
          type: array
      required:
      - Version A
      - Version B
      type: object
    sendReport_email:
      description: Custom attributes for the report email.
      properties:
        to:
          description: Email addresses of the recipients
          items:
            description: Email address of the recipient
            example: jim.suehan@example.com
            format: email
            type: string
          type: array
        body:
          description: Custom text message to be presented in the report email.
          example: Please find attached the report of our last email campaign.
          type: string
      required:
      - body
      - to
      type: object
    sendSmtpEmail_sender:
      description: "Mandatory if 'templateId' is not passed. Pass name (optional)\
        \ and email of sender from which emails will be sent. For example, {\"name\"\
        :\"Mary from MyShop\", \"email\":\"no-reply@myshop.com\"}"
      properties:
        name:
          description: Name of the sender from which the emails will be sent. Maximum
            allowed characters are 70.
          example: Mary from MyShop
          type: string
        email:
          description: Email of the sender from which the emails will be sent
          example: no-reply@myshop.com
          format: email
          type: string
      required:
      - email
      type: object
    sendSmtpEmail_to_inner:
      properties:
        email:
          description: Email address of the recipient
          example: jimmy98@example.com
          format: email
          type: string
        name:
          description: Name of the recipient. Maximum allowed characters are 70.
          example: Jimmy
          type: string
      required:
      - email
      type: object
    sendSmtpEmail_bcc_inner:
      properties:
        email:
          description: Email address of the recipient in bcc
          example: helen9766@example.com
          format: email
          type: string
        name:
          description: Name of the recipient in bcc. Maximum allowed characters are
            70.
          example: Helen
          type: string
      required:
      - email
      type: object
    sendSmtpEmail_cc_inner:
      properties:
        email:
          description: Email address of the recipient in cc
          example: ann6533@example.com
          format: email
          type: string
        name:
          description: Name of the recipient in cc. Maximum allowed characters are
            70.
          example: Ann
          type: string
      required:
      - email
      type: object
    sendSmtpEmail_replyTo:
      description: "Email (required), along with name (optional), on which transactional\
        \ mail recipients will be able to reply back. For example, {\"email\":\"ann6533@example.com\"\
        , \"name\":\"Ann\"}."
      properties:
        email:
          description: Email address in reply to
          example: ann6533@example.com
          format: email
          type: string
        name:
          description: Name in reply to. Maximum allowed characters are 70.
          example: Ann
          type: string
      required:
      - email
      type: object
    sendSmtpEmail_attachment_inner:
      properties:
        url:
          description: Absolute url of the attachment (no local file).
          example: https://attachment.domain.com/myAttachmentFromUrl.jpg
          format: url
          type: string
        content:
          description: Base64 encoded chunk data of the attachment generated on the
            fly
          example: b3JkZXIucGRm
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        name:
          description: Required if content is passed. Name of the attachment
          example: myAttachment.png
          type: string
      type: object
    createAttribute_enumeration_inner:
      properties:
        value:
          description: Id of the value
          example: 1
          type: integer
        label:
          description: Label of the value
          example: Women
          type: string
      required:
      - label
      - value
      type: object
    updateAttribute_enumeration_inner:
      properties:
        value:
          description: Id of the value
          example: 1
          type: integer
        label:
          description: Label of the value
          example: Men
          type: string
      required:
      - label
      - value
      type: object
    requestContactExport_customContactFilter:
      description: Only one of the two filter options (contactFilter or customContactFilter)
        can be passed in the request. Set the filter for the contacts to be exported.
      properties:
        actionForContacts:
          description: |
            Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.
          enum:
          - allContacts
          - subscribed
          - unsubscribed
          - unsubscribedPerList
          type: string
        actionForEmailCampaigns:
          description: |
            Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
          enum:
          - openers
          - nonOpeners
          - clickers
          - nonClickers
          - unsubscribed
          - hardBounces
          - softBounces
          type: string
        actionForSmsCampaigns:
          description: |
            Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
          enum:
          - hardBounces
          - softBounces
          - unsubscribed
          type: string
        listId:
          description: ID of the list. This is mandatory if actionForContacts is specified
            and segmentId is not provided. Either segmentId or listId must be included.
          example: 2
          format: int64
          type: integer
        importProcessId:
          description: "Mandatory if actionForContacts is passed, ignored otherwise.\
            \ import process Id of the process for which the corresponding action\
            \ shall be applied in the filter."
          example: 333
          format: int64
          type: integer
        segmentId:
          description: |
            ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included.
          example: 2
          format: int64
          type: integer
        emailCampaignId:
          description: "Considered only if actionForEmailCampaigns is passed, ignored\
            \ otherwise. Mandatory if action is one of the following - openers, nonOpeners,\
            \ clickers, nonClickers, unsubscribed. The id of the email campaign for\
            \ which the corresponding action shall be applied in the filter."
          example: 12
          format: int64
          type: integer
        smsCampaignId:
          description: "Considered only if actionForSmsCampaigns is passed, ignored\
            \ otherwise. The id of sms campaign for which the corresponding action\
            \ shall be applied in the filter."
          example: 12
          format: int64
          type: integer
      type: object
    requestContactImport_jsonBody_inner:
      example:
        email: ndicky0@ocn.ne.jp
        attributes:
          LNAME: Noemi
          FNAME: Dicky
          COUNTRY: DE
          BIRTHDAY: 11/02/1989
          PREFERED_COLOR: BLACK
          WHATSAPP: "33689965433"
          LANDLINE_NUMBER: "33689965433"
          SMS: "33689965433"
      properties:
        email:
          type: string
        attributes:
          additionalProperties: true
          description: "List of attributes to be imported. Example for all attribute\
            \ types parsing.\n- For text type attribute \"attributes\": {\"FNAME\"\
            \ : \"John\"}\n- For date type attribute \"attributes\": {\"BIRTHDAY\"\
            \ : \"1989-11-02\"}\n- For Number type attribute \"attributes\": {\"AGE\"\
            \ : 26}\n- For boolean type attribute \"attributes\": {\"IS_MARRIED\"\
            \ : \"yes\"} // no if false.\n- For category type attribute \"attributes\"\
            : {\"COUNTRY\" : \"DE\"}\n- For multiselect type attribute \"attributes\"\
            : {\"PREFERED_COLOR\" : [\"BLACK\", \"WHITE\"]} \n- For user type attribute\
            \ \"attributes\": {\"OWNER\" : \"test@brevo.com\"}\n"
          type: object
      type: object
    requestContactImport_newList:
      description: "To create a new list and import the contacts into it, pass the\
        \ listName and an optional folderId."
      properties:
        listName:
          description: List with listName will be created first and users will be
            imported in it (Mandatory if listIds is empty).
          example: ContactImport - 2017-05
          type: string
        folderId:
          description: Id of the folder where this new list shall be created (Mandatory
            if listName is not empty).
          example: 2
          format: int64
          type: integer
      type: object
    createSmsCampaign_recipients:
      properties:
        listIds:
          description: Lists Ids to send the campaign to. REQUIRED if scheduledAt
            is not empty
          items:
            description: List Id to send the campaign to
            example: 54
            format: int64
            type: integer
          type: array
        exclusionListIds:
          description: List ids which have to be excluded from a campaign
          items:
            description: List Id to exclude from the campaign
            example: 15
            format: int64
            type: integer
          type: array
      required:
      - listIds
      type: object
    getTransacSmsReport_reports_inner:
      example:
        date: 2017-03-17
        unsubscribed: 1
        hardBounces: 1
        blocked: 0
        replied: 2
        rejected: 1
        accepted: 85
        delivered: 85
        requests: 87
        softBounces: 1
      properties:
        date:
          description: Date for which statistics are retrieved
          example: 2017-03-17
          format: date
          type: string
        requests:
          description: Number of requests for the date
          example: 87
          format: int64
          type: integer
        delivered:
          description: Number of delivered SMS for the date
          example: 85
          format: int64
          type: integer
        hardBounces:
          description: Number of hardbounces for the date
          example: 1
          format: int64
          type: integer
        softBounces:
          description: Number of softbounces for the date
          example: 1
          format: int64
          type: integer
        blocked:
          description: Number of blocked contact for the date
          example: 0
          format: int64
          type: integer
        unsubscribed:
          description: Number of unsubscription for the date
          example: 1
          format: int64
          type: integer
        replied:
          description: Number of answered SMS for the date
          example: 2
          format: int64
          type: integer
        accepted:
          description: Number of accepted for the date
          example: 85
          format: int64
          type: integer
        rejected:
          description: Number of rejected for the date
          example: 1
          format: int64
          type: integer
      required:
      - accepted
      - blocked
      - date
      - delivered
      - hardBounces
      - rejected
      - replied
      - requests
      - softBounces
      - unsubscribed
      type: object
    sendEmail_attachment_inner:
      properties:
        content:
          description: Base64 encoded chunk data of the attachment generated on the
            fly
          example: b3JkZXIucGRm
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        name:
          description: Required for content. Name of the attachment
          example: myAttachment.png
          type: string
      required:
      - content
      - name
      type: object
    getTransacEmailContent_events_inner:
      example:
        name: delivered
        time: 2017-03-12T12:30:00Z
      properties:
        name:
          description: Name of the event that occurred on the sent email
          example: delivered
          type: string
        time:
          description: Time at which the event occurred
          example: 2017-03-12T12:30:00Z
          format: date-time
          type: string
      required:
      - name
      - time
      type: object
    getTransacEmailsList_transactionalEmails_inner:
      example:
        date: 2017-03-12T12:30:00Z
        subject: Summer Camp
        messageId: <201798300811.5700093@relay.domain.com>
        from: diana.doe@example.com
        templateId: 2
        uuid: 5a78c-209ok98262910-s99a341
        email: john.smith@example.com
        tags:
        - tag1
        - tag1
      properties:
        email:
          description: Email address to which transactional email has been sent
          example: john.smith@example.com
          format: email
          type: string
        subject:
          description: Subject of the sent email
          example: Summer Camp
          type: string
        templateId:
          description: Id of the template
          example: 2
          format: int64
          type: integer
        messageId:
          description: Message Id of the sent email
          example: <201798300811.5700093@relay.domain.com>
          type: string
        uuid:
          description: Unique id of the email sent to a particular contact
          example: 5a78c-209ok98262910-s99a341
          type: string
        date:
          description: Date on which transactional email was sent
          example: 2017-03-12T12:30:00Z
          format: date-time
          type: string
        from:
          description: Email address of the sender from which the email was sent
          example: diana.doe@example.com
          format: email
          type: string
        tags:
          description: Tags used for your email
          items:
            example: tag1
            type: string
          type: array
      required:
      - date
      - email
      - messageId
      - subject
      - uuid
      type: object
    abTestVersionClicks_inner:
      example:
        clickRate: 40%
        link: https://facbook.com/versionA
        clicksCount: 3
      properties:
        link:
          description: URL of the link
          example: https://facbook.com/versionA
          type: string
        clicksCount:
          description: Number of times a link is clicked
          example: 3
          format: int64
          type: integer
        clickRate:
          description: Percentage of clicks of link with respect to total clicks
          example: 40%
          type: string
      required:
      - clickRate
      - clicksCount
      - link
      type: object
  securitySchemes:
    api-key:
      description: The API key should be passed in the request headers as `api-key`
        for authentication.
      in: header
      name: api-key
      type: apiKey
x-samples-languages:
- curl
- node
- php
- go
- ruby
- python
- java
- csharp
x-original-swagger-version: "2.0"

