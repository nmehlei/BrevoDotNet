/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BrevoDotNet.Api;
using BrevoDotNet.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BrevoDotNet.Test.Api
{
    /// <summary>
    ///  Class for testing SMSCampaignsApi
    /// </summary>
    public sealed class SMSCampaignsApiTests : ApiTestsBase
    {
        private readonly ISMSCampaignsApi _instance;

        public SMSCampaignsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISMSCampaignsApi>();
        }

        /// <summary>
        /// Test CreateSmsCampaign
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateSmsCampaignAsyncTest()
        {
            CreateSmsCampaign createSmsCampaign = default!;
            var response = await _instance.CreateSmsCampaignAsync(createSmsCampaign);
            var model = response.Created();
            Assert.IsType<CreateModel>(model);
        }

        /// <summary>
        /// Test DeleteSmsCampaign
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSmsCampaignAsyncTest()
        {
            long campaignId = default!;
            await _instance.DeleteSmsCampaignAsync(campaignId);
        }

        /// <summary>
        /// Test GetSmsCampaign
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmsCampaignAsyncTest()
        {
            long campaignId = default!;
            var response = await _instance.GetSmsCampaignAsync(campaignId);
            var model = response.Ok();
            Assert.IsType<GetSmsCampaign>(model);
        }

        /// <summary>
        /// Test GetSmsCampaigns
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmsCampaignsAsyncTest()
        {
            Client.Option<string> status = default!;
            Client.Option<DateTime> startDate = default!;
            Client.Option<DateTime> endDate = default!;
            Client.Option<long> limit = default!;
            Client.Option<long> offset = default!;
            var response = await _instance.GetSmsCampaignsAsync(status, startDate, endDate, limit, offset);
            var model = response.Ok();
            Assert.IsType<GetSmsCampaigns>(model);
        }

        /// <summary>
        /// Test RequestSmsRecipientExport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RequestSmsRecipientExportAsyncTest()
        {
            long campaignId = default!;
            Client.Option<RequestSmsRecipientExport> recipientExport = default!;
            var response = await _instance.RequestSmsRecipientExportAsync(campaignId, recipientExport);
            var model = response.Accepted();
            Assert.IsType<CreatedProcessId>(model);
        }

        /// <summary>
        /// Test SendSmsCampaignNow
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSmsCampaignNowAsyncTest()
        {
            long campaignId = default!;
            await _instance.SendSmsCampaignNowAsync(campaignId);
        }

        /// <summary>
        /// Test SendSmsReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSmsReportAsyncTest()
        {
            long campaignId = default!;
            SendReport sendReport = default!;
            await _instance.SendSmsReportAsync(campaignId, sendReport);
        }

        /// <summary>
        /// Test SendTestSms
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTestSmsAsyncTest()
        {
            long campaignId = default!;
            SendTestSms phoneNumber = default!;
            await _instance.SendTestSmsAsync(campaignId, phoneNumber);
        }

        /// <summary>
        /// Test UpdateSmsCampaign
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSmsCampaignAsyncTest()
        {
            long campaignId = default!;
            UpdateSmsCampaign updateSmsCampaign = default!;
            await _instance.UpdateSmsCampaignAsync(campaignId, updateSmsCampaign);
        }

        /// <summary>
        /// Test UpdateSmsCampaignStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSmsCampaignStatusAsyncTest()
        {
            long campaignId = default!;
            UpdateCampaignStatus status = default!;
            await _instance.UpdateSmsCampaignStatusAsync(campaignId, status);
        }
    }
}
