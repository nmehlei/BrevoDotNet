/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BrevoDotNet.Api;
using BrevoDotNet.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BrevoDotNet.Test.Api
{
    /// <summary>
    ///  Class for testing SMTPApi
    /// </summary>
    public sealed class SMTPApiTests : ApiTestsBase
    {
        private readonly ISMTPApi _instance;

        public SMTPApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISMTPApi>();
        }

        /// <summary>
        /// Test BlockNewDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task BlockNewDomainAsyncTest()
        {
            BlockDomain blockDomain = default!;
            await _instance.BlockNewDomainAsync(blockDomain);
        }

        /// <summary>
        /// Test CreateSmtpTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateSmtpTemplateAsyncTest()
        {
            CreateSmtpTemplate smtpTemplate = default!;
            var response = await _instance.CreateSmtpTemplateAsync(smtpTemplate);
            var model = response.Created();
            Assert.IsType<CreateModel>(model);
        }

        /// <summary>
        /// Test DeleteBlockedDomain
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteBlockedDomainAsyncTest()
        {
            string domain = default!;
            await _instance.DeleteBlockedDomainAsync(domain);
        }

        /// <summary>
        /// Test DeleteHardbounces
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteHardbouncesAsyncTest()
        {
            Client.Option<DeleteHardbounces> deleteHardbounces = default!;
            await _instance.DeleteHardbouncesAsync(deleteHardbounces);
        }

        /// <summary>
        /// Test DeleteSmtpTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSmtpTemplateAsyncTest()
        {
            long templateId = default!;
            await _instance.DeleteSmtpTemplateAsync(templateId);
        }

        /// <summary>
        /// Test GetAggregatedSmtpReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAggregatedSmtpReportAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<int> days = default!;
            Client.Option<string> tag = default!;
            var response = await _instance.GetAggregatedSmtpReportAsync(startDate, endDate, days, tag);
            var model = response.Ok();
            Assert.IsType<GetAggregatedReport>(model);
        }

        /// <summary>
        /// Test GetBlockedDomains
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBlockedDomainsAsyncTest()
        {
            var response = await _instance.GetBlockedDomainsAsync();
            var model = response.Ok();
            Assert.IsType<GetBlockedDomains>(model);
        }

        /// <summary>
        /// Test GetEmailEventReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmailEventReportAsyncTest()
        {
            Client.Option<long> limit = default!;
            Client.Option<long> offset = default!;
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<int> days = default!;
            Client.Option<string> email = default!;
            Client.Option<string> varEvent = default!;
            Client.Option<string> tags = default!;
            Client.Option<string> messageId = default!;
            Client.Option<long> templateId = default!;
            var response = await _instance.GetEmailEventReportAsync(limit, offset, startDate, endDate, days, email, varEvent, tags, messageId, templateId);
            var model = response.Ok();
            Assert.IsType<GetEmailEventReport>(model);
        }

        /// <summary>
        /// Test GetSmtpReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmtpReportAsyncTest()
        {
            Client.Option<long> limit = default!;
            Client.Option<long> offset = default!;
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<int> days = default!;
            Client.Option<string> tag = default!;
            var response = await _instance.GetSmtpReportAsync(limit, offset, startDate, endDate, days, tag);
            var model = response.Ok();
            Assert.IsType<GetReports>(model);
        }

        /// <summary>
        /// Test GetSmtpTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmtpTemplateAsyncTest()
        {
            long templateId = default!;
            var response = await _instance.GetSmtpTemplateAsync(templateId);
            var model = response.Ok();
            Assert.IsType<GetSmtpTemplateOverview>(model);
        }

        /// <summary>
        /// Test GetSmtpTemplates
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSmtpTemplatesAsyncTest()
        {
            Client.Option<bool> templateStatus = default!;
            Client.Option<long> limit = default!;
            Client.Option<long> offset = default!;
            var response = await _instance.GetSmtpTemplatesAsync(templateStatus, limit, offset);
            var model = response.Ok();
            Assert.IsType<GetSmtpTemplates>(model);
        }

        /// <summary>
        /// Test GetTransacBlockedContacts
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTransacBlockedContactsAsyncTest()
        {
            Client.Option<string> startDate = default!;
            Client.Option<string> endDate = default!;
            Client.Option<long> limit = default!;
            Client.Option<long> offset = default!;
            Client.Option<List<string>> senders = default!;
            var response = await _instance.GetTransacBlockedContactsAsync(startDate, endDate, limit, offset, senders);
            var model = response.Ok();
            Assert.IsType<GetTransacBlockedContacts>(model);
        }

        /// <summary>
        /// Test GetTransacEmailContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTransacEmailContentAsyncTest()
        {
            string uuid = default!;
            var response = await _instance.GetTransacEmailContentAsync(uuid);
            var model = response.Ok();
            Assert.IsType<GetTransacEmailContent>(model);
        }

        /// <summary>
        /// Test GetTransacEmailsList
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTransacEmailsListAsyncTest()
        {
            Client.Option<string> email = default!;
            Client.Option<long> templateId = default!;
            Client.Option<string> messageId = default!;
            Client.Option<DateOnly> startDate = default!;
            Client.Option<DateOnly> endDate = default!;
            var response = await _instance.GetTransacEmailsListAsync(email, templateId, messageId, startDate, endDate);
            var model = response.Ok();
            Assert.IsType<GetTransacEmailsList>(model);
        }

        /// <summary>
        /// Test SendTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTemplateAsyncTest()
        {
            long templateId = default!;
            SendEmail sendEmail = default!;
            var response = await _instance.SendTemplateAsync(templateId, sendEmail);
            var model = response.Created();
            Assert.IsType<SendTemplateEmail>(model);
        }

        /// <summary>
        /// Test SendTestTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTestTemplateAsyncTest()
        {
            long templateId = default!;
            SendTestEmail sendTestEmail = default!;
            await _instance.SendTestTemplateAsync(templateId, sendTestEmail);
        }

        /// <summary>
        /// Test SendTransacEmail
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendTransacEmailAsyncTest()
        {
            SendSmtpEmail sendSmtpEmail = default!;
            var response = await _instance.SendTransacEmailAsync(sendSmtpEmail);
            var model = response.Created();
            Assert.IsType<CreateSmtpEmail>(model);
        }

        /// <summary>
        /// Test SmtpBlockedContactsEmailDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SmtpBlockedContactsEmailDeleteAsyncTest()
        {
            string email = default!;
            await _instance.SmtpBlockedContactsEmailDeleteAsync(email);
        }

        /// <summary>
        /// Test SmtpLogMessageIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SmtpLogMessageIdDeleteAsyncTest()
        {
            string messageId = default!;
            await _instance.SmtpLogMessageIdDeleteAsync(messageId);
        }

        /// <summary>
        /// Test UpdateSmtpTemplate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateSmtpTemplateAsyncTest()
        {
            long templateId = default!;
            UpdateSmtpTemplate smtpTemplate = default!;
            await _instance.UpdateSmtpTemplateAsync(templateId, smtpTemplate);
        }
    }
}
