/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using BrevoDotNet.Client;
using BrevoDotNet.Api;
using BrevoDotNet.Extensions;
using Xunit;

namespace BrevoDotNet.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.Api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var accountApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAccountApi>();
            Assert.True(accountApi.HttpClient.BaseAddress != null);

            var attributesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAttributesApi>();
            Assert.True(attributesApi.HttpClient.BaseAddress != null);

            var contactsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactsApi>();
            Assert.True(contactsApi.HttpClient.BaseAddress != null);

            var emailCampaignsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmailCampaignsApi>();
            Assert.True(emailCampaignsApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var listsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IListsApi>();
            Assert.True(listsApi.HttpClient.BaseAddress != null);

            var processApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProcessApi>();
            Assert.True(processApi.HttpClient.BaseAddress != null);

            var sMSCampaignsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISMSCampaignsApi>();
            Assert.True(sMSCampaignsApi.HttpClient.BaseAddress != null);

            var sMTPApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISMTPApi>();
            Assert.True(sMTPApi.HttpClient.BaseAddress != null);

            var sendersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISendersApi>();
            Assert.True(sendersApi.HttpClient.BaseAddress != null);

            var transactionalSMSApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITransactionalSMSApi>();
            Assert.True(transactionalSMSApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);

            var whatsAppCampaignsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWhatsAppCampaignsApi>();
            Assert.True(whatsAppCampaignsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var accountApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAccountApi>();
            Assert.True(accountApi.HttpClient.BaseAddress != null);

            var attributesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAttributesApi>();
            Assert.True(attributesApi.HttpClient.BaseAddress != null);

            var contactsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactsApi>();
            Assert.True(contactsApi.HttpClient.BaseAddress != null);

            var emailCampaignsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmailCampaignsApi>();
            Assert.True(emailCampaignsApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var listsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IListsApi>();
            Assert.True(listsApi.HttpClient.BaseAddress != null);

            var processApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProcessApi>();
            Assert.True(processApi.HttpClient.BaseAddress != null);

            var sMSCampaignsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISMSCampaignsApi>();
            Assert.True(sMSCampaignsApi.HttpClient.BaseAddress != null);

            var sMTPApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISMTPApi>();
            Assert.True(sMTPApi.HttpClient.BaseAddress != null);

            var sendersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISendersApi>();
            Assert.True(sendersApi.HttpClient.BaseAddress != null);

            var transactionalSMSApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITransactionalSMSApi>();
            Assert.True(transactionalSMSApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);

            var whatsAppCampaignsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWhatsAppCampaignsApi>();
            Assert.True(whatsAppCampaignsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var accountApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAccountApi>();
            Assert.True(accountApi.HttpClient.BaseAddress != null);
            
            var attributesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAttributesApi>();
            Assert.True(attributesApi.HttpClient.BaseAddress != null);
            
            var contactsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactsApi>();
            Assert.True(contactsApi.HttpClient.BaseAddress != null);
            
            var emailCampaignsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmailCampaignsApi>();
            Assert.True(emailCampaignsApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var listsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IListsApi>();
            Assert.True(listsApi.HttpClient.BaseAddress != null);
            
            var processApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProcessApi>();
            Assert.True(processApi.HttpClient.BaseAddress != null);
            
            var sMSCampaignsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISMSCampaignsApi>();
            Assert.True(sMSCampaignsApi.HttpClient.BaseAddress != null);
            
            var sMTPApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISMTPApi>();
            Assert.True(sMTPApi.HttpClient.BaseAddress != null);
            
            var sendersApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISendersApi>();
            Assert.True(sendersApi.HttpClient.BaseAddress != null);
            
            var transactionalSMSApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITransactionalSMSApi>();
            Assert.True(transactionalSMSApi.HttpClient.BaseAddress != null);
            
            var webhooksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
            
            var whatsAppCampaignsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWhatsAppCampaignsApi>();
            Assert.True(whatsAppCampaignsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var accountApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAccountApi>();
            Assert.True(accountApi.HttpClient.BaseAddress != null);

            var attributesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAttributesApi>();
            Assert.True(attributesApi.HttpClient.BaseAddress != null);

            var contactsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactsApi>();
            Assert.True(contactsApi.HttpClient.BaseAddress != null);

            var emailCampaignsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmailCampaignsApi>();
            Assert.True(emailCampaignsApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var listsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IListsApi>();
            Assert.True(listsApi.HttpClient.BaseAddress != null);

            var processApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProcessApi>();
            Assert.True(processApi.HttpClient.BaseAddress != null);

            var sMSCampaignsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISMSCampaignsApi>();
            Assert.True(sMSCampaignsApi.HttpClient.BaseAddress != null);

            var sMTPApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISMTPApi>();
            Assert.True(sMTPApi.HttpClient.BaseAddress != null);

            var sendersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISendersApi>();
            Assert.True(sendersApi.HttpClient.BaseAddress != null);

            var transactionalSMSApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITransactionalSMSApi>();
            Assert.True(transactionalSMSApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);

            var whatsAppCampaignsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWhatsAppCampaignsApi>();
            Assert.True(whatsAppCampaignsApi.HttpClient.BaseAddress != null);
        }
    }
}
