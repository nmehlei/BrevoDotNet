// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITransactionalSMSApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TransactionalSMSApiEvents Events { get; }

        /// <summary>
        /// Get all your SMS activity (unaggregated events)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="phoneNumber">Filter the report for a specific phone number (optional)</param>
        /// <param name="varEvent">Filter the report for specific events (optional)</param>
        /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsEventsApiResponse"/>&gt;</returns>
        Task<IGetSmsEventsApiResponse> GetSmsEventsAsync(Option<long> limit = default, Option<string> startDate = default, Option<string> endDate = default, Option<long> offset = default, Option<int> days = default, Option<string> phoneNumber = default, Option<string> varEvent = default, Option<string> tags = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all your SMS activity (unaggregated events)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="phoneNumber">Filter the report for a specific phone number (optional)</param>
        /// <param name="varEvent">Filter the report for specific events (optional)</param>
        /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsEventsApiResponse"/>?&gt;</returns>
        Task<IGetSmsEventsApiResponse?> GetSmsEventsOrDefaultAsync(Option<long> limit = default, Option<string> startDate = default, Option<string> endDate = default, Option<long> offset = default, Option<int> days = default, Option<string> phoneNumber = default, Option<string> varEvent = default, Option<string> tags = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get your SMS activity aggregated over a period of time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacAggregatedSmsReportApiResponse"/>&gt;</returns>
        Task<IGetTransacAggregatedSmsReportApiResponse> GetTransacAggregatedSmsReportAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get your SMS activity aggregated over a period of time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacAggregatedSmsReportApiResponse"/>?&gt;</returns>
        Task<IGetTransacAggregatedSmsReportApiResponse?> GetTransacAggregatedSmsReportOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get your SMS activity aggregated per day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacSmsReportApiResponse"/>&gt;</returns>
        Task<IGetTransacSmsReportApiResponse> GetTransacSmsReportAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get your SMS activity aggregated per day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacSmsReportApiResponse"/>?&gt;</returns>
        Task<IGetTransacSmsReportApiResponse?> GetTransacSmsReportOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send SMS message to a mobile number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTransacSms">Values to send a transactional SMS</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTransacSmsApiResponse"/>&gt;</returns>
        Task<ISendTransacSmsApiResponse> SendTransacSmsAsync(SendTransacSms sendTransacSms, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send SMS message to a mobile number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sendTransacSms">Values to send a transactional SMS</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTransacSmsApiResponse"/>?&gt;</returns>
        Task<ISendTransacSmsApiResponse?> SendTransacSmsOrDefaultAsync(SendTransacSms sendTransacSms, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetSmsEventsApiResponse"/>
    /// </summary>
    public interface IGetSmsEventsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetSmsEventReport?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetTransacAggregatedSmsReportApiResponse"/>
    /// </summary>
    public interface IGetTransacAggregatedSmsReportApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetTransacAggregatedSmsReport?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetTransacSmsReportApiResponse"/>
    /// </summary>
    public interface IGetTransacSmsReportApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetTransacSmsReport?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ISendTransacSmsApiResponse"/>
    /// </summary>
    public interface ISendTransacSmsApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.SendSms?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, IPaymentRequired<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 402 PaymentRequired
        /// </summary>
        /// <returns></returns>
        bool IsPaymentRequired { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionalSMSApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSmsEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSmsEvents;

        internal void ExecuteOnGetSmsEvents(TransactionalSMSApi.GetSmsEventsApiResponse apiResponse)
        {
            OnGetSmsEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSmsEvents(Exception exception)
        {
            OnErrorGetSmsEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTransacAggregatedSmsReport;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTransacAggregatedSmsReport;

        internal void ExecuteOnGetTransacAggregatedSmsReport(TransactionalSMSApi.GetTransacAggregatedSmsReportApiResponse apiResponse)
        {
            OnGetTransacAggregatedSmsReport?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTransacAggregatedSmsReport(Exception exception)
        {
            OnErrorGetTransacAggregatedSmsReport?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTransacSmsReport;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTransacSmsReport;

        internal void ExecuteOnGetTransacSmsReport(TransactionalSMSApi.GetTransacSmsReportApiResponse apiResponse)
        {
            OnGetTransacSmsReport?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTransacSmsReport(Exception exception)
        {
            OnErrorGetTransacSmsReport?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendTransacSms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendTransacSms;

        internal void ExecuteOnSendTransacSms(TransactionalSMSApi.SendTransacSmsApiResponse apiResponse)
        {
            OnSendTransacSms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendTransacSms(Exception exception)
        {
            OnErrorSendTransacSms?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TransactionalSMSApi : ITransactionalSMSApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TransactionalSMSApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TransactionalSMSApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionalSMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionalSMSApi(ILogger<TransactionalSMSApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TransactionalSMSApiEvents transactionalSMSApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TransactionalSMSApi>();
            HttpClient = httpClient;
            Events = transactionalSMSApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetSmsEvents(ref Option<long> limit, ref Option<string> startDate, ref Option<string> endDate, ref Option<long> offset, ref Option<int> days, ref Option<string> phoneNumber, ref Option<string> varEvent, ref Option<string> tags, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="varEvent"></param>
        /// <param name="tags"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetSmsEvents(Option<string> startDate, Option<string> endDate, Option<string> phoneNumber, Option<string> varEvent, Option<string> tags, Option<string> sort)
        {
            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber));

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent));

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="offset"></param>
        /// <param name="days"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="varEvent"></param>
        /// <param name="tags"></param>
        /// <param name="sort"></param>
        private void AfterGetSmsEventsDefaultImplementation(IGetSmsEventsApiResponse apiResponseLocalVar, Option<long> limit, Option<string> startDate, Option<string> endDate, Option<long> offset, Option<int> days, Option<string> phoneNumber, Option<string> varEvent, Option<string> tags, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetSmsEvents(ref suppressDefaultLog, apiResponseLocalVar, limit, startDate, endDate, offset, days, phoneNumber, varEvent, tags, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="offset"></param>
        /// <param name="days"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="varEvent"></param>
        /// <param name="tags"></param>
        /// <param name="sort"></param>
        partial void AfterGetSmsEvents(ref bool suppressDefaultLog, IGetSmsEventsApiResponse apiResponseLocalVar, Option<long> limit, Option<string> startDate, Option<string> endDate, Option<long> offset, Option<int> days, Option<string> phoneNumber, Option<string> varEvent, Option<string> tags, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="offset"></param>
        /// <param name="days"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="varEvent"></param>
        /// <param name="tags"></param>
        /// <param name="sort"></param>
        private void OnErrorGetSmsEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<string> startDate, Option<string> endDate, Option<long> offset, Option<int> days, Option<string> phoneNumber, Option<string> varEvent, Option<string> tags, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSmsEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, startDate, endDate, offset, days, phoneNumber, varEvent, tags, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="offset"></param>
        /// <param name="days"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="varEvent"></param>
        /// <param name="tags"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetSmsEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<string> startDate, Option<string> endDate, Option<long> offset, Option<int> days, Option<string> phoneNumber, Option<string> varEvent, Option<string> tags, Option<string> sort);

        /// <summary>
        /// Get all your SMS activity (unaggregated events) 
        /// </summary>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="phoneNumber">Filter the report for a specific phone number (optional)</param>
        /// <param name="varEvent">Filter the report for specific events (optional)</param>
        /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsEventsApiResponse"/>&gt;</returns>
        public async Task<IGetSmsEventsApiResponse?> GetSmsEventsOrDefaultAsync(Option<long> limit = default, Option<string> startDate = default, Option<string> endDate = default, Option<long> offset = default, Option<int> days = default, Option<string> phoneNumber = default, Option<string> varEvent = default, Option<string> tags = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSmsEventsAsync(limit, startDate, endDate, offset, days, phoneNumber, varEvent, tags, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all your SMS activity (unaggregated events) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="phoneNumber">Filter the report for a specific phone number (optional)</param>
        /// <param name="varEvent">Filter the report for specific events (optional)</param>
        /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSmsEventsApiResponse"/>&gt;</returns>
        public async Task<IGetSmsEventsApiResponse> GetSmsEventsAsync(Option<long> limit = default, Option<string> startDate = default, Option<string> endDate = default, Option<long> offset = default, Option<int> days = default, Option<string> phoneNumber = default, Option<string> varEvent = default, Option<string> tags = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSmsEvents(startDate, endDate, phoneNumber, varEvent, tags, sort);

                FormatGetSmsEvents(ref limit, ref startDate, ref endDate, ref offset, ref days, ref phoneNumber, ref varEvent, ref tags, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/transactionalSMS/statistics/events"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/transactionalSMS/statistics/events");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (days.IsSet)
                        parseQueryStringLocalVar["days"] = ClientUtils.ParameterToString(days.Value);

                    if (phoneNumber.IsSet)
                        parseQueryStringLocalVar["phoneNumber"] = ClientUtils.ParameterToString(phoneNumber.Value);

                    if (varEvent.IsSet)
                        parseQueryStringLocalVar["event"] = ClientUtils.ParameterToString(varEvent.Value);

                    if (tags.IsSet)
                        parseQueryStringLocalVar["tags"] = ClientUtils.ParameterToString(tags.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSmsEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSmsEventsApiResponse>();

                        GetSmsEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/transactionalSMS/statistics/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSmsEventsDefaultImplementation(apiResponseLocalVar, limit, startDate, endDate, offset, days, phoneNumber, varEvent, tags, sort);

                        Events.ExecuteOnGetSmsEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSmsEventsDefaultImplementation(e, "/transactionalSMS/statistics/events", uriBuilderLocalVar.Path, limit, startDate, endDate, offset, days, phoneNumber, varEvent, tags, sort);
                Events.ExecuteOnErrorGetSmsEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSmsEventsApiResponse"/>
        /// </summary>
        public partial class GetSmsEventsApiResponse : BrevoDotNet.Client.ApiResponse, IGetSmsEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSmsEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSmsEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSmsEventsApiResponse(ILogger<GetSmsEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetSmsEventReport? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetSmsEventReport>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetSmsEventReport? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTransacAggregatedSmsReport(ref Option<string> startDate, ref Option<string> endDate, ref Option<int> days, ref Option<string> tag);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        private void ValidateGetTransacAggregatedSmsReport(Option<string> startDate, Option<string> endDate, Option<string> tag)
        {
            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        private void AfterGetTransacAggregatedSmsReportDefaultImplementation(IGetTransacAggregatedSmsReportApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag)
        {
            bool suppressDefaultLog = false;
            AfterGetTransacAggregatedSmsReport(ref suppressDefaultLog, apiResponseLocalVar, startDate, endDate, days, tag);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        partial void AfterGetTransacAggregatedSmsReport(ref bool suppressDefaultLog, IGetTransacAggregatedSmsReportApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        private void OnErrorGetTransacAggregatedSmsReportDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTransacAggregatedSmsReport(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, startDate, endDate, days, tag);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        partial void OnErrorGetTransacAggregatedSmsReport(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag);

        /// <summary>
        /// Get your SMS activity aggregated over a period of time 
        /// </summary>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacAggregatedSmsReportApiResponse"/>&gt;</returns>
        public async Task<IGetTransacAggregatedSmsReportApiResponse?> GetTransacAggregatedSmsReportOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTransacAggregatedSmsReportAsync(startDate, endDate, days, tag, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get your SMS activity aggregated over a period of time 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacAggregatedSmsReportApiResponse"/>&gt;</returns>
        public async Task<IGetTransacAggregatedSmsReportApiResponse> GetTransacAggregatedSmsReportAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTransacAggregatedSmsReport(startDate, endDate, tag);

                FormatGetTransacAggregatedSmsReport(ref startDate, ref endDate, ref days, ref tag);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/transactionalSMS/statistics/aggregatedReport"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/transactionalSMS/statistics/aggregatedReport");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (days.IsSet)
                        parseQueryStringLocalVar["days"] = ClientUtils.ParameterToString(days.Value);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTransacAggregatedSmsReportApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTransacAggregatedSmsReportApiResponse>();

                        GetTransacAggregatedSmsReportApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/transactionalSMS/statistics/aggregatedReport", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTransacAggregatedSmsReportDefaultImplementation(apiResponseLocalVar, startDate, endDate, days, tag);

                        Events.ExecuteOnGetTransacAggregatedSmsReport(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTransacAggregatedSmsReportDefaultImplementation(e, "/transactionalSMS/statistics/aggregatedReport", uriBuilderLocalVar.Path, startDate, endDate, days, tag);
                Events.ExecuteOnErrorGetTransacAggregatedSmsReport(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTransacAggregatedSmsReportApiResponse"/>
        /// </summary>
        public partial class GetTransacAggregatedSmsReportApiResponse : BrevoDotNet.Client.ApiResponse, IGetTransacAggregatedSmsReportApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTransacAggregatedSmsReportApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTransacAggregatedSmsReportApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTransacAggregatedSmsReportApiResponse(ILogger<GetTransacAggregatedSmsReportApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetTransacAggregatedSmsReport? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetTransacAggregatedSmsReport>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetTransacAggregatedSmsReport? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTransacSmsReport(ref Option<string> startDate, ref Option<string> endDate, ref Option<int> days, ref Option<string> tag, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="tag"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetTransacSmsReport(Option<string> startDate, Option<string> endDate, Option<string> tag, Option<string> sort)
        {
            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        /// <param name="sort"></param>
        private void AfterGetTransacSmsReportDefaultImplementation(IGetTransacSmsReportApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetTransacSmsReport(ref suppressDefaultLog, apiResponseLocalVar, startDate, endDate, days, tag, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        /// <param name="sort"></param>
        partial void AfterGetTransacSmsReport(ref bool suppressDefaultLog, IGetTransacSmsReportApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        /// <param name="sort"></param>
        private void OnErrorGetTransacSmsReportDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTransacSmsReport(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, startDate, endDate, days, tag, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="days"></param>
        /// <param name="tag"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetTransacSmsReport(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<int> days, Option<string> tag, Option<string> sort);

        /// <summary>
        /// Get your SMS activity aggregated per day 
        /// </summary>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacSmsReportApiResponse"/>&gt;</returns>
        public async Task<IGetTransacSmsReportApiResponse?> GetTransacSmsReportOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTransacSmsReportAsync(startDate, endDate, days, tag, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get your SMS activity aggregated per day 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)</param>
        /// <param name="days">Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39; (optional)</param>
        /// <param name="tag">Filter on a tag (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransacSmsReportApiResponse"/>&gt;</returns>
        public async Task<IGetTransacSmsReportApiResponse> GetTransacSmsReportAsync(Option<string> startDate = default, Option<string> endDate = default, Option<int> days = default, Option<string> tag = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTransacSmsReport(startDate, endDate, tag, sort);

                FormatGetTransacSmsReport(ref startDate, ref endDate, ref days, ref tag, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/transactionalSMS/statistics/reports"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/transactionalSMS/statistics/reports");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (days.IsSet)
                        parseQueryStringLocalVar["days"] = ClientUtils.ParameterToString(days.Value);

                    if (tag.IsSet)
                        parseQueryStringLocalVar["tag"] = ClientUtils.ParameterToString(tag.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTransacSmsReportApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTransacSmsReportApiResponse>();

                        GetTransacSmsReportApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/transactionalSMS/statistics/reports", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTransacSmsReportDefaultImplementation(apiResponseLocalVar, startDate, endDate, days, tag, sort);

                        Events.ExecuteOnGetTransacSmsReport(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTransacSmsReportDefaultImplementation(e, "/transactionalSMS/statistics/reports", uriBuilderLocalVar.Path, startDate, endDate, days, tag, sort);
                Events.ExecuteOnErrorGetTransacSmsReport(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTransacSmsReportApiResponse"/>
        /// </summary>
        public partial class GetTransacSmsReportApiResponse : BrevoDotNet.Client.ApiResponse, IGetTransacSmsReportApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTransacSmsReportApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTransacSmsReportApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTransacSmsReportApiResponse(ILogger<GetTransacSmsReportApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetTransacSmsReport? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetTransacSmsReport>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetTransacSmsReport? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendTransacSms(SendTransacSms sendTransacSms);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendTransacSms"></param>
        /// <returns></returns>
        private void ValidateSendTransacSms(SendTransacSms sendTransacSms)
        {
            if (sendTransacSms == null)
                throw new ArgumentNullException(nameof(sendTransacSms));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sendTransacSms"></param>
        private void AfterSendTransacSmsDefaultImplementation(ISendTransacSmsApiResponse apiResponseLocalVar, SendTransacSms sendTransacSms)
        {
            bool suppressDefaultLog = false;
            AfterSendTransacSms(ref suppressDefaultLog, apiResponseLocalVar, sendTransacSms);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sendTransacSms"></param>
        partial void AfterSendTransacSms(ref bool suppressDefaultLog, ISendTransacSmsApiResponse apiResponseLocalVar, SendTransacSms sendTransacSms);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sendTransacSms"></param>
        private void OnErrorSendTransacSmsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SendTransacSms sendTransacSms)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendTransacSms(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sendTransacSms);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sendTransacSms"></param>
        partial void OnErrorSendTransacSms(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SendTransacSms sendTransacSms);

        /// <summary>
        /// Send SMS message to a mobile number 
        /// </summary>
        /// <param name="sendTransacSms">Values to send a transactional SMS</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTransacSmsApiResponse"/>&gt;</returns>
        public async Task<ISendTransacSmsApiResponse?> SendTransacSmsOrDefaultAsync(SendTransacSms sendTransacSms, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendTransacSmsAsync(sendTransacSms, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send SMS message to a mobile number 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendTransacSms">Values to send a transactional SMS</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTransacSmsApiResponse"/>&gt;</returns>
        public async Task<ISendTransacSmsApiResponse> SendTransacSmsAsync(SendTransacSms sendTransacSms, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendTransacSms(sendTransacSms);

                FormatSendTransacSms(sendTransacSms);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/transactionalSMS/sms"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/transactionalSMS/sms");

                    httpRequestMessageLocalVar.Content = (sendTransacSms as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendTransacSms, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendTransacSmsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendTransacSmsApiResponse>();

                        SendTransacSmsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/transactionalSMS/sms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendTransacSmsDefaultImplementation(apiResponseLocalVar, sendTransacSms);

                        Events.ExecuteOnSendTransacSms(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendTransacSmsDefaultImplementation(e, "/transactionalSMS/sms", uriBuilderLocalVar.Path, sendTransacSms);
                Events.ExecuteOnErrorSendTransacSms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendTransacSmsApiResponse"/>
        /// </summary>
        public partial class SendTransacSmsApiResponse : BrevoDotNet.Client.ApiResponse, ISendTransacSmsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendTransacSmsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendTransacSmsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendTransacSmsApiResponse(ILogger<SendTransacSmsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.SendSms? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.SendSms>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.SendSms? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public bool IsPaymentRequired => 402 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? PaymentRequired()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsPaymentRequired
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryPaymentRequired([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = PaymentRequired();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)402);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
