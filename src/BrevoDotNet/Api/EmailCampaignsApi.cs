// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmailCampaignsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmailCampaignsApiEvents Events { get; }

        /// <summary>
        /// Create an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaigns">Values to create a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmailCampaignApiResponse"/>&gt;</returns>
        Task<ICreateEmailCampaignApiResponse> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="emailCampaigns">Values to create a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmailCampaignApiResponse"/>?&gt;</returns>
        Task<ICreateEmailCampaignApiResponse?> CreateEmailCampaignOrDefaultAsync(CreateEmailCampaign emailCampaigns, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmailCampaignApiResponse"/>&gt;</returns>
        Task<IDeleteEmailCampaignApiResponse> DeleteEmailCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmailCampaignApiResponse"/>?&gt;</returns>
        Task<IDeleteEmailCampaignApiResponse?> DeleteEmailCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export the recipients of an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="recipientExport">Values to send for a recipient export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmailExportRecipientsApiResponse"/>&gt;</returns>
        Task<IEmailExportRecipientsApiResponse> EmailExportRecipientsAsync(long campaignId, Option<EmailExportRecipients> recipientExport = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export the recipients of an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="recipientExport">Values to send for a recipient export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmailExportRecipientsApiResponse"/>?&gt;</returns>
        Task<IEmailExportRecipientsApiResponse?> EmailExportRecipientsOrDefaultAsync(long campaignId, Option<EmailExportRecipients> recipientExport = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an A/B test email campaign results
        /// </summary>
        /// <remarks>
        /// Obtain winning version of an A/B test email campaign
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the A/B test campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAbTestCampaignResultApiResponse"/>&gt;</returns>
        Task<IGetAbTestCampaignResultApiResponse> GetAbTestCampaignResultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an A/B test email campaign results
        /// </summary>
        /// <remarks>
        /// Obtain winning version of an A/B test email campaign
        /// </remarks>
        /// <param name="campaignId">Id of the A/B test campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAbTestCampaignResultApiResponse"/>?&gt;</returns>
        Task<IGetAbTestCampaignResultApiResponse?> GetAbTestCampaignResultOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an email campaign report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignApiResponse"/>&gt;</returns>
        Task<IGetEmailCampaignApiResponse> GetEmailCampaignAsync(long campaignId, Option<string> statistics = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an email campaign report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignApiResponse"/>?&gt;</returns>
        Task<IGetEmailCampaignApiResponse?> GetEmailCampaignOrDefaultAsync(long campaignId, Option<string> statistics = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter on the type of the campaigns (optional)</param>
        /// <param name="status">Filter on the status of the campaign (optional)</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 500)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignsApiResponse"/>&gt;</returns>
        Task<IGetEmailCampaignsApiResponse> GetEmailCampaignsAsync(Option<string> type = default, Option<string> status = default, Option<string> statistics = default, Option<DateTime> startDate = default, Option<DateTime> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<bool> excludeHtmlContent = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created email campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="type">Filter on the type of the campaigns (optional)</param>
        /// <param name="status">Filter on the status of the campaign (optional)</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 500)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignsApiResponse"/>?&gt;</returns>
        Task<IGetEmailCampaignsApiResponse?> GetEmailCampaignsOrDefaultAsync(Option<string> type = default, Option<string> status = default, Option<string> statistics = default, Option<DateTime> startDate = default, Option<DateTime> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<bool> excludeHtmlContent = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a shared template url
        /// </summary>
        /// <remarks>
        /// Get a unique URL to share &amp; import an email template from one Sendinblue account to another.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign or template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedTemplateUrlApiResponse"/>&gt;</returns>
        Task<IGetSharedTemplateUrlApiResponse> GetSharedTemplateUrlAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a shared template url
        /// </summary>
        /// <remarks>
        /// Get a unique URL to share &amp; import an email template from one Sendinblue account to another.
        /// </remarks>
        /// <param name="campaignId">Id of the campaign or template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedTemplateUrlApiResponse"/>?&gt;</returns>
        Task<IGetSharedTemplateUrlApiResponse?> GetSharedTemplateUrlOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an email campaign immediately, based on campaignId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailCampaignNowApiResponse"/>&gt;</returns>
        Task<ISendEmailCampaignNowApiResponse> SendEmailCampaignNowAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an email campaign immediately, based on campaignId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailCampaignNowApiResponse"/>?&gt;</returns>
        Task<ISendEmailCampaignNowApiResponse?> SendEmailCampaignNowOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send the report of a campaign
        /// </summary>
        /// <remarks>
        /// A PDF will be sent to the specified email addresses
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="sendReport">Values for send a report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendReportApiResponse"/>&gt;</returns>
        Task<ISendReportApiResponse> SendReportAsync(long campaignId, SendReport sendReport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send the report of a campaign
        /// </summary>
        /// <remarks>
        /// A PDF will be sent to the specified email addresses
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="sendReport">Values for send a report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendReportApiResponse"/>?&gt;</returns>
        Task<ISendReportApiResponse?> SendReportOrDefaultAsync(long campaignId, SendReport sendReport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an email campaign to your test list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailTo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestEmailApiResponse"/>&gt;</returns>
        Task<ISendTestEmailApiResponse> SendTestEmailAsync(long campaignId, SendTestEmail emailTo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send an email campaign to your test list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailTo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestEmailApiResponse"/>?&gt;</returns>
        Task<ISendTestEmailApiResponse?> SendTestEmailOrDefaultAsync(long campaignId, SendTestEmail emailTo, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an email campaign status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCampaignStatusApiResponse"/>&gt;</returns>
        Task<IUpdateCampaignStatusApiResponse> UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an email campaign status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCampaignStatusApiResponse"/>?&gt;</returns>
        Task<IUpdateCampaignStatusApiResponse?> UpdateCampaignStatusOrDefaultAsync(long campaignId, UpdateCampaignStatus status, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailCampaign">Values to update a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmailCampaignApiResponse"/>&gt;</returns>
        Task<IUpdateEmailCampaignApiResponse> UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an email campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailCampaign">Values to update a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmailCampaignApiResponse"/>?&gt;</returns>
        Task<IUpdateEmailCampaignApiResponse?> UpdateEmailCampaignOrDefaultAsync(long campaignId, UpdateEmailCampaign emailCampaign, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload an image to your account&#39;s image gallery
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadImage">Parameters to upload an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadImageToGalleryApiResponse"/>&gt;</returns>
        Task<IUploadImageToGalleryApiResponse> UploadImageToGalleryAsync(UploadImageToGallery uploadImage, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload an image to your account&#39;s image gallery
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="uploadImage">Parameters to upload an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadImageToGalleryApiResponse"/>?&gt;</returns>
        Task<IUploadImageToGalleryApiResponse?> UploadImageToGalleryOrDefaultAsync(UploadImageToGallery uploadImage, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateEmailCampaignApiResponse"/>
    /// </summary>
    public interface ICreateEmailCampaignApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.CreateModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteEmailCampaignApiResponse"/>
    /// </summary>
    public interface IDeleteEmailCampaignApiResponse : BrevoDotNet.Client.IApiResponse, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IEmailExportRecipientsApiResponse"/>
    /// </summary>
    public interface IEmailExportRecipientsApiResponse : BrevoDotNet.Client.IApiResponse, IAccepted<BrevoDotNet.Model.CreatedProcessId?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetAbTestCampaignResultApiResponse"/>
    /// </summary>
    public interface IGetAbTestCampaignResultApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.AbTestCampaignResult?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmailCampaignApiResponse"/>
    /// </summary>
    public interface IGetEmailCampaignApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetEmailCampaign?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmailCampaignsApiResponse"/>
    /// </summary>
    public interface IGetEmailCampaignsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetEmailCampaigns?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetSharedTemplateUrlApiResponse"/>
    /// </summary>
    public interface IGetSharedTemplateUrlApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetSharedTemplateUrl?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IMethodNotAllowed<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ISendEmailCampaignNowApiResponse"/>
    /// </summary>
    public interface ISendEmailCampaignNowApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, IPaymentRequired<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 402 PaymentRequired
        /// </summary>
        /// <returns></returns>
        bool IsPaymentRequired { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISendReportApiResponse"/>
    /// </summary>
    public interface ISendReportApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISendTestEmailApiResponse"/>
    /// </summary>
    public interface ISendTestEmailApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.PostSendFailed?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateCampaignStatusApiResponse"/>
    /// </summary>
    public interface IUpdateCampaignStatusApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateEmailCampaignApiResponse"/>
    /// </summary>
    public interface IUpdateEmailCampaignApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUploadImageToGalleryApiResponse"/>
    /// </summary>
    public interface IUploadImageToGalleryApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmailCampaignsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateEmailCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateEmailCampaign;

        internal void ExecuteOnCreateEmailCampaign(EmailCampaignsApi.CreateEmailCampaignApiResponse apiResponse)
        {
            OnCreateEmailCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateEmailCampaign(Exception exception)
        {
            OnErrorCreateEmailCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteEmailCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteEmailCampaign;

        internal void ExecuteOnDeleteEmailCampaign(EmailCampaignsApi.DeleteEmailCampaignApiResponse apiResponse)
        {
            OnDeleteEmailCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteEmailCampaign(Exception exception)
        {
            OnErrorDeleteEmailCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmailExportRecipients;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmailExportRecipients;

        internal void ExecuteOnEmailExportRecipients(EmailCampaignsApi.EmailExportRecipientsApiResponse apiResponse)
        {
            OnEmailExportRecipients?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmailExportRecipients(Exception exception)
        {
            OnErrorEmailExportRecipients?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAbTestCampaignResult;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAbTestCampaignResult;

        internal void ExecuteOnGetAbTestCampaignResult(EmailCampaignsApi.GetAbTestCampaignResultApiResponse apiResponse)
        {
            OnGetAbTestCampaignResult?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAbTestCampaignResult(Exception exception)
        {
            OnErrorGetAbTestCampaignResult?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmailCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmailCampaign;

        internal void ExecuteOnGetEmailCampaign(EmailCampaignsApi.GetEmailCampaignApiResponse apiResponse)
        {
            OnGetEmailCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmailCampaign(Exception exception)
        {
            OnErrorGetEmailCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmailCampaigns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmailCampaigns;

        internal void ExecuteOnGetEmailCampaigns(EmailCampaignsApi.GetEmailCampaignsApiResponse apiResponse)
        {
            OnGetEmailCampaigns?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmailCampaigns(Exception exception)
        {
            OnErrorGetEmailCampaigns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSharedTemplateUrl;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSharedTemplateUrl;

        internal void ExecuteOnGetSharedTemplateUrl(EmailCampaignsApi.GetSharedTemplateUrlApiResponse apiResponse)
        {
            OnGetSharedTemplateUrl?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSharedTemplateUrl(Exception exception)
        {
            OnErrorGetSharedTemplateUrl?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendEmailCampaignNow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendEmailCampaignNow;

        internal void ExecuteOnSendEmailCampaignNow(EmailCampaignsApi.SendEmailCampaignNowApiResponse apiResponse)
        {
            OnSendEmailCampaignNow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendEmailCampaignNow(Exception exception)
        {
            OnErrorSendEmailCampaignNow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendReport;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendReport;

        internal void ExecuteOnSendReport(EmailCampaignsApi.SendReportApiResponse apiResponse)
        {
            OnSendReport?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendReport(Exception exception)
        {
            OnErrorSendReport?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendTestEmail;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendTestEmail;

        internal void ExecuteOnSendTestEmail(EmailCampaignsApi.SendTestEmailApiResponse apiResponse)
        {
            OnSendTestEmail?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendTestEmail(Exception exception)
        {
            OnErrorSendTestEmail?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateCampaignStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateCampaignStatus;

        internal void ExecuteOnUpdateCampaignStatus(EmailCampaignsApi.UpdateCampaignStatusApiResponse apiResponse)
        {
            OnUpdateCampaignStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateCampaignStatus(Exception exception)
        {
            OnErrorUpdateCampaignStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateEmailCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateEmailCampaign;

        internal void ExecuteOnUpdateEmailCampaign(EmailCampaignsApi.UpdateEmailCampaignApiResponse apiResponse)
        {
            OnUpdateEmailCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateEmailCampaign(Exception exception)
        {
            OnErrorUpdateEmailCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadImageToGallery;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadImageToGallery;

        internal void ExecuteOnUploadImageToGallery(EmailCampaignsApi.UploadImageToGalleryApiResponse apiResponse)
        {
            OnUploadImageToGallery?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadImageToGallery(Exception exception)
        {
            OnErrorUploadImageToGallery?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmailCampaignsApi : IEmailCampaignsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmailCampaignsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmailCampaignsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailCampaignsApi(ILogger<EmailCampaignsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmailCampaignsApiEvents emailCampaignsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmailCampaignsApi>();
            HttpClient = httpClient;
            Events = emailCampaignsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateEmailCampaign(CreateEmailCampaign emailCampaigns);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailCampaigns"></param>
        /// <returns></returns>
        private void ValidateCreateEmailCampaign(CreateEmailCampaign emailCampaigns)
        {
            if (emailCampaigns == null)
                throw new ArgumentNullException(nameof(emailCampaigns));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailCampaigns"></param>
        private void AfterCreateEmailCampaignDefaultImplementation(ICreateEmailCampaignApiResponse apiResponseLocalVar, CreateEmailCampaign emailCampaigns)
        {
            bool suppressDefaultLog = false;
            AfterCreateEmailCampaign(ref suppressDefaultLog, apiResponseLocalVar, emailCampaigns);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="emailCampaigns"></param>
        partial void AfterCreateEmailCampaign(ref bool suppressDefaultLog, ICreateEmailCampaignApiResponse apiResponseLocalVar, CreateEmailCampaign emailCampaigns);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailCampaigns"></param>
        private void OnErrorCreateEmailCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateEmailCampaign emailCampaigns)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateEmailCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, emailCampaigns);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="emailCampaigns"></param>
        partial void OnErrorCreateEmailCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateEmailCampaign emailCampaigns);

        /// <summary>
        /// Create an email campaign 
        /// </summary>
        /// <param name="emailCampaigns">Values to create a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<ICreateEmailCampaignApiResponse?> CreateEmailCampaignOrDefaultAsync(CreateEmailCampaign emailCampaigns, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateEmailCampaignAsync(emailCampaigns, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create an email campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailCampaigns">Values to create a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<ICreateEmailCampaignApiResponse> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateEmailCampaign(emailCampaigns);

                FormatCreateEmailCampaign(emailCampaigns);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns");

                    httpRequestMessageLocalVar.Content = (emailCampaigns as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(emailCampaigns, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateEmailCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateEmailCampaignApiResponse>();

                        CreateEmailCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateEmailCampaignDefaultImplementation(apiResponseLocalVar, emailCampaigns);

                        Events.ExecuteOnCreateEmailCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateEmailCampaignDefaultImplementation(e, "/emailCampaigns", uriBuilderLocalVar.Path, emailCampaigns);
                Events.ExecuteOnErrorCreateEmailCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateEmailCampaignApiResponse"/>
        /// </summary>
        public partial class CreateEmailCampaignApiResponse : BrevoDotNet.Client.ApiResponse, ICreateEmailCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateEmailCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateEmailCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateEmailCampaignApiResponse(ILogger<CreateEmailCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreateModel? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreateModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.CreateModel? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteEmailCampaign(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterDeleteEmailCampaignDefaultImplementation(IDeleteEmailCampaignApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteEmailCampaign(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterDeleteEmailCampaign(ref bool suppressDefaultLog, IDeleteEmailCampaignApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorDeleteEmailCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteEmailCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorDeleteEmailCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Delete an email campaign 
        /// </summary>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IDeleteEmailCampaignApiResponse?> DeleteEmailCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteEmailCampaignAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an email campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IDeleteEmailCampaignApiResponse> DeleteEmailCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteEmailCampaign(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteEmailCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteEmailCampaignApiResponse>();

                        DeleteEmailCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteEmailCampaignDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnDeleteEmailCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteEmailCampaignDefaultImplementation(e, "/emailCampaigns/{campaignId}", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorDeleteEmailCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteEmailCampaignApiResponse"/>
        /// </summary>
        public partial class DeleteEmailCampaignApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteEmailCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteEmailCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteEmailCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteEmailCampaignApiResponse(ILogger<DeleteEmailCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmailExportRecipients(ref long campaignId, Option<EmailExportRecipients> recipientExport);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="recipientExport"></param>
        /// <returns></returns>
        private void ValidateEmailExportRecipients(Option<EmailExportRecipients> recipientExport)
        {
            if (recipientExport.IsSet && recipientExport.Value == null)
                throw new ArgumentNullException(nameof(recipientExport));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="recipientExport"></param>
        private void AfterEmailExportRecipientsDefaultImplementation(IEmailExportRecipientsApiResponse apiResponseLocalVar, long campaignId, Option<EmailExportRecipients> recipientExport)
        {
            bool suppressDefaultLog = false;
            AfterEmailExportRecipients(ref suppressDefaultLog, apiResponseLocalVar, campaignId, recipientExport);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="recipientExport"></param>
        partial void AfterEmailExportRecipients(ref bool suppressDefaultLog, IEmailExportRecipientsApiResponse apiResponseLocalVar, long campaignId, Option<EmailExportRecipients> recipientExport);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="recipientExport"></param>
        private void OnErrorEmailExportRecipientsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, Option<EmailExportRecipients> recipientExport)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmailExportRecipients(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, recipientExport);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="recipientExport"></param>
        partial void OnErrorEmailExportRecipients(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, Option<EmailExportRecipients> recipientExport);

        /// <summary>
        /// Export the recipients of an email campaign 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="recipientExport">Values to send for a recipient export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmailExportRecipientsApiResponse"/>&gt;</returns>
        public async Task<IEmailExportRecipientsApiResponse?> EmailExportRecipientsOrDefaultAsync(long campaignId, Option<EmailExportRecipients> recipientExport = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmailExportRecipientsAsync(campaignId, recipientExport, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export the recipients of an email campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="recipientExport">Values to send for a recipient export request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmailExportRecipientsApiResponse"/>&gt;</returns>
        public async Task<IEmailExportRecipientsApiResponse> EmailExportRecipientsAsync(long campaignId, Option<EmailExportRecipients> recipientExport = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmailExportRecipients(recipientExport);

                FormatEmailExportRecipients(ref campaignId, recipientExport);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/exportRecipients"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/exportRecipients");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    if (recipientExport.IsSet)
                        httpRequestMessageLocalVar.Content = (recipientExport.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(recipientExport.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmailExportRecipientsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmailExportRecipientsApiResponse>();

                        EmailExportRecipientsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/exportRecipients", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmailExportRecipientsDefaultImplementation(apiResponseLocalVar, campaignId, recipientExport);

                        Events.ExecuteOnEmailExportRecipients(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmailExportRecipientsDefaultImplementation(e, "/emailCampaigns/{campaignId}/exportRecipients", uriBuilderLocalVar.Path, campaignId, recipientExport);
                Events.ExecuteOnErrorEmailExportRecipients(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmailExportRecipientsApiResponse"/>
        /// </summary>
        public partial class EmailExportRecipientsApiResponse : BrevoDotNet.Client.ApiResponse, IEmailExportRecipientsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmailExportRecipientsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmailExportRecipientsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmailExportRecipientsApiResponse(ILogger<EmailExportRecipientsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreatedProcessId? Accepted()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsAccepted
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreatedProcessId>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAccepted([NotNullWhen(true)]out BrevoDotNet.Model.CreatedProcessId? result)
            {
                result = null;

                try
                {
                    result = Accepted();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)202);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAbTestCampaignResult(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterGetAbTestCampaignResultDefaultImplementation(IGetAbTestCampaignResultApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterGetAbTestCampaignResult(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterGetAbTestCampaignResult(ref bool suppressDefaultLog, IGetAbTestCampaignResultApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorGetAbTestCampaignResultDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAbTestCampaignResult(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorGetAbTestCampaignResult(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Get an A/B test email campaign results Obtain winning version of an A/B test email campaign
        /// </summary>
        /// <param name="campaignId">Id of the A/B test campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAbTestCampaignResultApiResponse"/>&gt;</returns>
        public async Task<IGetAbTestCampaignResultApiResponse?> GetAbTestCampaignResultOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAbTestCampaignResultAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an A/B test email campaign results Obtain winning version of an A/B test email campaign
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the A/B test campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAbTestCampaignResultApiResponse"/>&gt;</returns>
        public async Task<IGetAbTestCampaignResultApiResponse> GetAbTestCampaignResultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAbTestCampaignResult(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/abTestCampaignResult"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/abTestCampaignResult");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAbTestCampaignResultApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAbTestCampaignResultApiResponse>();

                        GetAbTestCampaignResultApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/abTestCampaignResult", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAbTestCampaignResultDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnGetAbTestCampaignResult(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAbTestCampaignResultDefaultImplementation(e, "/emailCampaigns/{campaignId}/abTestCampaignResult", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorGetAbTestCampaignResult(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAbTestCampaignResultApiResponse"/>
        /// </summary>
        public partial class GetAbTestCampaignResultApiResponse : BrevoDotNet.Client.ApiResponse, IGetAbTestCampaignResultApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAbTestCampaignResultApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAbTestCampaignResultApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAbTestCampaignResultApiResponse(ILogger<GetAbTestCampaignResultApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.AbTestCampaignResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.AbTestCampaignResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.AbTestCampaignResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmailCampaign(ref long campaignId, ref Option<string> statistics);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="statistics"></param>
        /// <returns></returns>
        private void ValidateGetEmailCampaign(Option<string> statistics)
        {
            if (statistics.IsSet && statistics.Value == null)
                throw new ArgumentNullException(nameof(statistics));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="statistics"></param>
        private void AfterGetEmailCampaignDefaultImplementation(IGetEmailCampaignApiResponse apiResponseLocalVar, long campaignId, Option<string> statistics)
        {
            bool suppressDefaultLog = false;
            AfterGetEmailCampaign(ref suppressDefaultLog, apiResponseLocalVar, campaignId, statistics);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="statistics"></param>
        partial void AfterGetEmailCampaign(ref bool suppressDefaultLog, IGetEmailCampaignApiResponse apiResponseLocalVar, long campaignId, Option<string> statistics);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="statistics"></param>
        private void OnErrorGetEmailCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, Option<string> statistics)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmailCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, statistics);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="statistics"></param>
        partial void OnErrorGetEmailCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, Option<string> statistics);

        /// <summary>
        /// Get an email campaign report 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IGetEmailCampaignApiResponse?> GetEmailCampaignOrDefaultAsync(long campaignId, Option<string> statistics = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmailCampaignAsync(campaignId, statistics, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an email campaign report 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IGetEmailCampaignApiResponse> GetEmailCampaignAsync(long campaignId, Option<string> statistics = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEmailCampaign(statistics);

                FormatGetEmailCampaign(ref campaignId, ref statistics);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (statistics.IsSet)
                        parseQueryStringLocalVar["statistics"] = ClientUtils.ParameterToString(statistics.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmailCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmailCampaignApiResponse>();

                        GetEmailCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmailCampaignDefaultImplementation(apiResponseLocalVar, campaignId, statistics);

                        Events.ExecuteOnGetEmailCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmailCampaignDefaultImplementation(e, "/emailCampaigns/{campaignId}", uriBuilderLocalVar.Path, campaignId, statistics);
                Events.ExecuteOnErrorGetEmailCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmailCampaignApiResponse"/>
        /// </summary>
        public partial class GetEmailCampaignApiResponse : BrevoDotNet.Client.ApiResponse, IGetEmailCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmailCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmailCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmailCampaignApiResponse(ILogger<GetEmailCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetEmailCampaign? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetEmailCampaign>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetEmailCampaign? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmailCampaigns(ref Option<string> type, ref Option<string> status, ref Option<string> statistics, ref Option<DateTime> startDate, ref Option<DateTime> endDate, ref Option<long> limit, ref Option<long> offset, ref Option<bool> excludeHtmlContent);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="statistics"></param>
        /// <returns></returns>
        private void ValidateGetEmailCampaigns(Option<string> type, Option<string> status, Option<string> statistics)
        {
            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (statistics.IsSet && statistics.Value == null)
                throw new ArgumentNullException(nameof(statistics));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="statistics"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="excludeHtmlContent"></param>
        private void AfterGetEmailCampaignsDefaultImplementation(IGetEmailCampaignsApiResponse apiResponseLocalVar, Option<string> type, Option<string> status, Option<string> statistics, Option<DateTime> startDate, Option<DateTime> endDate, Option<long> limit, Option<long> offset, Option<bool> excludeHtmlContent)
        {
            bool suppressDefaultLog = false;
            AfterGetEmailCampaigns(ref suppressDefaultLog, apiResponseLocalVar, type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="statistics"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="excludeHtmlContent"></param>
        partial void AfterGetEmailCampaigns(ref bool suppressDefaultLog, IGetEmailCampaignsApiResponse apiResponseLocalVar, Option<string> type, Option<string> status, Option<string> statistics, Option<DateTime> startDate, Option<DateTime> endDate, Option<long> limit, Option<long> offset, Option<bool> excludeHtmlContent);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="statistics"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="excludeHtmlContent"></param>
        private void OnErrorGetEmailCampaignsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> type, Option<string> status, Option<string> statistics, Option<DateTime> startDate, Option<DateTime> endDate, Option<long> limit, Option<long> offset, Option<bool> excludeHtmlContent)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmailCampaigns(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="statistics"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="excludeHtmlContent"></param>
        partial void OnErrorGetEmailCampaigns(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> type, Option<string> status, Option<string> statistics, Option<DateTime> startDate, Option<DateTime> endDate, Option<long> limit, Option<long> offset, Option<bool> excludeHtmlContent);

        /// <summary>
        /// Return all your created email campaigns 
        /// </summary>
        /// <param name="type">Filter on the type of the campaigns (optional)</param>
        /// <param name="status">Filter on the status of the campaign (optional)</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 500)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignsApiResponse"/>&gt;</returns>
        public async Task<IGetEmailCampaignsApiResponse?> GetEmailCampaignsOrDefaultAsync(Option<string> type = default, Option<string> status = default, Option<string> statistics = default, Option<DateTime> startDate = default, Option<DateTime> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<bool> excludeHtmlContent = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmailCampaignsAsync(type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Return all your created email campaigns 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter on the type of the campaigns (optional)</param>
        /// <param name="status">Filter on the status of the campaign (optional)</param>
        /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; ) (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 500)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmailCampaignsApiResponse"/>&gt;</returns>
        public async Task<IGetEmailCampaignsApiResponse> GetEmailCampaignsAsync(Option<string> type = default, Option<string> status = default, Option<string> statistics = default, Option<DateTime> startDate = default, Option<DateTime> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<bool> excludeHtmlContent = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEmailCampaigns(type, status, statistics);

                FormatGetEmailCampaigns(ref type, ref status, ref statistics, ref startDate, ref endDate, ref limit, ref offset, ref excludeHtmlContent);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (statistics.IsSet)
                        parseQueryStringLocalVar["statistics"] = ClientUtils.ParameterToString(statistics.Value);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (excludeHtmlContent.IsSet)
                        parseQueryStringLocalVar["excludeHtmlContent"] = ClientUtils.ParameterToString(excludeHtmlContent.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "applications/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmailCampaignsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmailCampaignsApiResponse>();

                        GetEmailCampaignsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmailCampaignsDefaultImplementation(apiResponseLocalVar, type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent);

                        Events.ExecuteOnGetEmailCampaigns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmailCampaignsDefaultImplementation(e, "/emailCampaigns", uriBuilderLocalVar.Path, type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent);
                Events.ExecuteOnErrorGetEmailCampaigns(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmailCampaignsApiResponse"/>
        /// </summary>
        public partial class GetEmailCampaignsApiResponse : BrevoDotNet.Client.ApiResponse, IGetEmailCampaignsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmailCampaignsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmailCampaignsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmailCampaignsApiResponse(ILogger<GetEmailCampaignsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetEmailCampaigns? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetEmailCampaigns>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetEmailCampaigns? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSharedTemplateUrl(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterGetSharedTemplateUrlDefaultImplementation(IGetSharedTemplateUrlApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterGetSharedTemplateUrl(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterGetSharedTemplateUrl(ref bool suppressDefaultLog, IGetSharedTemplateUrlApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorGetSharedTemplateUrlDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSharedTemplateUrl(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorGetSharedTemplateUrl(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Get a shared template url Get a unique URL to share &amp; import an email template from one Sendinblue account to another.
        /// </summary>
        /// <param name="campaignId">Id of the campaign or template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedTemplateUrlApiResponse"/>&gt;</returns>
        public async Task<IGetSharedTemplateUrlApiResponse?> GetSharedTemplateUrlOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSharedTemplateUrlAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a shared template url Get a unique URL to share &amp; import an email template from one Sendinblue account to another.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign or template</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedTemplateUrlApiResponse"/>&gt;</returns>
        public async Task<IGetSharedTemplateUrlApiResponse> GetSharedTemplateUrlAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSharedTemplateUrl(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/sharedUrl"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/sharedUrl");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSharedTemplateUrlApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSharedTemplateUrlApiResponse>();

                        GetSharedTemplateUrlApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/sharedUrl", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSharedTemplateUrlDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnGetSharedTemplateUrl(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSharedTemplateUrlDefaultImplementation(e, "/emailCampaigns/{campaignId}/sharedUrl", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorGetSharedTemplateUrl(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSharedTemplateUrlApiResponse"/>
        /// </summary>
        public partial class GetSharedTemplateUrlApiResponse : BrevoDotNet.Client.ApiResponse, IGetSharedTemplateUrlApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSharedTemplateUrlApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSharedTemplateUrlApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSharedTemplateUrlApiResponse(ILogger<GetSharedTemplateUrlApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetSharedTemplateUrl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetSharedTemplateUrl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetSharedTemplateUrl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? MethodNotAllowed()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsMethodNotAllowed
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryMethodNotAllowed([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = MethodNotAllowed();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)405);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendEmailCampaignNow(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterSendEmailCampaignNowDefaultImplementation(ISendEmailCampaignNowApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterSendEmailCampaignNow(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterSendEmailCampaignNow(ref bool suppressDefaultLog, ISendEmailCampaignNowApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorSendEmailCampaignNowDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendEmailCampaignNow(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorSendEmailCampaignNow(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Send an email campaign immediately, based on campaignId 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailCampaignNowApiResponse"/>&gt;</returns>
        public async Task<ISendEmailCampaignNowApiResponse?> SendEmailCampaignNowOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendEmailCampaignNowAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send an email campaign immediately, based on campaignId 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendEmailCampaignNowApiResponse"/>&gt;</returns>
        public async Task<ISendEmailCampaignNowApiResponse> SendEmailCampaignNowAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSendEmailCampaignNow(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/sendNow"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/sendNow");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendEmailCampaignNowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendEmailCampaignNowApiResponse>();

                        SendEmailCampaignNowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/sendNow", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendEmailCampaignNowDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnSendEmailCampaignNow(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendEmailCampaignNowDefaultImplementation(e, "/emailCampaigns/{campaignId}/sendNow", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorSendEmailCampaignNow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendEmailCampaignNowApiResponse"/>
        /// </summary>
        public partial class SendEmailCampaignNowApiResponse : BrevoDotNet.Client.ApiResponse, ISendEmailCampaignNowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendEmailCampaignNowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendEmailCampaignNowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendEmailCampaignNowApiResponse(ILogger<SendEmailCampaignNowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public bool IsPaymentRequired => 402 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 402 PaymentRequired
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? PaymentRequired()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsPaymentRequired
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 402 PaymentRequired and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryPaymentRequired([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = PaymentRequired();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)402);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendReport(ref long campaignId, SendReport sendReport);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendReport"></param>
        /// <returns></returns>
        private void ValidateSendReport(SendReport sendReport)
        {
            if (sendReport == null)
                throw new ArgumentNullException(nameof(sendReport));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="sendReport"></param>
        private void AfterSendReportDefaultImplementation(ISendReportApiResponse apiResponseLocalVar, long campaignId, SendReport sendReport)
        {
            bool suppressDefaultLog = false;
            AfterSendReport(ref suppressDefaultLog, apiResponseLocalVar, campaignId, sendReport);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="sendReport"></param>
        partial void AfterSendReport(ref bool suppressDefaultLog, ISendReportApiResponse apiResponseLocalVar, long campaignId, SendReport sendReport);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="sendReport"></param>
        private void OnErrorSendReportDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, SendReport sendReport)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendReport(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, sendReport);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="sendReport"></param>
        partial void OnErrorSendReport(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, SendReport sendReport);

        /// <summary>
        /// Send the report of a campaign A PDF will be sent to the specified email addresses
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="sendReport">Values for send a report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendReportApiResponse"/>&gt;</returns>
        public async Task<ISendReportApiResponse?> SendReportOrDefaultAsync(long campaignId, SendReport sendReport, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendReportAsync(campaignId, sendReport, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send the report of a campaign A PDF will be sent to the specified email addresses
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="sendReport">Values for send a report</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendReportApiResponse"/>&gt;</returns>
        public async Task<ISendReportApiResponse> SendReportAsync(long campaignId, SendReport sendReport, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendReport(sendReport);

                FormatSendReport(ref campaignId, sendReport);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/sendReport"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/sendReport");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    httpRequestMessageLocalVar.Content = (sendReport as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendReport, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendReportApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendReportApiResponse>();

                        SendReportApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/sendReport", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendReportDefaultImplementation(apiResponseLocalVar, campaignId, sendReport);

                        Events.ExecuteOnSendReport(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendReportDefaultImplementation(e, "/emailCampaigns/{campaignId}/sendReport", uriBuilderLocalVar.Path, campaignId, sendReport);
                Events.ExecuteOnErrorSendReport(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendReportApiResponse"/>
        /// </summary>
        public partial class SendReportApiResponse : BrevoDotNet.Client.ApiResponse, ISendReportApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendReportApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendReportApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendReportApiResponse(ILogger<SendReportApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendTestEmail(ref long campaignId, SendTestEmail emailTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailTo"></param>
        /// <returns></returns>
        private void ValidateSendTestEmail(SendTestEmail emailTo)
        {
            if (emailTo == null)
                throw new ArgumentNullException(nameof(emailTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailTo"></param>
        private void AfterSendTestEmailDefaultImplementation(ISendTestEmailApiResponse apiResponseLocalVar, long campaignId, SendTestEmail emailTo)
        {
            bool suppressDefaultLog = false;
            AfterSendTestEmail(ref suppressDefaultLog, apiResponseLocalVar, campaignId, emailTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailTo"></param>
        partial void AfterSendTestEmail(ref bool suppressDefaultLog, ISendTestEmailApiResponse apiResponseLocalVar, long campaignId, SendTestEmail emailTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailTo"></param>
        private void OnErrorSendTestEmailDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, SendTestEmail emailTo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendTestEmail(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, emailTo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailTo"></param>
        partial void OnErrorSendTestEmail(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, SendTestEmail emailTo);

        /// <summary>
        /// Send an email campaign to your test list 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailTo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestEmailApiResponse"/>&gt;</returns>
        public async Task<ISendTestEmailApiResponse?> SendTestEmailOrDefaultAsync(long campaignId, SendTestEmail emailTo, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendTestEmailAsync(campaignId, emailTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send an email campaign to your test list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailTo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendTestEmailApiResponse"/>&gt;</returns>
        public async Task<ISendTestEmailApiResponse> SendTestEmailAsync(long campaignId, SendTestEmail emailTo, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendTestEmail(emailTo);

                FormatSendTestEmail(ref campaignId, emailTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/sendTest"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/sendTest");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    httpRequestMessageLocalVar.Content = (emailTo as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(emailTo, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendTestEmailApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendTestEmailApiResponse>();

                        SendTestEmailApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/sendTest", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendTestEmailDefaultImplementation(apiResponseLocalVar, campaignId, emailTo);

                        Events.ExecuteOnSendTestEmail(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendTestEmailDefaultImplementation(e, "/emailCampaigns/{campaignId}/sendTest", uriBuilderLocalVar.Path, campaignId, emailTo);
                Events.ExecuteOnErrorSendTestEmail(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendTestEmailApiResponse"/>
        /// </summary>
        public partial class SendTestEmailApiResponse : BrevoDotNet.Client.ApiResponse, ISendTestEmailApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendTestEmailApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendTestEmailApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendTestEmailApiResponse(ILogger<SendTestEmailApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.PostSendFailed? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.PostSendFailed>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.PostSendFailed? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateCampaignStatus(ref long campaignId, UpdateCampaignStatus status);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        private void ValidateUpdateCampaignStatus(UpdateCampaignStatus status)
        {
            if (status == null)
                throw new ArgumentNullException(nameof(status));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="status"></param>
        private void AfterUpdateCampaignStatusDefaultImplementation(IUpdateCampaignStatusApiResponse apiResponseLocalVar, long campaignId, UpdateCampaignStatus status)
        {
            bool suppressDefaultLog = false;
            AfterUpdateCampaignStatus(ref suppressDefaultLog, apiResponseLocalVar, campaignId, status);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="status"></param>
        partial void AfterUpdateCampaignStatus(ref bool suppressDefaultLog, IUpdateCampaignStatusApiResponse apiResponseLocalVar, long campaignId, UpdateCampaignStatus status);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="status"></param>
        private void OnErrorUpdateCampaignStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, UpdateCampaignStatus status)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateCampaignStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, status);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="status"></param>
        partial void OnErrorUpdateCampaignStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, UpdateCampaignStatus status);

        /// <summary>
        /// Update an email campaign status 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCampaignStatusApiResponse"/>&gt;</returns>
        public async Task<IUpdateCampaignStatusApiResponse?> UpdateCampaignStatusOrDefaultAsync(long campaignId, UpdateCampaignStatus status, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateCampaignStatusAsync(campaignId, status, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an email campaign status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateCampaignStatusApiResponse"/>&gt;</returns>
        public async Task<IUpdateCampaignStatusApiResponse> UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateCampaignStatus(status);

                FormatUpdateCampaignStatus(ref campaignId, status);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}/status"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}/status");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    httpRequestMessageLocalVar.Content = (status as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(status, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateCampaignStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateCampaignStatusApiResponse>();

                        UpdateCampaignStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}/status", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateCampaignStatusDefaultImplementation(apiResponseLocalVar, campaignId, status);

                        Events.ExecuteOnUpdateCampaignStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateCampaignStatusDefaultImplementation(e, "/emailCampaigns/{campaignId}/status", uriBuilderLocalVar.Path, campaignId, status);
                Events.ExecuteOnErrorUpdateCampaignStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateCampaignStatusApiResponse"/>
        /// </summary>
        public partial class UpdateCampaignStatusApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateCampaignStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateCampaignStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateCampaignStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateCampaignStatusApiResponse(ILogger<UpdateCampaignStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateEmailCampaign(ref long campaignId, UpdateEmailCampaign emailCampaign);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="emailCampaign"></param>
        /// <returns></returns>
        private void ValidateUpdateEmailCampaign(UpdateEmailCampaign emailCampaign)
        {
            if (emailCampaign == null)
                throw new ArgumentNullException(nameof(emailCampaign));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailCampaign"></param>
        private void AfterUpdateEmailCampaignDefaultImplementation(IUpdateEmailCampaignApiResponse apiResponseLocalVar, long campaignId, UpdateEmailCampaign emailCampaign)
        {
            bool suppressDefaultLog = false;
            AfterUpdateEmailCampaign(ref suppressDefaultLog, apiResponseLocalVar, campaignId, emailCampaign);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailCampaign"></param>
        partial void AfterUpdateEmailCampaign(ref bool suppressDefaultLog, IUpdateEmailCampaignApiResponse apiResponseLocalVar, long campaignId, UpdateEmailCampaign emailCampaign);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailCampaign"></param>
        private void OnErrorUpdateEmailCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, UpdateEmailCampaign emailCampaign)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateEmailCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId, emailCampaign);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        /// <param name="emailCampaign"></param>
        partial void OnErrorUpdateEmailCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId, UpdateEmailCampaign emailCampaign);

        /// <summary>
        /// Update an email campaign 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailCampaign">Values to update a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IUpdateEmailCampaignApiResponse?> UpdateEmailCampaignOrDefaultAsync(long campaignId, UpdateEmailCampaign emailCampaign, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateEmailCampaignAsync(campaignId, emailCampaign, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an email campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="emailCampaign">Values to update a campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmailCampaignApiResponse"/>&gt;</returns>
        public async Task<IUpdateEmailCampaignApiResponse> UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateEmailCampaign(emailCampaign);

                FormatUpdateEmailCampaign(ref campaignId, emailCampaign);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/{campaignId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/{campaignId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    httpRequestMessageLocalVar.Content = (emailCampaign as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(emailCampaign, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateEmailCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateEmailCampaignApiResponse>();

                        UpdateEmailCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/{campaignId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateEmailCampaignDefaultImplementation(apiResponseLocalVar, campaignId, emailCampaign);

                        Events.ExecuteOnUpdateEmailCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateEmailCampaignDefaultImplementation(e, "/emailCampaigns/{campaignId}", uriBuilderLocalVar.Path, campaignId, emailCampaign);
                Events.ExecuteOnErrorUpdateEmailCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateEmailCampaignApiResponse"/>
        /// </summary>
        public partial class UpdateEmailCampaignApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateEmailCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateEmailCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateEmailCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateEmailCampaignApiResponse(ILogger<UpdateEmailCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadImageToGallery(UploadImageToGallery uploadImage);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="uploadImage"></param>
        /// <returns></returns>
        private void ValidateUploadImageToGallery(UploadImageToGallery uploadImage)
        {
            if (uploadImage == null)
                throw new ArgumentNullException(nameof(uploadImage));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="uploadImage"></param>
        private void AfterUploadImageToGalleryDefaultImplementation(IUploadImageToGalleryApiResponse apiResponseLocalVar, UploadImageToGallery uploadImage)
        {
            bool suppressDefaultLog = false;
            AfterUploadImageToGallery(ref suppressDefaultLog, apiResponseLocalVar, uploadImage);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="uploadImage"></param>
        partial void AfterUploadImageToGallery(ref bool suppressDefaultLog, IUploadImageToGalleryApiResponse apiResponseLocalVar, UploadImageToGallery uploadImage);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="uploadImage"></param>
        private void OnErrorUploadImageToGalleryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UploadImageToGallery uploadImage)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadImageToGallery(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, uploadImage);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="uploadImage"></param>
        partial void OnErrorUploadImageToGallery(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UploadImageToGallery uploadImage);

        /// <summary>
        /// Upload an image to your account&#39;s image gallery 
        /// </summary>
        /// <param name="uploadImage">Parameters to upload an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadImageToGalleryApiResponse"/>&gt;</returns>
        public async Task<IUploadImageToGalleryApiResponse?> UploadImageToGalleryOrDefaultAsync(UploadImageToGallery uploadImage, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadImageToGalleryAsync(uploadImage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload an image to your account&#39;s image gallery 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadImage">Parameters to upload an image</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadImageToGalleryApiResponse"/>&gt;</returns>
        public async Task<IUploadImageToGalleryApiResponse> UploadImageToGalleryAsync(UploadImageToGallery uploadImage, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadImageToGallery(uploadImage);

                FormatUploadImageToGallery(uploadImage);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/emailCampaigns/images"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/emailCampaigns/images");

                    httpRequestMessageLocalVar.Content = (uploadImage as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(uploadImage, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadImageToGalleryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadImageToGalleryApiResponse>();

                        UploadImageToGalleryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/emailCampaigns/images", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadImageToGalleryDefaultImplementation(apiResponseLocalVar, uploadImage);

                        Events.ExecuteOnUploadImageToGallery(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadImageToGalleryDefaultImplementation(e, "/emailCampaigns/images", uriBuilderLocalVar.Path, uploadImage);
                Events.ExecuteOnErrorUploadImageToGallery(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadImageToGalleryApiResponse"/>
        /// </summary>
        public partial class UploadImageToGalleryApiResponse : BrevoDotNet.Client.ApiResponse, IUploadImageToGalleryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadImageToGalleryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadImageToGalleryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadImageToGalleryApiResponse(ILogger<UploadImageToGalleryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
