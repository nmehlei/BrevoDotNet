// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContactsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContactsApiEvents Events { get; }

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        Task<IAddContactToListApiResponse> AddContactToListAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>?&gt;</returns>
        Task<IAddContactToListApiResponse?> AddContactToListOrDefaultAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        Task<ICreateAttributeApiResponse> CreateAttributeAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>?&gt;</returns>
        Task<ICreateAttributeApiResponse?> CreateAttributeOrDefaultAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        Task<ICreateContactApiResponse> CreateContactAsync(CreateContact createContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createContact">Values to create a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>?&gt;</returns>
        Task<ICreateContactApiResponse?> CreateContactOrDefaultAsync(CreateContact createContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDoiContactApiResponse"/>&gt;</returns>
        Task<ICreateDoiContactApiResponse> CreateDoiContactAsync(CreateDoiContact createDoiContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDoiContactApiResponse"/>?&gt;</returns>
        Task<ICreateDoiContactApiResponse?> CreateDoiContactOrDefaultAsync(CreateDoiContact createDoiContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        Task<ICreateFolderApiResponse> CreateFolderAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>?&gt;</returns>
        Task<ICreateFolderApiResponse?> CreateFolderOrDefaultAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        Task<ICreateListApiResponse> CreateListAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>?&gt;</returns>
        Task<ICreateListApiResponse?> CreateListOrDefaultAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        Task<IDeleteAttributeApiResponse> DeleteAttributeAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>?&gt;</returns>
        Task<IDeleteAttributeApiResponse?> DeleteAttributeOrDefaultAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        Task<IDeleteContactApiResponse> DeleteContactAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>?&gt;</returns>
        Task<IDeleteContactApiResponse?> DeleteContactOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a folder (and all its lists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        Task<IDeleteFolderApiResponse> DeleteFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a folder (and all its lists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>?&gt;</returns>
        Task<IDeleteFolderApiResponse?> DeleteFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        Task<IDeleteListApiResponse> DeleteListAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>?&gt;</returns>
        Task<IDeleteListApiResponse?> DeleteListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        Task<IGetAttributesApiResponse> GetAttributesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>?&gt;</returns>
        Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactInfoApiResponse"/>&gt;</returns>
        Task<IGetContactInfoApiResponse> GetContactInfoAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactInfoApiResponse"/>?&gt;</returns>
        Task<IGetContactInfoApiResponse?> GetContactInfoOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address (urlencoded) of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactStatsApiResponse"/>&gt;</returns>
        Task<IGetContactStatsApiResponse> GetContactStatsAsync(string email, Option<DateOnly> startDate = default, Option<DateOnly> endDate = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="email">Email address (urlencoded) of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactStatsApiResponse"/>?&gt;</returns>
        Task<IGetContactStatsApiResponse?> GetContactStatsOrDefaultAsync(string email, Option<DateOnly> startDate = default, Option<DateOnly> endDate = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        Task<IGetContactsApiResponse> GetContactsAsync(Option<long> limit = default, Option<long> offset = default, Option<DateTime> modifiedSince = default, Option<DateTime> createdSince = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>?&gt;</returns>
        Task<IGetContactsApiResponse?> GetContactsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<DateTime> modifiedSince = default, Option<DateTime> createdSince = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        Task<IGetContactsFromListApiResponse> GetContactsFromListAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>?&gt;</returns>
        Task<IGetContactsFromListApiResponse?> GetContactsFromListOrDefaultAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a folder&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        Task<IGetFolderApiResponse> GetFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a folder&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>?&gt;</returns>
        Task<IGetFolderApiResponse?> GetFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>?&gt;</returns>
        Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        Task<IGetFoldersApiResponse> GetFoldersAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>?&gt;</returns>
        Task<IGetFoldersApiResponse?> GetFoldersOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        Task<IGetListApiResponse> GetListAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>?&gt;</returns>
        Task<IGetListApiResponse?> GetListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        Task<IGetListsApiResponse> GetListsAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>?&gt;</returns>
        Task<IGetListsApiResponse?> GetListsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSegmentsApiResponse"/>&gt;</returns>
        Task<IGetSegmentsApiResponse> GetSegmentsAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the segments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSegmentsApiResponse"/>?&gt;</returns>
        Task<IGetSegmentsApiResponse?> GetSegmentsOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportContactsApiResponse"/>&gt;</returns>
        Task<IImportContactsApiResponse> ImportContactsAsync(RequestContactImport requestContactImport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </remarks>
        /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportContactsApiResponse"/>?&gt;</returns>
        Task<IImportContactsApiResponse?> ImportContactsOrDefaultAsync(RequestContactImport requestContactImport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        Task<IRemoveContactFromListApiResponse> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>?&gt;</returns>
        Task<IRemoveContactFromListApiResponse?> RemoveContactFromListOrDefaultAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export contacts
        /// </summary>
        /// <remarks>
        /// It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRequestContactExportApiResponse"/>&gt;</returns>
        Task<IRequestContactExportApiResponse> RequestContactExportAsync(RequestContactExport requestContactExport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export contacts
        /// </summary>
        /// <remarks>
        /// It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </remarks>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRequestContactExportApiResponse"/>?&gt;</returns>
        Task<IRequestContactExportApiResponse?> RequestContactExportOrDefaultAsync(RequestContactExport requestContactExport, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        Task<IUpdateAttributeApiResponse> UpdateAttributeAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>?&gt;</returns>
        Task<IUpdateAttributeApiResponse?> UpdateAttributeOrDefaultAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        Task<IUpdateContactApiResponse> UpdateContactAsync(string email, UpdateContact updateContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>?&gt;</returns>
        Task<IUpdateContactApiResponse?> UpdateContactOrDefaultAsync(string email, UpdateContact updateContact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        Task<IUpdateFolderApiResponse> UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>?&gt;</returns>
        Task<IUpdateFolderApiResponse?> UpdateFolderOrDefaultAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        Task<IUpdateListApiResponse> UpdateListAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>?&gt;</returns>
        Task<IUpdateListApiResponse?> UpdateListOrDefaultAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddContactToListApiResponse"/>
    /// </summary>
    public interface IAddContactToListApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.PostContactInfo?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ICreateContactApiResponse"/>
    /// </summary>
    public interface ICreateContactApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.CreateUpdateContactModel?>, INoContent<BrevoDotNet.Model.CreateUpdateContactModel?>, IBadRequest<BrevoDotNet.Model.ContactErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ICreateDoiContactApiResponse"/>
    /// </summary>
    public interface ICreateDoiContactApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ICreateFolderApiResponse"/>
    /// </summary>
    public interface ICreateFolderApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.CreateModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ICreateListApiResponse"/>
    /// </summary>
    public interface ICreateListApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.CreateModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteContactApiResponse"/>
    /// </summary>
    public interface IDeleteContactApiResponse : BrevoDotNet.Client.IApiResponse, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, IMethodNotAllowed<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFolderApiResponse"/>
    /// </summary>
    public interface IDeleteFolderApiResponse : BrevoDotNet.Client.IApiResponse, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteListApiResponse"/>
    /// </summary>
    public interface IDeleteListApiResponse : BrevoDotNet.Client.IApiResponse, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactInfoApiResponse"/>
    /// </summary>
    public interface IGetContactInfoApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetExtendedContactDetails?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactStatsApiResponse"/>
    /// </summary>
    public interface IGetContactStatsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetContactCampaignStats?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactsApiResponse"/>
    /// </summary>
    public interface IGetContactsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetContacts?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactsFromListApiResponse"/>
    /// </summary>
    public interface IGetContactsFromListApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetContacts?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetFolderApiResponse"/>
    /// </summary>
    public interface IGetFolderApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetFolder?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetFolderListsApiResponse"/>
    /// </summary>
    public interface IGetFolderListsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetFolderLists?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetFoldersApiResponse"/>
    /// </summary>
    public interface IGetFoldersApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetFolders?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetListApiResponse"/>
    /// </summary>
    public interface IGetListApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetExtendedList?>, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetListsApiResponse"/>
    /// </summary>
    public interface IGetListsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetLists?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetSegmentsApiResponse"/>
    /// </summary>
    public interface IGetSegmentsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetSegments?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IImportContactsApiResponse"/>
    /// </summary>
    public interface IImportContactsApiResponse : BrevoDotNet.Client.IApiResponse, IAccepted<BrevoDotNet.Model.CreatedProcessId?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveContactFromListApiResponse"/>
    /// </summary>
    public interface IRemoveContactFromListApiResponse : BrevoDotNet.Client.IApiResponse, ICreated<BrevoDotNet.Model.PostContactInfo?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRequestContactExportApiResponse"/>
    /// </summary>
    public interface IRequestContactExportApiResponse : BrevoDotNet.Client.IApiResponse, IAccepted<BrevoDotNet.Model.CreatedProcessId?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateContactApiResponse"/>
    /// </summary>
    public interface IUpdateContactApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ContactErrorModel?>, INotFound<BrevoDotNet.Model.ContactErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFolderApiResponse"/>
    /// </summary>
    public interface IUpdateFolderApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateListApiResponse"/>
    /// </summary>
    public interface IUpdateListApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContactsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddContactToList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddContactToList;

        internal void ExecuteOnAddContactToList(ContactsApi.AddContactToListApiResponse apiResponse)
        {
            OnAddContactToList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddContactToList(Exception exception)
        {
            OnErrorAddContactToList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateAttribute;

        internal void ExecuteOnCreateAttribute(AttributesApi.CreateAttributeApiResponse apiResponse)
        {
            OnCreateAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAttribute(Exception exception)
        {
            OnErrorCreateAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateContact;

        internal void ExecuteOnCreateContact(ContactsApi.CreateContactApiResponse apiResponse)
        {
            OnCreateContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateContact(Exception exception)
        {
            OnErrorCreateContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateDoiContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateDoiContact;

        internal void ExecuteOnCreateDoiContact(ContactsApi.CreateDoiContactApiResponse apiResponse)
        {
            OnCreateDoiContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateDoiContact(Exception exception)
        {
            OnErrorCreateDoiContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateFolder;

        internal void ExecuteOnCreateFolder(ContactsApi.CreateFolderApiResponse apiResponse)
        {
            OnCreateFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateFolder(Exception exception)
        {
            OnErrorCreateFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateList;

        internal void ExecuteOnCreateList(ContactsApi.CreateListApiResponse apiResponse)
        {
            OnCreateList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateList(Exception exception)
        {
            OnErrorCreateList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAttribute;

        internal void ExecuteOnDeleteAttribute(AttributesApi.DeleteAttributeApiResponse apiResponse)
        {
            OnDeleteAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAttribute(Exception exception)
        {
            OnErrorDeleteAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteContact;

        internal void ExecuteOnDeleteContact(ContactsApi.DeleteContactApiResponse apiResponse)
        {
            OnDeleteContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteContact(Exception exception)
        {
            OnErrorDeleteContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFolder;

        internal void ExecuteOnDeleteFolder(ContactsApi.DeleteFolderApiResponse apiResponse)
        {
            OnDeleteFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFolder(Exception exception)
        {
            OnErrorDeleteFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteList;

        internal void ExecuteOnDeleteList(ContactsApi.DeleteListApiResponse apiResponse)
        {
            OnDeleteList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteList(Exception exception)
        {
            OnErrorDeleteList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAttributes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAttributes;

        internal void ExecuteOnGetAttributes(AttributesApi.GetAttributesApiResponse apiResponse)
        {
            OnGetAttributes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAttributes(Exception exception)
        {
            OnErrorGetAttributes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactInfo;

        internal void ExecuteOnGetContactInfo(ContactsApi.GetContactInfoApiResponse apiResponse)
        {
            OnGetContactInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactInfo(Exception exception)
        {
            OnErrorGetContactInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactStats;

        internal void ExecuteOnGetContactStats(ContactsApi.GetContactStatsApiResponse apiResponse)
        {
            OnGetContactStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactStats(Exception exception)
        {
            OnErrorGetContactStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContacts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContacts;

        internal void ExecuteOnGetContacts(ContactsApi.GetContactsApiResponse apiResponse)
        {
            OnGetContacts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContacts(Exception exception)
        {
            OnErrorGetContacts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactsFromList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactsFromList;

        internal void ExecuteOnGetContactsFromList(ContactsApi.GetContactsFromListApiResponse apiResponse)
        {
            OnGetContactsFromList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactsFromList(Exception exception)
        {
            OnErrorGetContactsFromList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolder;

        internal void ExecuteOnGetFolder(ContactsApi.GetFolderApiResponse apiResponse)
        {
            OnGetFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolder(Exception exception)
        {
            OnErrorGetFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolderLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolderLists;

        internal void ExecuteOnGetFolderLists(ContactsApi.GetFolderListsApiResponse apiResponse)
        {
            OnGetFolderLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolderLists(Exception exception)
        {
            OnErrorGetFolderLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolders;

        internal void ExecuteOnGetFolders(ContactsApi.GetFoldersApiResponse apiResponse)
        {
            OnGetFolders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolders(Exception exception)
        {
            OnErrorGetFolders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetList;

        internal void ExecuteOnGetList(ContactsApi.GetListApiResponse apiResponse)
        {
            OnGetList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetList(Exception exception)
        {
            OnErrorGetList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLists;

        internal void ExecuteOnGetLists(ContactsApi.GetListsApiResponse apiResponse)
        {
            OnGetLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLists(Exception exception)
        {
            OnErrorGetLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSegments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSegments;

        internal void ExecuteOnGetSegments(ContactsApi.GetSegmentsApiResponse apiResponse)
        {
            OnGetSegments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSegments(Exception exception)
        {
            OnErrorGetSegments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImportContacts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImportContacts;

        internal void ExecuteOnImportContacts(ContactsApi.ImportContactsApiResponse apiResponse)
        {
            OnImportContacts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImportContacts(Exception exception)
        {
            OnErrorImportContacts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveContactFromList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveContactFromList;

        internal void ExecuteOnRemoveContactFromList(ContactsApi.RemoveContactFromListApiResponse apiResponse)
        {
            OnRemoveContactFromList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveContactFromList(Exception exception)
        {
            OnErrorRemoveContactFromList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRequestContactExport;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRequestContactExport;

        internal void ExecuteOnRequestContactExport(ContactsApi.RequestContactExportApiResponse apiResponse)
        {
            OnRequestContactExport?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRequestContactExport(Exception exception)
        {
            OnErrorRequestContactExport?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAttribute;

        internal void ExecuteOnUpdateAttribute(AttributesApi.UpdateAttributeApiResponse apiResponse)
        {
            OnUpdateAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAttribute(Exception exception)
        {
            OnErrorUpdateAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateContact;

        internal void ExecuteOnUpdateContact(ContactsApi.UpdateContactApiResponse apiResponse)
        {
            OnUpdateContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateContact(Exception exception)
        {
            OnErrorUpdateContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFolder;

        internal void ExecuteOnUpdateFolder(ContactsApi.UpdateFolderApiResponse apiResponse)
        {
            OnUpdateFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFolder(Exception exception)
        {
            OnErrorUpdateFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateList;

        internal void ExecuteOnUpdateList(ContactsApi.UpdateListApiResponse apiResponse)
        {
            OnUpdateList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateList(Exception exception)
        {
            OnErrorUpdateList?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContactsApi : IContactsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContactsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContactsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(ILogger<ContactsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContactsApiEvents contactsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContactsApi>();
            HttpClient = httpClient;
            Events = contactsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddContactToList(ref long listId, AddContactToList contactEmails);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactEmails"></param>
        /// <returns></returns>
        private void ValidateAddContactToList(AddContactToList contactEmails)
        {
            if (contactEmails == null)
                throw new ArgumentNullException(nameof(contactEmails));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void AfterAddContactToListDefaultImplementation(IAddContactToListApiResponse apiResponseLocalVar, long listId, AddContactToList contactEmails)
        {
            bool suppressDefaultLog = false;
            AfterAddContactToList(ref suppressDefaultLog, apiResponseLocalVar, listId, contactEmails);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void AfterAddContactToList(ref bool suppressDefaultLog, IAddContactToListApiResponse apiResponseLocalVar, long listId, AddContactToList contactEmails);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void OnErrorAddContactToListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, AddContactToList contactEmails)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddContactToList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, contactEmails);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void OnErrorAddContactToList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, AddContactToList contactEmails);

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        public async Task<IAddContactToListApiResponse?> AddContactToListOrDefaultAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddContactToListAsync(listId, contactEmails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        public async Task<IAddContactToListApiResponse> AddContactToListAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddContactToList(contactEmails);

                FormatAddContactToList(ref listId, contactEmails);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts/add");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactEmails as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactEmails, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddContactToListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddContactToListApiResponse>();

                        AddContactToListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddContactToListDefaultImplementation(apiResponseLocalVar, listId, contactEmails);

                        Events.ExecuteOnAddContactToList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddContactToListDefaultImplementation(e, "/contacts/lists/{listId}/contacts/add", uriBuilderLocalVar.Path, listId, contactEmails);
                Events.ExecuteOnErrorAddContactToList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddContactToListApiResponse"/>
        /// </summary>
        public partial class AddContactToListApiResponse : BrevoDotNet.Client.ApiResponse, IAddContactToListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddContactToListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddContactToListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddContactToListApiResponse(ILogger<AddContactToListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.PostContactInfo? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.PostContactInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.PostContactInfo? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateAttribute(ref string attributeCategory, ref string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        /// <returns></returns>
        private void ValidateCreateAttribute(string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));

            if (createAttribute == null)
                throw new ArgumentNullException(nameof(createAttribute));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        private void AfterCreateAttributeDefaultImplementation(ICreateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            bool suppressDefaultLog = false;
            AfterCreateAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName, createAttribute);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        partial void AfterCreateAttribute(ref bool suppressDefaultLog, ICreateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        private void OnErrorCreateAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName, createAttribute);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        partial void OnErrorCreateAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        public async Task<ICreateAttributeApiResponse?> CreateAttributeOrDefaultAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAttributeAsync(attributeCategory, attributeName, createAttribute, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        public async Task<ICreateAttributeApiResponse> CreateAttributeAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAttribute(attributeCategory, attributeName, createAttribute);

                FormatCreateAttribute(ref attributeCategory, ref attributeName, createAttribute);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    httpRequestMessageLocalVar.Content = (createAttribute as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createAttribute, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AttributesApi.CreateAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AttributesApi.CreateAttributeApiResponse>();

                        AttributesApi.CreateAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName, createAttribute);

                        Events.ExecuteOnCreateAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName, createAttribute);
                Events.ExecuteOnErrorCreateAttribute(e);
                throw;
            }
        }

        partial void FormatCreateContact(CreateContact createContact);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createContact"></param>
        /// <returns></returns>
        private void ValidateCreateContact(CreateContact createContact)
        {
            if (createContact == null)
                throw new ArgumentNullException(nameof(createContact));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createContact"></param>
        private void AfterCreateContactDefaultImplementation(ICreateContactApiResponse apiResponseLocalVar, CreateContact createContact)
        {
            bool suppressDefaultLog = false;
            AfterCreateContact(ref suppressDefaultLog, apiResponseLocalVar, createContact);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createContact"></param>
        partial void AfterCreateContact(ref bool suppressDefaultLog, ICreateContactApiResponse apiResponseLocalVar, CreateContact createContact);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createContact"></param>
        private void OnErrorCreateContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateContact createContact)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createContact);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createContact"></param>
        partial void OnErrorCreateContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateContact createContact);

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <param name="createContact">Values to create a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        public async Task<ICreateContactApiResponse?> CreateContactOrDefaultAsync(CreateContact createContact, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateContactAsync(createContact, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a contact 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContact">Values to create a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        public async Task<ICreateContactApiResponse> CreateContactAsync(CreateContact createContact, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateContact(createContact);

                FormatCreateContact(createContact);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts");

                    httpRequestMessageLocalVar.Content = (createContact as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createContact, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateContactApiResponse>();

                        CreateContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateContactDefaultImplementation(apiResponseLocalVar, createContact);

                        Events.ExecuteOnCreateContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateContactDefaultImplementation(e, "/contacts", uriBuilderLocalVar.Path, createContact);
                Events.ExecuteOnErrorCreateContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateContactApiResponse"/>
        /// </summary>
        public partial class CreateContactApiResponse : BrevoDotNet.Client.ApiResponse, ICreateContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateContactApiResponse(ILogger<CreateContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreateUpdateContactModel? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreateUpdateContactModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.CreateUpdateContactModel? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreateUpdateContactModel? NoContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNoContent
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreateUpdateContactModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNoContent([NotNullWhen(true)]out BrevoDotNet.Model.CreateUpdateContactModel? result)
            {
                result = null;

                try
                {
                    result = NoContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)204);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ContactErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ContactErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ContactErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateDoiContact(CreateDoiContact createDoiContact);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createDoiContact"></param>
        /// <returns></returns>
        private void ValidateCreateDoiContact(CreateDoiContact createDoiContact)
        {
            if (createDoiContact == null)
                throw new ArgumentNullException(nameof(createDoiContact));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createDoiContact"></param>
        private void AfterCreateDoiContactDefaultImplementation(ICreateDoiContactApiResponse apiResponseLocalVar, CreateDoiContact createDoiContact)
        {
            bool suppressDefaultLog = false;
            AfterCreateDoiContact(ref suppressDefaultLog, apiResponseLocalVar, createDoiContact);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createDoiContact"></param>
        partial void AfterCreateDoiContact(ref bool suppressDefaultLog, ICreateDoiContactApiResponse apiResponseLocalVar, CreateDoiContact createDoiContact);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createDoiContact"></param>
        private void OnErrorCreateDoiContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateDoiContact createDoiContact)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateDoiContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createDoiContact);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createDoiContact"></param>
        partial void OnErrorCreateDoiContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateDoiContact createDoiContact);

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDoiContactApiResponse"/>&gt;</returns>
        public async Task<ICreateDoiContactApiResponse?> CreateDoiContactOrDefaultAsync(CreateDoiContact createDoiContact, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateDoiContactAsync(createDoiContact, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Contact via DOI (Double-Opt-In) Flow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateDoiContactApiResponse"/>&gt;</returns>
        public async Task<ICreateDoiContactApiResponse> CreateDoiContactAsync(CreateDoiContact createDoiContact, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateDoiContact(createDoiContact);

                FormatCreateDoiContact(createDoiContact);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/doubleOptinConfirmation"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/doubleOptinConfirmation");

                    httpRequestMessageLocalVar.Content = (createDoiContact as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createDoiContact, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateDoiContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateDoiContactApiResponse>();

                        CreateDoiContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/doubleOptinConfirmation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateDoiContactDefaultImplementation(apiResponseLocalVar, createDoiContact);

                        Events.ExecuteOnCreateDoiContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateDoiContactDefaultImplementation(e, "/contacts/doubleOptinConfirmation", uriBuilderLocalVar.Path, createDoiContact);
                Events.ExecuteOnErrorCreateDoiContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateDoiContactApiResponse"/>
        /// </summary>
        public partial class CreateDoiContactApiResponse : BrevoDotNet.Client.ApiResponse, ICreateDoiContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateDoiContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateDoiContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateDoiContactApiResponse(ILogger<CreateDoiContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateFolder(CreateUpdateFolder createFolder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createFolder"></param>
        /// <returns></returns>
        private void ValidateCreateFolder(CreateUpdateFolder createFolder)
        {
            if (createFolder == null)
                throw new ArgumentNullException(nameof(createFolder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFolder"></param>
        private void AfterCreateFolderDefaultImplementation(ICreateFolderApiResponse apiResponseLocalVar, CreateUpdateFolder createFolder)
        {
            bool suppressDefaultLog = false;
            AfterCreateFolder(ref suppressDefaultLog, apiResponseLocalVar, createFolder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFolder"></param>
        partial void AfterCreateFolder(ref bool suppressDefaultLog, ICreateFolderApiResponse apiResponseLocalVar, CreateUpdateFolder createFolder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFolder"></param>
        private void OnErrorCreateFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateUpdateFolder createFolder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createFolder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFolder"></param>
        partial void OnErrorCreateFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateUpdateFolder createFolder);

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiResponse?> CreateFolderOrDefaultAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateFolderAsync(createFolder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiResponse> CreateFolderAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateFolder(createFolder);

                FormatCreateFolder(createFolder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders");

                    httpRequestMessageLocalVar.Content = (createFolder as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createFolder, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateFolderApiResponse>();

                        CreateFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateFolderDefaultImplementation(apiResponseLocalVar, createFolder);

                        Events.ExecuteOnCreateFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateFolderDefaultImplementation(e, "/contacts/folders", uriBuilderLocalVar.Path, createFolder);
                Events.ExecuteOnErrorCreateFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateFolderApiResponse"/>
        /// </summary>
        public partial class CreateFolderApiResponse : BrevoDotNet.Client.ApiResponse, ICreateFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateFolderApiResponse(ILogger<CreateFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreateModel? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreateModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.CreateModel? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateList(CreateList createList);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createList"></param>
        /// <returns></returns>
        private void ValidateCreateList(CreateList createList)
        {
            if (createList == null)
                throw new ArgumentNullException(nameof(createList));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createList"></param>
        private void AfterCreateListDefaultImplementation(ICreateListApiResponse apiResponseLocalVar, CreateList createList)
        {
            bool suppressDefaultLog = false;
            AfterCreateList(ref suppressDefaultLog, apiResponseLocalVar, createList);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createList"></param>
        partial void AfterCreateList(ref bool suppressDefaultLog, ICreateListApiResponse apiResponseLocalVar, CreateList createList);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createList"></param>
        private void OnErrorCreateListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateList createList)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createList);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createList"></param>
        partial void OnErrorCreateList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateList createList);

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        public async Task<ICreateListApiResponse?> CreateListOrDefaultAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateListAsync(createList, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        public async Task<ICreateListApiResponse> CreateListAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateList(createList);

                FormatCreateList(createList);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists");

                    httpRequestMessageLocalVar.Content = (createList as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createList, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateListApiResponse>();

                        CreateListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateListDefaultImplementation(apiResponseLocalVar, createList);

                        Events.ExecuteOnCreateList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateListDefaultImplementation(e, "/contacts/lists", uriBuilderLocalVar.Path, createList);
                Events.ExecuteOnErrorCreateList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateListApiResponse"/>
        /// </summary>
        public partial class CreateListApiResponse : BrevoDotNet.Client.ApiResponse, ICreateListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateListApiResponse(ILogger<CreateListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreateModel? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreateModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.CreateModel? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAttribute(ref string attributeCategory, ref string attributeName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <returns></returns>
        private void ValidateDeleteAttribute(string attributeCategory, string attributeName)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        private void AfterDeleteAttributeDefaultImplementation(IDeleteAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        partial void AfterDeleteAttribute(ref bool suppressDefaultLog, IDeleteAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        private void OnErrorDeleteAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        partial void OnErrorDeleteAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName);

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        public async Task<IDeleteAttributeApiResponse?> DeleteAttributeOrDefaultAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAttributeAsync(attributeCategory, attributeName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        public async Task<IDeleteAttributeApiResponse> DeleteAttributeAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAttribute(attributeCategory, attributeName);

                FormatDeleteAttribute(ref attributeCategory, ref attributeName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AttributesApi.DeleteAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AttributesApi.DeleteAttributeApiResponse>();

                        AttributesApi.DeleteAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName);

                        Events.ExecuteOnDeleteAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName);
                Events.ExecuteOnErrorDeleteAttribute(e);
                throw;
            }
        }

        partial void FormatDeleteContact(ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateDeleteContact(string email)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        private void AfterDeleteContactDefaultImplementation(IDeleteContactApiResponse apiResponseLocalVar, string email)
        {
            bool suppressDefaultLog = false;
            AfterDeleteContact(ref suppressDefaultLog, apiResponseLocalVar, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        partial void AfterDeleteContact(ref bool suppressDefaultLog, IDeleteContactApiResponse apiResponseLocalVar, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        private void OnErrorDeleteContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, email);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        partial void OnErrorDeleteContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email);

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactApiResponse?> DeleteContactOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteContactAsync(email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a contact 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactApiResponse> DeleteContactAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteContact(email);

                FormatDeleteContact(ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/{email}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/{email}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bemail%7D", Uri.EscapeDataString(email.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteContactApiResponse>();

                        DeleteContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/{email}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteContactDefaultImplementation(apiResponseLocalVar, email);

                        Events.ExecuteOnDeleteContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteContactDefaultImplementation(e, "/contacts/{email}", uriBuilderLocalVar.Path, email);
                Events.ExecuteOnErrorDeleteContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteContactApiResponse"/>
        /// </summary>
        public partial class DeleteContactApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteContactApiResponse(ILogger<DeleteContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? MethodNotAllowed()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsMethodNotAllowed
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryMethodNotAllowed([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = MethodNotAllowed();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)405);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFolder(ref long folderId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        private void AfterDeleteFolderDefaultImplementation(IDeleteFolderApiResponse apiResponseLocalVar, long folderId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        partial void AfterDeleteFolder(ref bool suppressDefaultLog, IDeleteFolderApiResponse apiResponseLocalVar, long folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        private void OnErrorDeleteFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        partial void OnErrorDeleteFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId);

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderApiResponse?> DeleteFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFolderAsync(folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderApiResponse> DeleteFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteFolder(ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFolderApiResponse>();

                        DeleteFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFolderDefaultImplementation(apiResponseLocalVar, folderId);

                        Events.ExecuteOnDeleteFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId);
                Events.ExecuteOnErrorDeleteFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFolderApiResponse"/>
        /// </summary>
        public partial class DeleteFolderApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFolderApiResponse(ILogger<DeleteFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteList(ref long listId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        private void AfterDeleteListDefaultImplementation(IDeleteListApiResponse apiResponseLocalVar, long listId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteList(ref suppressDefaultLog, apiResponseLocalVar, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        partial void AfterDeleteList(ref bool suppressDefaultLog, IDeleteListApiResponse apiResponseLocalVar, long listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        private void OnErrorDeleteListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        partial void OnErrorDeleteList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId);

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        public async Task<IDeleteListApiResponse?> DeleteListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteListAsync(listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        public async Task<IDeleteListApiResponse> DeleteListAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteList(ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteListApiResponse>();

                        DeleteListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteListDefaultImplementation(apiResponseLocalVar, listId);

                        Events.ExecuteOnDeleteList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId);
                Events.ExecuteOnErrorDeleteList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteListApiResponse"/>
        /// </summary>
        public partial class DeleteListApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteListApiResponse(ILogger<DeleteListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAttributesDefaultImplementation(IGetAttributesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAttributes(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAttributes(ref bool suppressDefaultLog, IGetAttributesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAttributesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAttributes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAttributes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAttributesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse> GetAttributesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AttributesApi.GetAttributesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AttributesApi.GetAttributesApiResponse>();

                        AttributesApi.GetAttributesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAttributesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAttributes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAttributesDefaultImplementation(e, "/contacts/attributes", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAttributes(e);
                throw;
            }
        }

        partial void FormatGetContactInfo(ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateGetContactInfo(string email)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        private void AfterGetContactInfoDefaultImplementation(IGetContactInfoApiResponse apiResponseLocalVar, string email)
        {
            bool suppressDefaultLog = false;
            AfterGetContactInfo(ref suppressDefaultLog, apiResponseLocalVar, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        partial void AfterGetContactInfo(ref bool suppressDefaultLog, IGetContactInfoApiResponse apiResponseLocalVar, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        private void OnErrorGetContactInfoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactInfo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, email);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        partial void OnErrorGetContactInfo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email);

        /// <summary>
        /// Get a contact&#39;s details 
        /// </summary>
        /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactInfoApiResponse"/>&gt;</returns>
        public async Task<IGetContactInfoApiResponse?> GetContactInfoOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactInfoAsync(email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a contact&#39;s details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactInfoApiResponse"/>&gt;</returns>
        public async Task<IGetContactInfoApiResponse> GetContactInfoAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactInfo(email);

                FormatGetContactInfo(ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/{email}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/{email}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bemail%7D", Uri.EscapeDataString(email.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactInfoApiResponse>();

                        GetContactInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/{email}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactInfoDefaultImplementation(apiResponseLocalVar, email);

                        Events.ExecuteOnGetContactInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactInfoDefaultImplementation(e, "/contacts/{email}", uriBuilderLocalVar.Path, email);
                Events.ExecuteOnErrorGetContactInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactInfoApiResponse"/>
        /// </summary>
        public partial class GetContactInfoApiResponse : BrevoDotNet.Client.ApiResponse, IGetContactInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactInfoApiResponse(ILogger<GetContactInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetExtendedContactDetails? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetExtendedContactDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetExtendedContactDetails? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactStats(ref string email, ref Option<DateOnly> startDate, ref Option<DateOnly> endDate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateGetContactStats(string email)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        private void AfterGetContactStatsDefaultImplementation(IGetContactStatsApiResponse apiResponseLocalVar, string email, Option<DateOnly> startDate, Option<DateOnly> endDate)
        {
            bool suppressDefaultLog = false;
            AfterGetContactStats(ref suppressDefaultLog, apiResponseLocalVar, email, startDate, endDate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        partial void AfterGetContactStats(ref bool suppressDefaultLog, IGetContactStatsApiResponse apiResponseLocalVar, string email, Option<DateOnly> startDate, Option<DateOnly> endDate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        private void OnErrorGetContactStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email, Option<DateOnly> startDate, Option<DateOnly> endDate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, email, startDate, endDate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        partial void OnErrorGetContactStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email, Option<DateOnly> startDate, Option<DateOnly> endDate);

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <param name="email">Email address (urlencoded) of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactStatsApiResponse"/>&gt;</returns>
        public async Task<IGetContactStatsApiResponse?> GetContactStatsOrDefaultAsync(string email, Option<DateOnly> startDate = default, Option<DateOnly> endDate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactStatsAsync(email, startDate, endDate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get email campaigns&#39; statistics for a contact 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address (urlencoded) of the contact</param>
        /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate (optional)</param>
        /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactStatsApiResponse"/>&gt;</returns>
        public async Task<IGetContactStatsApiResponse> GetContactStatsAsync(string email, Option<DateOnly> startDate = default, Option<DateOnly> endDate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactStats(email);

                FormatGetContactStats(ref email, ref startDate, ref endDate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/{email}/campaignStats"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/{email}/campaignStats");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bemail%7D", Uri.EscapeDataString(email.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactStatsApiResponse>();

                        GetContactStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/{email}/campaignStats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactStatsDefaultImplementation(apiResponseLocalVar, email, startDate, endDate);

                        Events.ExecuteOnGetContactStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactStatsDefaultImplementation(e, "/contacts/{email}/campaignStats", uriBuilderLocalVar.Path, email, startDate, endDate);
                Events.ExecuteOnErrorGetContactStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactStatsApiResponse"/>
        /// </summary>
        public partial class GetContactStatsApiResponse : BrevoDotNet.Client.ApiResponse, IGetContactStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactStatsApiResponse(ILogger<GetContactStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetContactCampaignStats? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetContactCampaignStats>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetContactCampaignStats? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContacts(ref Option<long> limit, ref Option<long> offset, ref Option<DateTime> modifiedSince, ref Option<DateTime> createdSince, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetContacts(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="createdSince"></param>
        /// <param name="sort"></param>
        private void AfterGetContactsDefaultImplementation(IGetContactsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<DateTime> modifiedSince, Option<DateTime> createdSince, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetContacts(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, modifiedSince, createdSince, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="createdSince"></param>
        /// <param name="sort"></param>
        partial void AfterGetContacts(ref bool suppressDefaultLog, IGetContactsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<DateTime> modifiedSince, Option<DateTime> createdSince, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="createdSince"></param>
        /// <param name="sort"></param>
        private void OnErrorGetContactsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<DateTime> modifiedSince, Option<DateTime> createdSince, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContacts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, modifiedSince, createdSince, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="createdSince"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetContacts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<DateTime> modifiedSince, Option<DateTime> createdSince, Option<string> sort);

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        public async Task<IGetContactsApiResponse?> GetContactsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<DateTime> modifiedSince = default, Option<DateTime> createdSince = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactsAsync(limit, offset, modifiedSince, createdSince, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the contacts 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        public async Task<IGetContactsApiResponse> GetContactsAsync(Option<long> limit = default, Option<long> offset = default, Option<DateTime> modifiedSince = default, Option<DateTime> createdSince = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContacts(sort);

                FormatGetContacts(ref limit, ref offset, ref modifiedSince, ref createdSince, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (modifiedSince.IsSet)
                        parseQueryStringLocalVar["modifiedSince"] = ClientUtils.ParameterToString(modifiedSince.Value);

                    if (createdSince.IsSet)
                        parseQueryStringLocalVar["createdSince"] = ClientUtils.ParameterToString(createdSince.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactsApiResponse>();

                        GetContactsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactsDefaultImplementation(apiResponseLocalVar, limit, offset, modifiedSince, createdSince, sort);

                        Events.ExecuteOnGetContacts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactsDefaultImplementation(e, "/contacts", uriBuilderLocalVar.Path, limit, offset, modifiedSince, createdSince, sort);
                Events.ExecuteOnErrorGetContacts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactsApiResponse"/>
        /// </summary>
        public partial class GetContactsApiResponse : BrevoDotNet.Client.ApiResponse, IGetContactsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactsApiResponse(ILogger<GetContactsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetContacts? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetContacts>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetContacts? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactsFromList(ref long listId, ref Option<DateTime> modifiedSince, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetContactsFromList(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetContactsFromListDefaultImplementation(IGetContactsFromListApiResponse apiResponseLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetContactsFromList(ref suppressDefaultLog, apiResponseLocalVar, listId, modifiedSince, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetContactsFromList(ref bool suppressDefaultLog, IGetContactsFromListApiResponse apiResponseLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetContactsFromListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactsFromList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, modifiedSince, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetContactsFromList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        public async Task<IGetContactsFromListApiResponse?> GetContactsFromListOrDefaultAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactsFromListAsync(listId, modifiedSince, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        public async Task<IGetContactsFromListApiResponse> GetContactsFromListAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactsFromList(sort);

                FormatGetContactsFromList(ref listId, ref modifiedSince, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (modifiedSince.IsSet)
                        parseQueryStringLocalVar["modifiedSince"] = ClientUtils.ParameterToString(modifiedSince.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactsFromListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactsFromListApiResponse>();

                        GetContactsFromListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactsFromListDefaultImplementation(apiResponseLocalVar, listId, modifiedSince, limit, offset, sort);

                        Events.ExecuteOnGetContactsFromList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactsFromListDefaultImplementation(e, "/contacts/lists/{listId}/contacts", uriBuilderLocalVar.Path, listId, modifiedSince, limit, offset, sort);
                Events.ExecuteOnErrorGetContactsFromList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactsFromListApiResponse"/>
        /// </summary>
        public partial class GetContactsFromListApiResponse : BrevoDotNet.Client.ApiResponse, IGetContactsFromListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactsFromListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactsFromListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactsFromListApiResponse(ILogger<GetContactsFromListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetContacts? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetContacts>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetContacts? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFolder(ref long folderId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        private void AfterGetFolderDefaultImplementation(IGetFolderApiResponse apiResponseLocalVar, long folderId)
        {
            bool suppressDefaultLog = false;
            AfterGetFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        partial void AfterGetFolder(ref bool suppressDefaultLog, IGetFolderApiResponse apiResponseLocalVar, long folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        private void OnErrorGetFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        partial void OnErrorGetFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId);

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        public async Task<IGetFolderApiResponse?> GetFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderAsync(folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        public async Task<IGetFolderApiResponse> GetFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFolder(ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFolderApiResponse>();

                        GetFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderDefaultImplementation(apiResponseLocalVar, folderId);

                        Events.ExecuteOnGetFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId);
                Events.ExecuteOnErrorGetFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFolderApiResponse"/>
        /// </summary>
        public partial class GetFolderApiResponse : BrevoDotNet.Client.ApiResponse, IGetFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFolderApiResponse(ILogger<GetFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetFolder? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetFolder>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetFolder? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFolderLists(ref long folderId, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetFolderLists(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetFolderListsDefaultImplementation(IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetFolderLists(ref suppressDefaultLog, apiResponseLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetFolderLists(ref bool suppressDefaultLog, IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetFolderListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolderLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetFolderLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderListsAsync(folderId, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolderLists(sort);

                FormatGetFolderLists(ref folderId, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}/lists");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFolderListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFolderListsApiResponse>();

                        GetFolderListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderListsDefaultImplementation(apiResponseLocalVar, folderId, limit, offset, sort);

                        Events.ExecuteOnGetFolderLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderListsDefaultImplementation(e, "/contacts/folders/{folderId}/lists", uriBuilderLocalVar.Path, folderId, limit, offset, sort);
                Events.ExecuteOnErrorGetFolderLists(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFolderListsApiResponse"/>
        /// </summary>
        public partial class GetFolderListsApiResponse : BrevoDotNet.Client.ApiResponse, IGetFolderListsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFolderListsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFolderListsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFolderListsApiResponse(ILogger<GetFolderListsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetFolderLists? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetFolderLists>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetFolderLists? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFolders(ref long limit, ref long offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetFolders(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetFoldersDefaultImplementation(IGetFoldersApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetFolders(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetFolders(ref bool suppressDefaultLog, IGetFoldersApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetFoldersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetFolders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiResponse?> GetFoldersOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFoldersAsync(limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiResponse> GetFoldersAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolders(sort);

                FormatGetFolders(ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit);
                    parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFoldersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFoldersApiResponse>();

                        GetFoldersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFoldersDefaultImplementation(apiResponseLocalVar, limit, offset, sort);

                        Events.ExecuteOnGetFolders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFoldersDefaultImplementation(e, "/contacts/folders", uriBuilderLocalVar.Path, limit, offset, sort);
                Events.ExecuteOnErrorGetFolders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFoldersApiResponse"/>
        /// </summary>
        public partial class GetFoldersApiResponse : BrevoDotNet.Client.ApiResponse, IGetFoldersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFoldersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFoldersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFoldersApiResponse(ILogger<GetFoldersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetFolders? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetFolders>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetFolders? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetList(ref long listId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        private void AfterGetListDefaultImplementation(IGetListApiResponse apiResponseLocalVar, long listId)
        {
            bool suppressDefaultLog = false;
            AfterGetList(ref suppressDefaultLog, apiResponseLocalVar, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        partial void AfterGetList(ref bool suppressDefaultLog, IGetListApiResponse apiResponseLocalVar, long listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        private void OnErrorGetListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        partial void OnErrorGetList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId);

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        public async Task<IGetListApiResponse?> GetListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListAsync(listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        public async Task<IGetListApiResponse> GetListAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetList(ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListApiResponse>();

                        GetListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListDefaultImplementation(apiResponseLocalVar, listId);

                        Events.ExecuteOnGetList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId);
                Events.ExecuteOnErrorGetList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListApiResponse"/>
        /// </summary>
        public partial class GetListApiResponse : BrevoDotNet.Client.ApiResponse, IGetListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListApiResponse(ILogger<GetListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetExtendedList? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetExtendedList>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetExtendedList? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLists(ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetLists(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetListsDefaultImplementation(IGetListsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetLists(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetLists(ref bool suppressDefaultLog, IGetListsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        public async Task<IGetListsApiResponse?> GetListsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListsAsync(limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        public async Task<IGetListsApiResponse> GetListsAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLists(sort);

                FormatGetLists(ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListsApiResponse>();

                        GetListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListsDefaultImplementation(apiResponseLocalVar, limit, offset, sort);

                        Events.ExecuteOnGetLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListsDefaultImplementation(e, "/contacts/lists", uriBuilderLocalVar.Path, limit, offset, sort);
                Events.ExecuteOnErrorGetLists(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListsApiResponse"/>
        /// </summary>
        public partial class GetListsApiResponse : BrevoDotNet.Client.ApiResponse, IGetListsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListsApiResponse(ILogger<GetListsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetLists? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetLists>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetLists? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSegments(ref long limit, ref long offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetSegments(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetSegmentsDefaultImplementation(IGetSegmentsApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetSegments(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetSegments(ref bool suppressDefaultLog, IGetSegmentsApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetSegmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSegments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetSegments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Get all the segments 
        /// </summary>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSegmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSegmentsApiResponse?> GetSegmentsOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSegmentsAsync(limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the segments 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSegmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSegmentsApiResponse> GetSegmentsAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSegments(sort);

                FormatGetSegments(ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/segments"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/segments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit);
                    parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSegmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSegmentsApiResponse>();

                        GetSegmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/segments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSegmentsDefaultImplementation(apiResponseLocalVar, limit, offset, sort);

                        Events.ExecuteOnGetSegments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSegmentsDefaultImplementation(e, "/contacts/segments", uriBuilderLocalVar.Path, limit, offset, sort);
                Events.ExecuteOnErrorGetSegments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSegmentsApiResponse"/>
        /// </summary>
        public partial class GetSegmentsApiResponse : BrevoDotNet.Client.ApiResponse, IGetSegmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSegmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSegmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSegmentsApiResponse(ILogger<GetSegmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetSegments? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetSegments>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetSegments? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImportContacts(RequestContactImport requestContactImport);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestContactImport"></param>
        /// <returns></returns>
        private void ValidateImportContacts(RequestContactImport requestContactImport)
        {
            if (requestContactImport == null)
                throw new ArgumentNullException(nameof(requestContactImport));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestContactImport"></param>
        private void AfterImportContactsDefaultImplementation(IImportContactsApiResponse apiResponseLocalVar, RequestContactImport requestContactImport)
        {
            bool suppressDefaultLog = false;
            AfterImportContacts(ref suppressDefaultLog, apiResponseLocalVar, requestContactImport);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestContactImport"></param>
        partial void AfterImportContacts(ref bool suppressDefaultLog, IImportContactsApiResponse apiResponseLocalVar, RequestContactImport requestContactImport);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestContactImport"></param>
        private void OnErrorImportContactsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RequestContactImport requestContactImport)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImportContacts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, requestContactImport);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestContactImport"></param>
        partial void OnErrorImportContacts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RequestContactImport requestContactImport);

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportContactsApiResponse"/>&gt;</returns>
        public async Task<IImportContactsApiResponse?> ImportContactsOrDefaultAsync(RequestContactImport requestContactImport, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImportContactsAsync(requestContactImport, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import contacts It returns the background process ID which on completion calls the notify URL that you have set in the input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportContactsApiResponse"/>&gt;</returns>
        public async Task<IImportContactsApiResponse> ImportContactsAsync(RequestContactImport requestContactImport, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImportContacts(requestContactImport);

                FormatImportContacts(requestContactImport);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/import"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/import");

                    httpRequestMessageLocalVar.Content = (requestContactImport as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestContactImport, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImportContactsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImportContactsApiResponse>();

                        ImportContactsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/import", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImportContactsDefaultImplementation(apiResponseLocalVar, requestContactImport);

                        Events.ExecuteOnImportContacts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImportContactsDefaultImplementation(e, "/contacts/import", uriBuilderLocalVar.Path, requestContactImport);
                Events.ExecuteOnErrorImportContacts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImportContactsApiResponse"/>
        /// </summary>
        public partial class ImportContactsApiResponse : BrevoDotNet.Client.ApiResponse, IImportContactsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImportContactsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImportContactsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImportContactsApiResponse(ILogger<ImportContactsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreatedProcessId? Accepted()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsAccepted
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreatedProcessId>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAccepted([NotNullWhen(true)]out BrevoDotNet.Model.CreatedProcessId? result)
            {
                result = null;

                try
                {
                    result = Accepted();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)202);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveContactFromList(ref long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactEmails"></param>
        /// <returns></returns>
        private void ValidateRemoveContactFromList(RemoveContactFromList contactEmails)
        {
            if (contactEmails == null)
                throw new ArgumentNullException(nameof(contactEmails));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void AfterRemoveContactFromListDefaultImplementation(IRemoveContactFromListApiResponse apiResponseLocalVar, long listId, RemoveContactFromList contactEmails)
        {
            bool suppressDefaultLog = false;
            AfterRemoveContactFromList(ref suppressDefaultLog, apiResponseLocalVar, listId, contactEmails);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void AfterRemoveContactFromList(ref bool suppressDefaultLog, IRemoveContactFromListApiResponse apiResponseLocalVar, long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void OnErrorRemoveContactFromListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, RemoveContactFromList contactEmails)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveContactFromList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, contactEmails);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void OnErrorRemoveContactFromList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        public async Task<IRemoveContactFromListApiResponse?> RemoveContactFromListOrDefaultAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveContactFromListAsync(listId, contactEmails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        public async Task<IRemoveContactFromListApiResponse> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveContactFromList(contactEmails);

                FormatRemoveContactFromList(ref listId, contactEmails);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts/remove"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts/remove");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactEmails as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactEmails, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveContactFromListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveContactFromListApiResponse>();

                        RemoveContactFromListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveContactFromListDefaultImplementation(apiResponseLocalVar, listId, contactEmails);

                        Events.ExecuteOnRemoveContactFromList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveContactFromListDefaultImplementation(e, "/contacts/lists/{listId}/contacts/remove", uriBuilderLocalVar.Path, listId, contactEmails);
                Events.ExecuteOnErrorRemoveContactFromList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveContactFromListApiResponse"/>
        /// </summary>
        public partial class RemoveContactFromListApiResponse : BrevoDotNet.Client.ApiResponse, IRemoveContactFromListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveContactFromListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveContactFromListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveContactFromListApiResponse(ILogger<RemoveContactFromListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.PostContactInfo? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.PostContactInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BrevoDotNet.Model.PostContactInfo? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRequestContactExport(RequestContactExport requestContactExport);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestContactExport"></param>
        /// <returns></returns>
        private void ValidateRequestContactExport(RequestContactExport requestContactExport)
        {
            if (requestContactExport == null)
                throw new ArgumentNullException(nameof(requestContactExport));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestContactExport"></param>
        private void AfterRequestContactExportDefaultImplementation(IRequestContactExportApiResponse apiResponseLocalVar, RequestContactExport requestContactExport)
        {
            bool suppressDefaultLog = false;
            AfterRequestContactExport(ref suppressDefaultLog, apiResponseLocalVar, requestContactExport);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestContactExport"></param>
        partial void AfterRequestContactExport(ref bool suppressDefaultLog, IRequestContactExportApiResponse apiResponseLocalVar, RequestContactExport requestContactExport);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestContactExport"></param>
        private void OnErrorRequestContactExportDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RequestContactExport requestContactExport)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRequestContactExport(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, requestContactExport);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="requestContactExport"></param>
        partial void OnErrorRequestContactExport(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RequestContactExport requestContactExport);

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRequestContactExportApiResponse"/>&gt;</returns>
        public async Task<IRequestContactExportApiResponse?> RequestContactExportOrDefaultAsync(RequestContactExport requestContactExport, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RequestContactExportAsync(requestContactExport, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export contacts It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestContactExport">Values to request a contact export</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRequestContactExportApiResponse"/>&gt;</returns>
        public async Task<IRequestContactExportApiResponse> RequestContactExportAsync(RequestContactExport requestContactExport, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRequestContactExport(requestContactExport);

                FormatRequestContactExport(requestContactExport);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/export");

                    httpRequestMessageLocalVar.Content = (requestContactExport as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(requestContactExport, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RequestContactExportApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RequestContactExportApiResponse>();

                        RequestContactExportApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRequestContactExportDefaultImplementation(apiResponseLocalVar, requestContactExport);

                        Events.ExecuteOnRequestContactExport(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRequestContactExportDefaultImplementation(e, "/contacts/export", uriBuilderLocalVar.Path, requestContactExport);
                Events.ExecuteOnErrorRequestContactExport(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RequestContactExportApiResponse"/>
        /// </summary>
        public partial class RequestContactExportApiResponse : BrevoDotNet.Client.ApiResponse, IRequestContactExportApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RequestContactExportApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RequestContactExportApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RequestContactExportApiResponse(ILogger<RequestContactExportApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.CreatedProcessId? Accepted()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsAccepted
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.CreatedProcessId>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAccepted([NotNullWhen(true)]out BrevoDotNet.Model.CreatedProcessId? result)
            {
                result = null;

                try
                {
                    result = Accepted();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)202);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAttribute(ref string attributeCategory, ref string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        /// <returns></returns>
        private void ValidateUpdateAttribute(string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));

            if (updateAttribute == null)
                throw new ArgumentNullException(nameof(updateAttribute));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        private void AfterUpdateAttributeDefaultImplementation(IUpdateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName, updateAttribute);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        partial void AfterUpdateAttribute(ref bool suppressDefaultLog, IUpdateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        private void OnErrorUpdateAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName, updateAttribute);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        partial void OnErrorUpdateAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        public async Task<IUpdateAttributeApiResponse?> UpdateAttributeOrDefaultAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAttributeAsync(attributeCategory, attributeName, updateAttribute, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        public async Task<IUpdateAttributeApiResponse> UpdateAttributeAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAttribute(attributeCategory, attributeName, updateAttribute);

                FormatUpdateAttribute(ref attributeCategory, ref attributeName, updateAttribute);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    httpRequestMessageLocalVar.Content = (updateAttribute as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateAttribute, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AttributesApi.UpdateAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AttributesApi.UpdateAttributeApiResponse>();

                        AttributesApi.UpdateAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName, updateAttribute);

                        Events.ExecuteOnUpdateAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName, updateAttribute);
                Events.ExecuteOnErrorUpdateAttribute(e);
                throw;
            }
        }

        partial void FormatUpdateContact(ref string email, UpdateContact updateContact);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <param name="updateContact"></param>
        /// <returns></returns>
        private void ValidateUpdateContact(string email, UpdateContact updateContact)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));

            if (updateContact == null)
                throw new ArgumentNullException(nameof(updateContact));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="updateContact"></param>
        private void AfterUpdateContactDefaultImplementation(IUpdateContactApiResponse apiResponseLocalVar, string email, UpdateContact updateContact)
        {
            bool suppressDefaultLog = false;
            AfterUpdateContact(ref suppressDefaultLog, apiResponseLocalVar, email, updateContact);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="updateContact"></param>
        partial void AfterUpdateContact(ref bool suppressDefaultLog, IUpdateContactApiResponse apiResponseLocalVar, string email, UpdateContact updateContact);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="updateContact"></param>
        private void OnErrorUpdateContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email, UpdateContact updateContact)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, email, updateContact);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        /// <param name="updateContact"></param>
        partial void OnErrorUpdateContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email, UpdateContact updateContact);

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactApiResponse?> UpdateContactOrDefaultAsync(string email, UpdateContact updateContact, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateContactAsync(email, updateContact, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a contact 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email (urlencoded) of the contact</param>
        /// <param name="updateContact">Values to update a contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactApiResponse> UpdateContactAsync(string email, UpdateContact updateContact, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateContact(email, updateContact);

                FormatUpdateContact(ref email, updateContact);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/{email}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/{email}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bemail%7D", Uri.EscapeDataString(email.ToString()));

                    httpRequestMessageLocalVar.Content = (updateContact as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateContact, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateContactApiResponse>();

                        UpdateContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/{email}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateContactDefaultImplementation(apiResponseLocalVar, email, updateContact);

                        Events.ExecuteOnUpdateContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateContactDefaultImplementation(e, "/contacts/{email}", uriBuilderLocalVar.Path, email, updateContact);
                Events.ExecuteOnErrorUpdateContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateContactApiResponse"/>
        /// </summary>
        public partial class UpdateContactApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateContactApiResponse(ILogger<UpdateContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ContactErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ContactErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ContactErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ContactErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ContactErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ContactErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFolder(ref long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateFolder"></param>
        /// <returns></returns>
        private void ValidateUpdateFolder(CreateUpdateFolder updateFolder)
        {
            if (updateFolder == null)
                throw new ArgumentNullException(nameof(updateFolder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        private void AfterUpdateFolderDefaultImplementation(IUpdateFolderApiResponse apiResponseLocalVar, long folderId, CreateUpdateFolder updateFolder)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId, updateFolder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        partial void AfterUpdateFolder(ref bool suppressDefaultLog, IUpdateFolderApiResponse apiResponseLocalVar, long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        private void OnErrorUpdateFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, CreateUpdateFolder updateFolder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId, updateFolder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        partial void OnErrorUpdateFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderApiResponse?> UpdateFolderOrDefaultAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFolderAsync(folderId, updateFolder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderApiResponse> UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFolder(updateFolder);

                FormatUpdateFolder(ref folderId, updateFolder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateFolder as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateFolder, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFolderApiResponse>();

                        UpdateFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFolderDefaultImplementation(apiResponseLocalVar, folderId, updateFolder);

                        Events.ExecuteOnUpdateFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId, updateFolder);
                Events.ExecuteOnErrorUpdateFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFolderApiResponse"/>
        /// </summary>
        public partial class UpdateFolderApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFolderApiResponse(ILogger<UpdateFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateList(ref long listId, UpdateList updateList);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateList"></param>
        /// <returns></returns>
        private void ValidateUpdateList(UpdateList updateList)
        {
            if (updateList == null)
                throw new ArgumentNullException(nameof(updateList));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        private void AfterUpdateListDefaultImplementation(IUpdateListApiResponse apiResponseLocalVar, long listId, UpdateList updateList)
        {
            bool suppressDefaultLog = false;
            AfterUpdateList(ref suppressDefaultLog, apiResponseLocalVar, listId, updateList);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        partial void AfterUpdateList(ref bool suppressDefaultLog, IUpdateListApiResponse apiResponseLocalVar, long listId, UpdateList updateList);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        private void OnErrorUpdateListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, UpdateList updateList)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, updateList);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        partial void OnErrorUpdateList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, UpdateList updateList);

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        public async Task<IUpdateListApiResponse?> UpdateListOrDefaultAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateListAsync(listId, updateList, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        public async Task<IUpdateListApiResponse> UpdateListAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateList(updateList);

                FormatUpdateList(ref listId, updateList);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateList as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateList, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateListApiResponse>();

                        UpdateListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateListDefaultImplementation(apiResponseLocalVar, listId, updateList);

                        Events.ExecuteOnUpdateList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId, updateList);
                Events.ExecuteOnErrorUpdateList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateListApiResponse"/>
        /// </summary>
        public partial class UpdateListApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateListApiResponse(ILogger<UpdateListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
