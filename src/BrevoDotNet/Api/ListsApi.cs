// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IListsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ListsApiEvents Events { get; }

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        Task<IAddContactToListApiResponse> AddContactToListAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>?&gt;</returns>
        Task<IAddContactToListApiResponse?> AddContactToListOrDefaultAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        Task<ICreateListApiResponse> CreateListAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>?&gt;</returns>
        Task<ICreateListApiResponse?> CreateListOrDefaultAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        Task<IDeleteListApiResponse> DeleteListAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>?&gt;</returns>
        Task<IDeleteListApiResponse?> DeleteListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        Task<IGetContactsFromListApiResponse> GetContactsFromListAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>?&gt;</returns>
        Task<IGetContactsFromListApiResponse?> GetContactsFromListOrDefaultAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>?&gt;</returns>
        Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        Task<IGetListApiResponse> GetListAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>?&gt;</returns>
        Task<IGetListApiResponse?> GetListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        Task<IGetListsApiResponse> GetListsAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>?&gt;</returns>
        Task<IGetListsApiResponse?> GetListsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        Task<IRemoveContactFromListApiResponse> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a contact from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>?&gt;</returns>
        Task<IRemoveContactFromListApiResponse?> RemoveContactFromListOrDefaultAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        Task<IUpdateListApiResponse> UpdateListAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>?&gt;</returns>
        Task<IUpdateListApiResponse?> UpdateListOrDefaultAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ListsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddContactToList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddContactToList;

        internal void ExecuteOnAddContactToList(ContactsApi.AddContactToListApiResponse apiResponse)
        {
            OnAddContactToList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddContactToList(Exception exception)
        {
            OnErrorAddContactToList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateList;

        internal void ExecuteOnCreateList(ContactsApi.CreateListApiResponse apiResponse)
        {
            OnCreateList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateList(Exception exception)
        {
            OnErrorCreateList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteList;

        internal void ExecuteOnDeleteList(ContactsApi.DeleteListApiResponse apiResponse)
        {
            OnDeleteList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteList(Exception exception)
        {
            OnErrorDeleteList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactsFromList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactsFromList;

        internal void ExecuteOnGetContactsFromList(ContactsApi.GetContactsFromListApiResponse apiResponse)
        {
            OnGetContactsFromList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactsFromList(Exception exception)
        {
            OnErrorGetContactsFromList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolderLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolderLists;

        internal void ExecuteOnGetFolderLists(ContactsApi.GetFolderListsApiResponse apiResponse)
        {
            OnGetFolderLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolderLists(Exception exception)
        {
            OnErrorGetFolderLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetList;

        internal void ExecuteOnGetList(ContactsApi.GetListApiResponse apiResponse)
        {
            OnGetList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetList(Exception exception)
        {
            OnErrorGetList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLists;

        internal void ExecuteOnGetLists(ContactsApi.GetListsApiResponse apiResponse)
        {
            OnGetLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLists(Exception exception)
        {
            OnErrorGetLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveContactFromList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveContactFromList;

        internal void ExecuteOnRemoveContactFromList(ContactsApi.RemoveContactFromListApiResponse apiResponse)
        {
            OnRemoveContactFromList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveContactFromList(Exception exception)
        {
            OnErrorRemoveContactFromList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateList;

        internal void ExecuteOnUpdateList(ContactsApi.UpdateListApiResponse apiResponse)
        {
            OnUpdateList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateList(Exception exception)
        {
            OnErrorUpdateList?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ListsApi : IListsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ListsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ListsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(ILogger<ListsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ListsApiEvents listsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ListsApi>();
            HttpClient = httpClient;
            Events = listsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAddContactToList(ref long listId, AddContactToList contactEmails);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactEmails"></param>
        /// <returns></returns>
        private void ValidateAddContactToList(AddContactToList contactEmails)
        {
            if (contactEmails == null)
                throw new ArgumentNullException(nameof(contactEmails));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void AfterAddContactToListDefaultImplementation(IAddContactToListApiResponse apiResponseLocalVar, long listId, AddContactToList contactEmails)
        {
            bool suppressDefaultLog = false;
            AfterAddContactToList(ref suppressDefaultLog, apiResponseLocalVar, listId, contactEmails);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void AfterAddContactToList(ref bool suppressDefaultLog, IAddContactToListApiResponse apiResponseLocalVar, long listId, AddContactToList contactEmails);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void OnErrorAddContactToListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, AddContactToList contactEmails)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddContactToList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, contactEmails);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void OnErrorAddContactToList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, AddContactToList contactEmails);

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        public async Task<IAddContactToListApiResponse?> AddContactToListOrDefaultAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddContactToListAsync(listId, contactEmails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactToListApiResponse"/>&gt;</returns>
        public async Task<IAddContactToListApiResponse> AddContactToListAsync(long listId, AddContactToList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddContactToList(contactEmails);

                FormatAddContactToList(ref listId, contactEmails);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts/add");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactEmails as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactEmails, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.AddContactToListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.AddContactToListApiResponse>();

                        ContactsApi.AddContactToListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddContactToListDefaultImplementation(apiResponseLocalVar, listId, contactEmails);

                        Events.ExecuteOnAddContactToList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddContactToListDefaultImplementation(e, "/contacts/lists/{listId}/contacts/add", uriBuilderLocalVar.Path, listId, contactEmails);
                Events.ExecuteOnErrorAddContactToList(e);
                throw;
            }
        }

        partial void FormatCreateList(CreateList createList);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createList"></param>
        /// <returns></returns>
        private void ValidateCreateList(CreateList createList)
        {
            if (createList == null)
                throw new ArgumentNullException(nameof(createList));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createList"></param>
        private void AfterCreateListDefaultImplementation(ICreateListApiResponse apiResponseLocalVar, CreateList createList)
        {
            bool suppressDefaultLog = false;
            AfterCreateList(ref suppressDefaultLog, apiResponseLocalVar, createList);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createList"></param>
        partial void AfterCreateList(ref bool suppressDefaultLog, ICreateListApiResponse apiResponseLocalVar, CreateList createList);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createList"></param>
        private void OnErrorCreateListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateList createList)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createList);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createList"></param>
        partial void OnErrorCreateList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateList createList);

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        public async Task<ICreateListApiResponse?> CreateListOrDefaultAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateListAsync(createList, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateListApiResponse"/>&gt;</returns>
        public async Task<ICreateListApiResponse> CreateListAsync(CreateList createList, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateList(createList);

                FormatCreateList(createList);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists");

                    httpRequestMessageLocalVar.Content = (createList as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createList, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.CreateListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.CreateListApiResponse>();

                        ContactsApi.CreateListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateListDefaultImplementation(apiResponseLocalVar, createList);

                        Events.ExecuteOnCreateList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateListDefaultImplementation(e, "/contacts/lists", uriBuilderLocalVar.Path, createList);
                Events.ExecuteOnErrorCreateList(e);
                throw;
            }
        }

        partial void FormatDeleteList(ref long listId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        private void AfterDeleteListDefaultImplementation(IDeleteListApiResponse apiResponseLocalVar, long listId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteList(ref suppressDefaultLog, apiResponseLocalVar, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        partial void AfterDeleteList(ref bool suppressDefaultLog, IDeleteListApiResponse apiResponseLocalVar, long listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        private void OnErrorDeleteListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        partial void OnErrorDeleteList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId);

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        public async Task<IDeleteListApiResponse?> DeleteListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteListAsync(listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteListApiResponse"/>&gt;</returns>
        public async Task<IDeleteListApiResponse> DeleteListAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteList(ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.DeleteListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.DeleteListApiResponse>();

                        ContactsApi.DeleteListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteListDefaultImplementation(apiResponseLocalVar, listId);

                        Events.ExecuteOnDeleteList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId);
                Events.ExecuteOnErrorDeleteList(e);
                throw;
            }
        }

        partial void FormatGetContactsFromList(ref long listId, ref Option<DateTime> modifiedSince, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetContactsFromList(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetContactsFromListDefaultImplementation(IGetContactsFromListApiResponse apiResponseLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetContactsFromList(ref suppressDefaultLog, apiResponseLocalVar, listId, modifiedSince, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetContactsFromList(ref bool suppressDefaultLog, IGetContactsFromListApiResponse apiResponseLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetContactsFromListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactsFromList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, modifiedSince, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="modifiedSince"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetContactsFromList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, Option<DateTime> modifiedSince, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        public async Task<IGetContactsFromListApiResponse?> GetContactsFromListOrDefaultAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactsFromListAsync(listId, modifiedSince, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get contacts in a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsFromListApiResponse"/>&gt;</returns>
        public async Task<IGetContactsFromListApiResponse> GetContactsFromListAsync(long listId, Option<DateTime> modifiedSince = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactsFromList(sort);

                FormatGetContactsFromList(ref listId, ref modifiedSince, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (modifiedSince.IsSet)
                        parseQueryStringLocalVar["modifiedSince"] = ClientUtils.ParameterToString(modifiedSince.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetContactsFromListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetContactsFromListApiResponse>();

                        ContactsApi.GetContactsFromListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactsFromListDefaultImplementation(apiResponseLocalVar, listId, modifiedSince, limit, offset, sort);

                        Events.ExecuteOnGetContactsFromList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactsFromListDefaultImplementation(e, "/contacts/lists/{listId}/contacts", uriBuilderLocalVar.Path, listId, modifiedSince, limit, offset, sort);
                Events.ExecuteOnErrorGetContactsFromList(e);
                throw;
            }
        }

        partial void FormatGetFolderLists(ref long folderId, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetFolderLists(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetFolderListsDefaultImplementation(IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetFolderLists(ref suppressDefaultLog, apiResponseLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetFolderLists(ref bool suppressDefaultLog, IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetFolderListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolderLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetFolderLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderListsAsync(folderId, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolderLists(sort);

                FormatGetFolderLists(ref folderId, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}/lists");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetFolderListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetFolderListsApiResponse>();

                        ContactsApi.GetFolderListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderListsDefaultImplementation(apiResponseLocalVar, folderId, limit, offset, sort);

                        Events.ExecuteOnGetFolderLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderListsDefaultImplementation(e, "/contacts/folders/{folderId}/lists", uriBuilderLocalVar.Path, folderId, limit, offset, sort);
                Events.ExecuteOnErrorGetFolderLists(e);
                throw;
            }
        }

        partial void FormatGetList(ref long listId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        private void AfterGetListDefaultImplementation(IGetListApiResponse apiResponseLocalVar, long listId)
        {
            bool suppressDefaultLog = false;
            AfterGetList(ref suppressDefaultLog, apiResponseLocalVar, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        partial void AfterGetList(ref bool suppressDefaultLog, IGetListApiResponse apiResponseLocalVar, long listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        private void OnErrorGetListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        partial void OnErrorGetList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId);

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        public async Task<IGetListApiResponse?> GetListOrDefaultAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListAsync(listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a list&#39;s details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListApiResponse"/>&gt;</returns>
        public async Task<IGetListApiResponse> GetListAsync(long listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetList(ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetListApiResponse>();

                        ContactsApi.GetListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListDefaultImplementation(apiResponseLocalVar, listId);

                        Events.ExecuteOnGetList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId);
                Events.ExecuteOnErrorGetList(e);
                throw;
            }
        }

        partial void FormatGetLists(ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetLists(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetListsDefaultImplementation(IGetListsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetLists(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetLists(ref bool suppressDefaultLog, IGetListsApiResponse apiResponseLocalVar, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        public async Task<IGetListsApiResponse?> GetListsOrDefaultAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListsAsync(limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListsApiResponse"/>&gt;</returns>
        public async Task<IGetListsApiResponse> GetListsAsync(Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLists(sort);

                FormatGetLists(ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetListsApiResponse>();

                        ContactsApi.GetListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListsDefaultImplementation(apiResponseLocalVar, limit, offset, sort);

                        Events.ExecuteOnGetLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListsDefaultImplementation(e, "/contacts/lists", uriBuilderLocalVar.Path, limit, offset, sort);
                Events.ExecuteOnErrorGetLists(e);
                throw;
            }
        }

        partial void FormatRemoveContactFromList(ref long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactEmails"></param>
        /// <returns></returns>
        private void ValidateRemoveContactFromList(RemoveContactFromList contactEmails)
        {
            if (contactEmails == null)
                throw new ArgumentNullException(nameof(contactEmails));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void AfterRemoveContactFromListDefaultImplementation(IRemoveContactFromListApiResponse apiResponseLocalVar, long listId, RemoveContactFromList contactEmails)
        {
            bool suppressDefaultLog = false;
            AfterRemoveContactFromList(ref suppressDefaultLog, apiResponseLocalVar, listId, contactEmails);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void AfterRemoveContactFromList(ref bool suppressDefaultLog, IRemoveContactFromListApiResponse apiResponseLocalVar, long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        private void OnErrorRemoveContactFromListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, RemoveContactFromList contactEmails)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveContactFromList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, contactEmails);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="contactEmails"></param>
        partial void OnErrorRemoveContactFromList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        public async Task<IRemoveContactFromListApiResponse?> RemoveContactFromListOrDefaultAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveContactFromListAsync(listId, contactEmails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a contact from a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveContactFromListApiResponse"/>&gt;</returns>
        public async Task<IRemoveContactFromListApiResponse> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveContactFromList(contactEmails);

                FormatRemoveContactFromList(ref listId, contactEmails);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}/contacts/remove"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}/contacts/remove");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactEmails as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactEmails, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.RemoveContactFromListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.RemoveContactFromListApiResponse>();

                        ContactsApi.RemoveContactFromListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}/contacts/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveContactFromListDefaultImplementation(apiResponseLocalVar, listId, contactEmails);

                        Events.ExecuteOnRemoveContactFromList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveContactFromListDefaultImplementation(e, "/contacts/lists/{listId}/contacts/remove", uriBuilderLocalVar.Path, listId, contactEmails);
                Events.ExecuteOnErrorRemoveContactFromList(e);
                throw;
            }
        }

        partial void FormatUpdateList(ref long listId, UpdateList updateList);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateList"></param>
        /// <returns></returns>
        private void ValidateUpdateList(UpdateList updateList)
        {
            if (updateList == null)
                throw new ArgumentNullException(nameof(updateList));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        private void AfterUpdateListDefaultImplementation(IUpdateListApiResponse apiResponseLocalVar, long listId, UpdateList updateList)
        {
            bool suppressDefaultLog = false;
            AfterUpdateList(ref suppressDefaultLog, apiResponseLocalVar, listId, updateList);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        partial void AfterUpdateList(ref bool suppressDefaultLog, IUpdateListApiResponse apiResponseLocalVar, long listId, UpdateList updateList);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        private void OnErrorUpdateListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, UpdateList updateList)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listId, updateList);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listId"></param>
        /// <param name="updateList"></param>
        partial void OnErrorUpdateList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long listId, UpdateList updateList);

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        public async Task<IUpdateListApiResponse?> UpdateListOrDefaultAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateListAsync(listId, updateList, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateListApiResponse"/>&gt;</returns>
        public async Task<IUpdateListApiResponse> UpdateListAsync(long listId, UpdateList updateList, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateList(updateList);

                FormatUpdateList(ref listId, updateList);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/lists/{listId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/lists/{listId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlistId%7D", Uri.EscapeDataString(listId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateList as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateList, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.UpdateListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.UpdateListApiResponse>();

                        ContactsApi.UpdateListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/lists/{listId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateListDefaultImplementation(apiResponseLocalVar, listId, updateList);

                        Events.ExecuteOnUpdateList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateListDefaultImplementation(e, "/contacts/lists/{listId}", uriBuilderLocalVar.Path, listId, updateList);
                Events.ExecuteOnErrorUpdateList(e);
                throw;
            }
        }
    }
}
