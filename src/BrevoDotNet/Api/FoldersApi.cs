// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFoldersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FoldersApiEvents Events { get; }

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        Task<ICreateFolderApiResponse> CreateFolderAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>?&gt;</returns>
        Task<ICreateFolderApiResponse?> CreateFolderOrDefaultAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a folder (and all its lists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        Task<IDeleteFolderApiResponse> DeleteFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a folder (and all its lists)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>?&gt;</returns>
        Task<IDeleteFolderApiResponse?> DeleteFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a folder&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        Task<IGetFolderApiResponse> GetFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a folder&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>?&gt;</returns>
        Task<IGetFolderApiResponse?> GetFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>?&gt;</returns>
        Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        Task<IGetFoldersApiResponse> GetFoldersAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>?&gt;</returns>
        Task<IGetFoldersApiResponse?> GetFoldersOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        Task<IUpdateFolderApiResponse> UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>?&gt;</returns>
        Task<IUpdateFolderApiResponse?> UpdateFolderOrDefaultAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FoldersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateFolder;

        internal void ExecuteOnCreateFolder(ContactsApi.CreateFolderApiResponse apiResponse)
        {
            OnCreateFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateFolder(Exception exception)
        {
            OnErrorCreateFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFolder;

        internal void ExecuteOnDeleteFolder(ContactsApi.DeleteFolderApiResponse apiResponse)
        {
            OnDeleteFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFolder(Exception exception)
        {
            OnErrorDeleteFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolder;

        internal void ExecuteOnGetFolder(ContactsApi.GetFolderApiResponse apiResponse)
        {
            OnGetFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolder(Exception exception)
        {
            OnErrorGetFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolderLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolderLists;

        internal void ExecuteOnGetFolderLists(ContactsApi.GetFolderListsApiResponse apiResponse)
        {
            OnGetFolderLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolderLists(Exception exception)
        {
            OnErrorGetFolderLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolders;

        internal void ExecuteOnGetFolders(ContactsApi.GetFoldersApiResponse apiResponse)
        {
            OnGetFolders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolders(Exception exception)
        {
            OnErrorGetFolders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFolder;

        internal void ExecuteOnUpdateFolder(ContactsApi.UpdateFolderApiResponse apiResponse)
        {
            OnUpdateFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFolder(Exception exception)
        {
            OnErrorUpdateFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FoldersApi : IFoldersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FoldersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FoldersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(ILogger<FoldersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FoldersApiEvents foldersApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FoldersApi>();
            HttpClient = httpClient;
            Events = foldersApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateFolder(CreateUpdateFolder createFolder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createFolder"></param>
        /// <returns></returns>
        private void ValidateCreateFolder(CreateUpdateFolder createFolder)
        {
            if (createFolder == null)
                throw new ArgumentNullException(nameof(createFolder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFolder"></param>
        private void AfterCreateFolderDefaultImplementation(ICreateFolderApiResponse apiResponseLocalVar, CreateUpdateFolder createFolder)
        {
            bool suppressDefaultLog = false;
            AfterCreateFolder(ref suppressDefaultLog, apiResponseLocalVar, createFolder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createFolder"></param>
        partial void AfterCreateFolder(ref bool suppressDefaultLog, ICreateFolderApiResponse apiResponseLocalVar, CreateUpdateFolder createFolder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFolder"></param>
        private void OnErrorCreateFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateUpdateFolder createFolder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createFolder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createFolder"></param>
        partial void OnErrorCreateFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateUpdateFolder createFolder);

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiResponse?> CreateFolderOrDefaultAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateFolderAsync(createFolder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiResponse> CreateFolderAsync(CreateUpdateFolder createFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateFolder(createFolder);

                FormatCreateFolder(createFolder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders");

                    httpRequestMessageLocalVar.Content = (createFolder as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createFolder, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.CreateFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.CreateFolderApiResponse>();

                        ContactsApi.CreateFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateFolderDefaultImplementation(apiResponseLocalVar, createFolder);

                        Events.ExecuteOnCreateFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateFolderDefaultImplementation(e, "/contacts/folders", uriBuilderLocalVar.Path, createFolder);
                Events.ExecuteOnErrorCreateFolder(e);
                throw;
            }
        }

        partial void FormatDeleteFolder(ref long folderId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        private void AfterDeleteFolderDefaultImplementation(IDeleteFolderApiResponse apiResponseLocalVar, long folderId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        partial void AfterDeleteFolder(ref bool suppressDefaultLog, IDeleteFolderApiResponse apiResponseLocalVar, long folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        private void OnErrorDeleteFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        partial void OnErrorDeleteFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId);

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderApiResponse?> DeleteFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFolderAsync(folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a folder (and all its lists) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderApiResponse> DeleteFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteFolder(ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.DeleteFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.DeleteFolderApiResponse>();

                        ContactsApi.DeleteFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFolderDefaultImplementation(apiResponseLocalVar, folderId);

                        Events.ExecuteOnDeleteFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId);
                Events.ExecuteOnErrorDeleteFolder(e);
                throw;
            }
        }

        partial void FormatGetFolder(ref long folderId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        private void AfterGetFolderDefaultImplementation(IGetFolderApiResponse apiResponseLocalVar, long folderId)
        {
            bool suppressDefaultLog = false;
            AfterGetFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        partial void AfterGetFolder(ref bool suppressDefaultLog, IGetFolderApiResponse apiResponseLocalVar, long folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        private void OnErrorGetFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        partial void OnErrorGetFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId);

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        public async Task<IGetFolderApiResponse?> GetFolderOrDefaultAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderAsync(folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns a folder&#39;s details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">id of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderApiResponse"/>&gt;</returns>
        public async Task<IGetFolderApiResponse> GetFolderAsync(long folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFolder(ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetFolderApiResponse>();

                        ContactsApi.GetFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderDefaultImplementation(apiResponseLocalVar, folderId);

                        Events.ExecuteOnGetFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId);
                Events.ExecuteOnErrorGetFolder(e);
                throw;
            }
        }

        partial void FormatGetFolderLists(ref long folderId, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetFolderLists(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetFolderListsDefaultImplementation(IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetFolderLists(ref suppressDefaultLog, apiResponseLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetFolderLists(ref bool suppressDefaultLog, IGetFolderListsApiResponse apiResponseLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetFolderListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolderLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetFolderLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse?> GetFolderListsOrDefaultAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderListsAsync(folderId, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get lists in a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderListsApiResponse"/>&gt;</returns>
        public async Task<IGetFolderListsApiResponse> GetFolderListsAsync(long folderId, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolderLists(sort);

                FormatGetFolderLists(ref folderId, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}/lists"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}/lists");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetFolderListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetFolderListsApiResponse>();

                        ContactsApi.GetFolderListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderListsDefaultImplementation(apiResponseLocalVar, folderId, limit, offset, sort);

                        Events.ExecuteOnGetFolderLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderListsDefaultImplementation(e, "/contacts/folders/{folderId}/lists", uriBuilderLocalVar.Path, folderId, limit, offset, sort);
                Events.ExecuteOnErrorGetFolderLists(e);
                throw;
            }
        }

        partial void FormatGetFolders(ref long limit, ref long offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetFolders(Option<string> sort)
        {
            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetFoldersDefaultImplementation(IGetFoldersApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetFolders(ref suppressDefaultLog, apiResponseLocalVar, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetFolders(ref bool suppressDefaultLog, IGetFoldersApiResponse apiResponseLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetFoldersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetFolders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long limit, long offset, Option<string> sort);

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiResponse?> GetFoldersOrDefaultAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFoldersAsync(limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all folders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page</param>
        /// <param name="offset">Index of the first document of the page</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record creation (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiResponse> GetFoldersAsync(long limit, long offset, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolders(sort);

                FormatGetFolders(ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit);
                    parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.GetFoldersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.GetFoldersApiResponse>();

                        ContactsApi.GetFoldersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFoldersDefaultImplementation(apiResponseLocalVar, limit, offset, sort);

                        Events.ExecuteOnGetFolders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFoldersDefaultImplementation(e, "/contacts/folders", uriBuilderLocalVar.Path, limit, offset, sort);
                Events.ExecuteOnErrorGetFolders(e);
                throw;
            }
        }

        partial void FormatUpdateFolder(ref long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateFolder"></param>
        /// <returns></returns>
        private void ValidateUpdateFolder(CreateUpdateFolder updateFolder)
        {
            if (updateFolder == null)
                throw new ArgumentNullException(nameof(updateFolder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        private void AfterUpdateFolderDefaultImplementation(IUpdateFolderApiResponse apiResponseLocalVar, long folderId, CreateUpdateFolder updateFolder)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFolder(ref suppressDefaultLog, apiResponseLocalVar, folderId, updateFolder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        partial void AfterUpdateFolder(ref bool suppressDefaultLog, IUpdateFolderApiResponse apiResponseLocalVar, long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        private void OnErrorUpdateFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, CreateUpdateFolder updateFolder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId, updateFolder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        /// <param name="updateFolder"></param>
        partial void OnErrorUpdateFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long folderId, CreateUpdateFolder updateFolder);

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderApiResponse?> UpdateFolderOrDefaultAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFolderAsync(folderId, updateFolder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="updateFolder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderApiResponse> UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFolder(updateFolder);

                FormatUpdateFolder(ref folderId, updateFolder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/folders/{folderId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/folders/{folderId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfolderId%7D", Uri.EscapeDataString(folderId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateFolder as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateFolder, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactsApi.UpdateFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactsApi.UpdateFolderApiResponse>();

                        ContactsApi.UpdateFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/folders/{folderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFolderDefaultImplementation(apiResponseLocalVar, folderId, updateFolder);

                        Events.ExecuteOnUpdateFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFolderDefaultImplementation(e, "/contacts/folders/{folderId}", uriBuilderLocalVar.Path, folderId, updateFolder);
                Events.ExecuteOnErrorUpdateFolder(e);
                throw;
            }
        }
    }
}
