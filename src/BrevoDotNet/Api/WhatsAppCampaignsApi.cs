// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWhatsAppCampaignsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WhatsAppCampaignsApiEvents Events { get; }

        /// <summary>
        /// Delete a WhatsApp campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWhatsAppCampaignApiResponse"/>&gt;</returns>
        Task<IDeleteWhatsAppCampaignApiResponse> DeleteWhatsAppCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a WhatsApp campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWhatsAppCampaignApiResponse"/>?&gt;</returns>
        Task<IDeleteWhatsAppCampaignApiResponse?> DeleteWhatsAppCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a WhatsApp campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignApiResponse"/>&gt;</returns>
        Task<IGetWhatsAppCampaignApiResponse> GetWhatsAppCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a WhatsApp campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignApiResponse"/>?&gt;</returns>
        Task<IGetWhatsAppCampaignApiResponse?> GetWhatsAppCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created WhatsApp campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignsApiResponse"/>&gt;</returns>
        Task<IGetWhatsAppCampaignsApiResponse> GetWhatsAppCampaignsAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created WhatsApp campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignsApiResponse"/>?&gt;</returns>
        Task<IGetWhatsAppCampaignsApiResponse?> GetWhatsAppCampaignsOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created WhatsApp templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppTemplatesApiResponse"/>&gt;</returns>
        Task<IGetWhatsAppTemplatesApiResponse> GetWhatsAppTemplatesAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Return all your created WhatsApp templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppTemplatesApiResponse"/>?&gt;</returns>
        Task<IGetWhatsAppTemplatesApiResponse?> GetWhatsAppTemplatesOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteWhatsAppCampaignApiResponse"/>
    /// </summary>
    public interface IDeleteWhatsAppCampaignApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetWhatsAppCampaignApiResponse"/>
    /// </summary>
    public interface IGetWhatsAppCampaignApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetWhatsappCampaignOverview?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetWhatsAppCampaignsApiResponse"/>
    /// </summary>
    public interface IGetWhatsAppCampaignsApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetWhatsappCampaigns?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetWhatsAppTemplatesApiResponse"/>
    /// </summary>
    public interface IGetWhatsAppTemplatesApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetWATemplates?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WhatsAppCampaignsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteWhatsAppCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteWhatsAppCampaign;

        internal void ExecuteOnDeleteWhatsAppCampaign(WhatsAppCampaignsApi.DeleteWhatsAppCampaignApiResponse apiResponse)
        {
            OnDeleteWhatsAppCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWhatsAppCampaign(Exception exception)
        {
            OnErrorDeleteWhatsAppCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWhatsAppCampaign;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWhatsAppCampaign;

        internal void ExecuteOnGetWhatsAppCampaign(WhatsAppCampaignsApi.GetWhatsAppCampaignApiResponse apiResponse)
        {
            OnGetWhatsAppCampaign?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWhatsAppCampaign(Exception exception)
        {
            OnErrorGetWhatsAppCampaign?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWhatsAppCampaigns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWhatsAppCampaigns;

        internal void ExecuteOnGetWhatsAppCampaigns(WhatsAppCampaignsApi.GetWhatsAppCampaignsApiResponse apiResponse)
        {
            OnGetWhatsAppCampaigns?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWhatsAppCampaigns(Exception exception)
        {
            OnErrorGetWhatsAppCampaigns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWhatsAppTemplates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWhatsAppTemplates;

        internal void ExecuteOnGetWhatsAppTemplates(WhatsAppCampaignsApi.GetWhatsAppTemplatesApiResponse apiResponse)
        {
            OnGetWhatsAppTemplates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWhatsAppTemplates(Exception exception)
        {
            OnErrorGetWhatsAppTemplates?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WhatsAppCampaignsApi : IWhatsAppCampaignsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WhatsAppCampaignsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WhatsAppCampaignsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsAppCampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WhatsAppCampaignsApi(ILogger<WhatsAppCampaignsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WhatsAppCampaignsApiEvents whatsAppCampaignsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WhatsAppCampaignsApi>();
            HttpClient = httpClient;
            Events = whatsAppCampaignsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatDeleteWhatsAppCampaign(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterDeleteWhatsAppCampaignDefaultImplementation(IDeleteWhatsAppCampaignApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWhatsAppCampaign(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterDeleteWhatsAppCampaign(ref bool suppressDefaultLog, IDeleteWhatsAppCampaignApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorDeleteWhatsAppCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWhatsAppCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorDeleteWhatsAppCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Delete a WhatsApp campaign 
        /// </summary>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWhatsAppCampaignApiResponse"/>&gt;</returns>
        public async Task<IDeleteWhatsAppCampaignApiResponse?> DeleteWhatsAppCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWhatsAppCampaignAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a WhatsApp campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWhatsAppCampaignApiResponse"/>&gt;</returns>
        public async Task<IDeleteWhatsAppCampaignApiResponse> DeleteWhatsAppCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteWhatsAppCampaign(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/whatsappCampaigns/{campaignId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/whatsappCampaigns/{campaignId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteWhatsAppCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWhatsAppCampaignApiResponse>();

                        DeleteWhatsAppCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/whatsappCampaigns/{campaignId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteWhatsAppCampaignDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnDeleteWhatsAppCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWhatsAppCampaignDefaultImplementation(e, "/whatsappCampaigns/{campaignId}", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorDeleteWhatsAppCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWhatsAppCampaignApiResponse"/>
        /// </summary>
        public partial class DeleteWhatsAppCampaignApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteWhatsAppCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWhatsAppCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWhatsAppCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWhatsAppCampaignApiResponse(ILogger<DeleteWhatsAppCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWhatsAppCampaign(ref long campaignId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        private void AfterGetWhatsAppCampaignDefaultImplementation(IGetWhatsAppCampaignApiResponse apiResponseLocalVar, long campaignId)
        {
            bool suppressDefaultLog = false;
            AfterGetWhatsAppCampaign(ref suppressDefaultLog, apiResponseLocalVar, campaignId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void AfterGetWhatsAppCampaign(ref bool suppressDefaultLog, IGetWhatsAppCampaignApiResponse apiResponseLocalVar, long campaignId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        private void OnErrorGetWhatsAppCampaignDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWhatsAppCampaign(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, campaignId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="campaignId"></param>
        partial void OnErrorGetWhatsAppCampaign(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long campaignId);

        /// <summary>
        /// Get a WhatsApp campaign 
        /// </summary>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppCampaignApiResponse?> GetWhatsAppCampaignOrDefaultAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWhatsAppCampaignAsync(campaignId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a WhatsApp campaign 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Id of the campaign</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppCampaignApiResponse> GetWhatsAppCampaignAsync(long campaignId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWhatsAppCampaign(ref campaignId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/whatsappCampaigns/{campaignId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/whatsappCampaigns/{campaignId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcampaignId%7D", Uri.EscapeDataString(campaignId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWhatsAppCampaignApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWhatsAppCampaignApiResponse>();

                        GetWhatsAppCampaignApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/whatsappCampaigns/{campaignId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWhatsAppCampaignDefaultImplementation(apiResponseLocalVar, campaignId);

                        Events.ExecuteOnGetWhatsAppCampaign(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWhatsAppCampaignDefaultImplementation(e, "/whatsappCampaigns/{campaignId}", uriBuilderLocalVar.Path, campaignId);
                Events.ExecuteOnErrorGetWhatsAppCampaign(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWhatsAppCampaignApiResponse"/>
        /// </summary>
        public partial class GetWhatsAppCampaignApiResponse : BrevoDotNet.Client.ApiResponse, IGetWhatsAppCampaignApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWhatsAppCampaignApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWhatsAppCampaignApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWhatsAppCampaignApiResponse(ILogger<GetWhatsAppCampaignApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetWhatsappCampaignOverview? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetWhatsappCampaignOverview>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetWhatsappCampaignOverview? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWhatsAppCampaigns(ref Option<string> startDate, ref Option<string> endDate, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetWhatsAppCampaigns(Option<string> startDate, Option<string> endDate, Option<string> sort)
        {
            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetWhatsAppCampaignsDefaultImplementation(IGetWhatsAppCampaignsApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetWhatsAppCampaigns(ref suppressDefaultLog, apiResponseLocalVar, startDate, endDate, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetWhatsAppCampaigns(ref bool suppressDefaultLog, IGetWhatsAppCampaignsApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetWhatsAppCampaignsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWhatsAppCampaigns(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, startDate, endDate, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetWhatsAppCampaigns(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Return all your created WhatsApp campaigns 
        /// </summary>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignsApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppCampaignsApiResponse?> GetWhatsAppCampaignsOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWhatsAppCampaignsAsync(startDate, endDate, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Return all your created WhatsApp campaigns 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppCampaignsApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppCampaignsApiResponse> GetWhatsAppCampaignsAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWhatsAppCampaigns(startDate, endDate, sort);

                FormatGetWhatsAppCampaigns(ref startDate, ref endDate, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/whatsappCampaigns"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/whatsappCampaigns");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWhatsAppCampaignsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWhatsAppCampaignsApiResponse>();

                        GetWhatsAppCampaignsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/whatsappCampaigns", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWhatsAppCampaignsDefaultImplementation(apiResponseLocalVar, startDate, endDate, limit, offset, sort);

                        Events.ExecuteOnGetWhatsAppCampaigns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWhatsAppCampaignsDefaultImplementation(e, "/whatsappCampaigns", uriBuilderLocalVar.Path, startDate, endDate, limit, offset, sort);
                Events.ExecuteOnErrorGetWhatsAppCampaigns(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWhatsAppCampaignsApiResponse"/>
        /// </summary>
        public partial class GetWhatsAppCampaignsApiResponse : BrevoDotNet.Client.ApiResponse, IGetWhatsAppCampaignsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWhatsAppCampaignsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWhatsAppCampaignsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWhatsAppCampaignsApiResponse(ILogger<GetWhatsAppCampaignsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetWhatsappCampaigns? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetWhatsappCampaigns>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetWhatsappCampaigns? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWhatsAppTemplates(ref Option<string> startDate, ref Option<string> endDate, ref Option<long> limit, ref Option<long> offset, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetWhatsAppTemplates(Option<string> startDate, Option<string> endDate, Option<string> sort)
        {
            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate));

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void AfterGetWhatsAppTemplatesDefaultImplementation(IGetWhatsAppTemplatesApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetWhatsAppTemplates(ref suppressDefaultLog, apiResponseLocalVar, startDate, endDate, limit, offset, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void AfterGetWhatsAppTemplates(ref bool suppressDefaultLog, IGetWhatsAppTemplatesApiResponse apiResponseLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        private void OnErrorGetWhatsAppTemplatesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWhatsAppTemplates(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, startDate, endDate, limit, offset, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetWhatsAppTemplates(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> startDate, Option<string> endDate, Option<long> limit, Option<long> offset, Option<string> sort);

        /// <summary>
        /// Return all your created WhatsApp templates 
        /// </summary>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppTemplatesApiResponse?> GetWhatsAppTemplatesOrDefaultAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWhatsAppTemplatesAsync(startDate, endDate, limit, offset, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Return all your created WhatsApp templates 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if &#x60;sort&#x60; is not passed (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWhatsAppTemplatesApiResponse"/>&gt;</returns>
        public async Task<IGetWhatsAppTemplatesApiResponse> GetWhatsAppTemplatesAsync(Option<string> startDate = default, Option<string> endDate = default, Option<long> limit = default, Option<long> offset = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWhatsAppTemplates(startDate, endDate, sort);

                FormatGetWhatsAppTemplates(ref startDate, ref endDate, ref limit, ref offset, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/whatsappCampaigns/template-list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/whatsappCampaigns/template-list");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (startDate.IsSet)
                        parseQueryStringLocalVar["startDate"] = ClientUtils.ParameterToString(startDate.Value);

                    if (endDate.IsSet)
                        parseQueryStringLocalVar["endDate"] = ClientUtils.ParameterToString(endDate.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWhatsAppTemplatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWhatsAppTemplatesApiResponse>();

                        GetWhatsAppTemplatesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/whatsappCampaigns/template-list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWhatsAppTemplatesDefaultImplementation(apiResponseLocalVar, startDate, endDate, limit, offset, sort);

                        Events.ExecuteOnGetWhatsAppTemplates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWhatsAppTemplatesDefaultImplementation(e, "/whatsappCampaigns/template-list", uriBuilderLocalVar.Path, startDate, endDate, limit, offset, sort);
                Events.ExecuteOnErrorGetWhatsAppTemplates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWhatsAppTemplatesApiResponse"/>
        /// </summary>
        public partial class GetWhatsAppTemplatesApiResponse : BrevoDotNet.Client.ApiResponse, IGetWhatsAppTemplatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWhatsAppTemplatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWhatsAppTemplatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWhatsAppTemplatesApiResponse(ILogger<GetWhatsAppTemplatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetWATemplates? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetWATemplates>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetWATemplates? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
