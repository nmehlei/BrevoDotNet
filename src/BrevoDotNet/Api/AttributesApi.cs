// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrevoDotNet.Client;
using BrevoDotNet.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrevoDotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAttributesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AttributesApiEvents Events { get; }

        /// <summary>
        /// Create contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        Task<ICreateAttributeApiResponse> CreateAttributeAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>?&gt;</returns>
        Task<ICreateAttributeApiResponse?> CreateAttributeOrDefaultAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        Task<IDeleteAttributeApiResponse> DeleteAttributeAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>?&gt;</returns>
        Task<IDeleteAttributeApiResponse?> DeleteAttributeOrDefaultAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        Task<IGetAttributesApiResponse> GetAttributesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>?&gt;</returns>
        Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        Task<IUpdateAttributeApiResponse> UpdateAttributeAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update contact attribute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>?&gt;</returns>
        Task<IUpdateAttributeApiResponse?> UpdateAttributeOrDefaultAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateAttributeApiResponse"/>
    /// </summary>
    public interface ICreateAttributeApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAttributeApiResponse"/>
    /// </summary>
    public interface IDeleteAttributeApiResponse : BrevoDotNet.Client.IApiResponse, INotFound<BrevoDotNet.Model.ErrorModel?>, IBadRequest<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetAttributesApiResponse"/>
    /// </summary>
    public interface IGetAttributesApiResponse : BrevoDotNet.Client.IApiResponse, IOk<BrevoDotNet.Model.GetAttributes?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAttributeApiResponse"/>
    /// </summary>
    public interface IUpdateAttributeApiResponse : BrevoDotNet.Client.IApiResponse, IBadRequest<BrevoDotNet.Model.ErrorModel?>, INotFound<BrevoDotNet.Model.ErrorModel?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AttributesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateAttribute;

        internal void ExecuteOnCreateAttribute(AttributesApi.CreateAttributeApiResponse apiResponse)
        {
            OnCreateAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAttribute(Exception exception)
        {
            OnErrorCreateAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAttribute;

        internal void ExecuteOnDeleteAttribute(AttributesApi.DeleteAttributeApiResponse apiResponse)
        {
            OnDeleteAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAttribute(Exception exception)
        {
            OnErrorDeleteAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAttributes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAttributes;

        internal void ExecuteOnGetAttributes(AttributesApi.GetAttributesApiResponse apiResponse)
        {
            OnGetAttributes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAttributes(Exception exception)
        {
            OnErrorGetAttributes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAttribute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAttribute;

        internal void ExecuteOnUpdateAttribute(AttributesApi.UpdateAttributeApiResponse apiResponse)
        {
            OnUpdateAttribute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAttribute(Exception exception)
        {
            OnErrorUpdateAttribute?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AttributesApi : IAttributesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AttributesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AttributesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttributesApi(ILogger<AttributesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AttributesApiEvents attributesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AttributesApi>();
            HttpClient = httpClient;
            Events = attributesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateAttribute(ref string attributeCategory, ref string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        /// <returns></returns>
        private void ValidateCreateAttribute(string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));

            if (createAttribute == null)
                throw new ArgumentNullException(nameof(createAttribute));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        private void AfterCreateAttributeDefaultImplementation(ICreateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            bool suppressDefaultLog = false;
            AfterCreateAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName, createAttribute);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        partial void AfterCreateAttribute(ref bool suppressDefaultLog, ICreateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        private void OnErrorCreateAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName, createAttribute);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="createAttribute"></param>
        partial void OnErrorCreateAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, CreateAttribute createAttribute);

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        public async Task<ICreateAttributeApiResponse?> CreateAttributeOrDefaultAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAttributeAsync(attributeCategory, attributeName, createAttribute, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create contact attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the attribute</param>
        /// <param name="createAttribute">Values to create an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAttributeApiResponse"/>&gt;</returns>
        public async Task<ICreateAttributeApiResponse> CreateAttributeAsync(string attributeCategory, string attributeName, CreateAttribute createAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAttribute(attributeCategory, attributeName, createAttribute);

                FormatCreateAttribute(ref attributeCategory, ref attributeName, createAttribute);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    httpRequestMessageLocalVar.Content = (createAttribute as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createAttribute, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAttributeApiResponse>();

                        CreateAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName, createAttribute);

                        Events.ExecuteOnCreateAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName, createAttribute);
                Events.ExecuteOnErrorCreateAttribute(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAttributeApiResponse"/>
        /// </summary>
        public partial class CreateAttributeApiResponse : BrevoDotNet.Client.ApiResponse, ICreateAttributeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAttributeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAttributeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAttributeApiResponse(ILogger<CreateAttributeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAttribute(ref string attributeCategory, ref string attributeName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <returns></returns>
        private void ValidateDeleteAttribute(string attributeCategory, string attributeName)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        private void AfterDeleteAttributeDefaultImplementation(IDeleteAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        partial void AfterDeleteAttribute(ref bool suppressDefaultLog, IDeleteAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        private void OnErrorDeleteAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        partial void OnErrorDeleteAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName);

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        public async Task<IDeleteAttributeApiResponse?> DeleteAttributeOrDefaultAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAttributeAsync(attributeCategory, attributeName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAttributeApiResponse"/>&gt;</returns>
        public async Task<IDeleteAttributeApiResponse> DeleteAttributeAsync(string attributeCategory, string attributeName, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAttribute(attributeCategory, attributeName);

                FormatDeleteAttribute(ref attributeCategory, ref attributeName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAttributeApiResponse>();

                        DeleteAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName);

                        Events.ExecuteOnDeleteAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName);
                Events.ExecuteOnErrorDeleteAttribute(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAttributeApiResponse"/>
        /// </summary>
        public partial class DeleteAttributeApiResponse : BrevoDotNet.Client.ApiResponse, IDeleteAttributeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAttributeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAttributeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAttributeApiResponse(ILogger<DeleteAttributeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAttributesDefaultImplementation(IGetAttributesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAttributes(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAttributes(ref bool suppressDefaultLog, IGetAttributesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAttributesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAttributes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAttributes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAttributesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all attributes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse> GetAttributesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAttributesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAttributesApiResponse>();

                        GetAttributesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAttributesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAttributes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAttributesDefaultImplementation(e, "/contacts/attributes", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAttributes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAttributesApiResponse"/>
        /// </summary>
        public partial class GetAttributesApiResponse : BrevoDotNet.Client.ApiResponse, IGetAttributesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAttributesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAttributesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAttributesApiResponse(ILogger<GetAttributesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.GetAttributes? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.GetAttributes>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrevoDotNet.Model.GetAttributes? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAttribute(ref string attributeCategory, ref string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        /// <returns></returns>
        private void ValidateUpdateAttribute(string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            if (attributeCategory == null)
                throw new ArgumentNullException(nameof(attributeCategory));

            if (attributeName == null)
                throw new ArgumentNullException(nameof(attributeName));

            if (updateAttribute == null)
                throw new ArgumentNullException(nameof(updateAttribute));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        private void AfterUpdateAttributeDefaultImplementation(IUpdateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAttribute(ref suppressDefaultLog, apiResponseLocalVar, attributeCategory, attributeName, updateAttribute);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        partial void AfterUpdateAttribute(ref bool suppressDefaultLog, IUpdateAttributeApiResponse apiResponseLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        private void OnErrorUpdateAttributeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAttribute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, attributeCategory, attributeName, updateAttribute);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="attributeCategory"></param>
        /// <param name="attributeName"></param>
        /// <param name="updateAttribute"></param>
        partial void OnErrorUpdateAttribute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string attributeCategory, string attributeName, UpdateAttribute updateAttribute);

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        public async Task<IUpdateAttributeApiResponse?> UpdateAttributeOrDefaultAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAttributeAsync(attributeCategory, attributeName, updateAttribute, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update contact attribute 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeCategory">Category of the attribute</param>
        /// <param name="attributeName">Name of the existing attribute</param>
        /// <param name="updateAttribute">Values to update an attribute</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAttributeApiResponse"/>&gt;</returns>
        public async Task<IUpdateAttributeApiResponse> UpdateAttributeAsync(string attributeCategory, string attributeName, UpdateAttribute updateAttribute, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAttribute(attributeCategory, attributeName, updateAttribute);

                FormatUpdateAttribute(ref attributeCategory, ref attributeName, updateAttribute);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/contacts/attributes/{attributeCategory}/{attributeName}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/contacts/attributes/{attributeCategory}/{attributeName}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeCategory%7D", Uri.EscapeDataString(attributeCategory.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BattributeName%7D", Uri.EscapeDataString(attributeName.ToString()));

                    httpRequestMessageLocalVar.Content = (updateAttribute as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateAttribute, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateAttributeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAttributeApiResponse>();

                        UpdateAttributeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/contacts/attributes/{attributeCategory}/{attributeName}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAttributeDefaultImplementation(apiResponseLocalVar, attributeCategory, attributeName, updateAttribute);

                        Events.ExecuteOnUpdateAttribute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAttributeDefaultImplementation(e, "/contacts/attributes/{attributeCategory}/{attributeName}", uriBuilderLocalVar.Path, attributeCategory, attributeName, updateAttribute);
                Events.ExecuteOnErrorUpdateAttribute(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAttributeApiResponse"/>
        /// </summary>
        public partial class UpdateAttributeApiResponse : BrevoDotNet.Client.ApiResponse, IUpdateAttributeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAttributeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAttributeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAttributeApiResponse(ILogger<UpdateAttributeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BrevoDotNet.Model.ErrorModel? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BrevoDotNet.Model.ErrorModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BrevoDotNet.Model.ErrorModel? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
