// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// RequestContactImportJsonBodyInner
    /// </summary>
    public partial class RequestContactImportJsonBodyInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactImportJsonBodyInner" /> class.
        /// </summary>
        /// <param name="email">email</param>
        /// <param name="attributes">List of attributes to be imported. Example for all attribute types parsing. - For text type attribute \&quot;attributes\&quot;: {\&quot;FNAME\&quot; : \&quot;John\&quot;} - For date type attribute \&quot;attributes\&quot;: {\&quot;BIRTHDAY\&quot; : \&quot;1989-11-02\&quot;} - For Number type attribute \&quot;attributes\&quot;: {\&quot;AGE\&quot; : 26} - For boolean type attribute \&quot;attributes\&quot;: {\&quot;IS_MARRIED\&quot; : \&quot;yes\&quot;} // no if false. - For category type attribute \&quot;attributes\&quot;: {\&quot;COUNTRY\&quot; : \&quot;DE\&quot;} - For multiselect type attribute \&quot;attributes\&quot;: {\&quot;PREFERED_COLOR\&quot; : [\&quot;BLACK\&quot;, \&quot;WHITE\&quot;]}  - For user type attribute \&quot;attributes\&quot;: {\&quot;OWNER\&quot; : \&quot;test@brevo.com\&quot;} </param>
        [JsonConstructor]
        public RequestContactImportJsonBodyInner(Option<string?> email = default, Option<Dictionary<string, Object>?> attributes = default)
        {
            EmailOption = email;
            AttributesOption = attributes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> AttributesOption { get; private set; }

        /// <summary>
        /// List of attributes to be imported. Example for all attribute types parsing. - For text type attribute \&quot;attributes\&quot;: {\&quot;FNAME\&quot; : \&quot;John\&quot;} - For date type attribute \&quot;attributes\&quot;: {\&quot;BIRTHDAY\&quot; : \&quot;1989-11-02\&quot;} - For Number type attribute \&quot;attributes\&quot;: {\&quot;AGE\&quot; : 26} - For boolean type attribute \&quot;attributes\&quot;: {\&quot;IS_MARRIED\&quot; : \&quot;yes\&quot;} // no if false. - For category type attribute \&quot;attributes\&quot;: {\&quot;COUNTRY\&quot; : \&quot;DE\&quot;} - For multiselect type attribute \&quot;attributes\&quot;: {\&quot;PREFERED_COLOR\&quot; : [\&quot;BLACK\&quot;, \&quot;WHITE\&quot;]}  - For user type attribute \&quot;attributes\&quot;: {\&quot;OWNER\&quot; : \&quot;test@brevo.com\&quot;} 
        /// </summary>
        /// <value>List of attributes to be imported. Example for all attribute types parsing. - For text type attribute \&quot;attributes\&quot;: {\&quot;FNAME\&quot; : \&quot;John\&quot;} - For date type attribute \&quot;attributes\&quot;: {\&quot;BIRTHDAY\&quot; : \&quot;1989-11-02\&quot;} - For Number type attribute \&quot;attributes\&quot;: {\&quot;AGE\&quot; : 26} - For boolean type attribute \&quot;attributes\&quot;: {\&quot;IS_MARRIED\&quot; : \&quot;yes\&quot;} // no if false. - For category type attribute \&quot;attributes\&quot;: {\&quot;COUNTRY\&quot; : \&quot;DE\&quot;} - For multiselect type attribute \&quot;attributes\&quot;: {\&quot;PREFERED_COLOR\&quot; : [\&quot;BLACK\&quot;, \&quot;WHITE\&quot;]}  - For user type attribute \&quot;attributes\&quot;: {\&quot;OWNER\&quot; : \&quot;test@brevo.com\&quot;} </value>
        [JsonPropertyName("attributes")]
        public Dictionary<string, Object>? Attributes { get { return this.AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContactImportJsonBodyInner {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequestContactImportJsonBodyInner" />
    /// </summary>
    public class RequestContactImportJsonBodyInnerJsonConverter : JsonConverter<RequestContactImportJsonBodyInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="RequestContactImportJsonBodyInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RequestContactImportJsonBodyInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<Dictionary<string, Object>?> attributes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attributes":
                            attributes = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class RequestContactImportJsonBodyInner.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class RequestContactImportJsonBodyInner.");

            return new RequestContactImportJsonBodyInner(email, attributes);
        }

        /// <summary>
        /// Serializes a <see cref="RequestContactImportJsonBodyInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactImportJsonBodyInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RequestContactImportJsonBodyInner requestContactImportJsonBodyInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, requestContactImportJsonBodyInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RequestContactImportJsonBodyInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactImportJsonBodyInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RequestContactImportJsonBodyInner requestContactImportJsonBodyInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (requestContactImportJsonBodyInner.EmailOption.IsSet && requestContactImportJsonBodyInner.Email == null)
                throw new ArgumentNullException(nameof(requestContactImportJsonBodyInner.Email), "Property is required for class RequestContactImportJsonBodyInner.");

            if (requestContactImportJsonBodyInner.AttributesOption.IsSet && requestContactImportJsonBodyInner.Attributes == null)
                throw new ArgumentNullException(nameof(requestContactImportJsonBodyInner.Attributes), "Property is required for class RequestContactImportJsonBodyInner.");

            if (requestContactImportJsonBodyInner.EmailOption.IsSet)
                writer.WriteString("email", requestContactImportJsonBodyInner.Email);

            if (requestContactImportJsonBodyInner.AttributesOption.IsSet)
            {
                writer.WritePropertyName("attributes");
                JsonSerializer.Serialize(writer, requestContactImportJsonBodyInner.Attributes, jsonSerializerOptions);
            }
        }
    }
}
