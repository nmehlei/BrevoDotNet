// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// CreateDoiContact
    /// </summary>
    public partial class CreateDoiContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDoiContact" /> class.
        /// </summary>
        /// <param name="email">Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.</param>
        /// <param name="includeListIds">Lists under user account where contact should be added</param>
        /// <param name="templateId">Id of the Double opt-in (DOI) template</param>
        /// <param name="redirectionUrl">URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.</param>
        /// <param name="attributes">Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {&#39;FNAME&#39;:&#39;Elly&#39;, &#39;LNAME&#39;:&#39;Roger&#39;}</param>
        /// <param name="excludeListIds">Lists under user account where contact should not be added</param>
        [JsonConstructor]
        public CreateDoiContact(string email, List<long> includeListIds, long templateId, string redirectionUrl, Option<Object?> attributes = default, Option<List<long>?> excludeListIds = default)
        {
            Email = email;
            IncludeListIds = includeListIds;
            TemplateId = templateId;
            RedirectionUrl = redirectionUrl;
            AttributesOption = attributes;
            ExcludeListIdsOption = excludeListIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.
        /// </summary>
        /// <value>Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.</value>
        /* <example>elly@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Lists under user account where contact should be added
        /// </summary>
        /// <value>Lists under user account where contact should be added</value>
        [JsonPropertyName("includeListIds")]
        public List<long> IncludeListIds { get; set; }

        /// <summary>
        /// Id of the Double opt-in (DOI) template
        /// </summary>
        /// <value>Id of the Double opt-in (DOI) template</value>
        /* <example>2</example> */
        [JsonPropertyName("templateId")]
        public long TemplateId { get; set; }

        /// <summary>
        /// URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.
        /// </summary>
        /// <value>URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("redirectionUrl")]
        public string RedirectionUrl { get; set; }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AttributesOption { get; private set; }

        /// <summary>
        /// Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {&#39;FNAME&#39;:&#39;Elly&#39;, &#39;LNAME&#39;:&#39;Roger&#39;}
        /// </summary>
        /// <value>Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {&#39;FNAME&#39;:&#39;Elly&#39;, &#39;LNAME&#39;:&#39;Roger&#39;}</value>
        /* <example>{&quot;FNAME&quot;:&quot;Elly&quot;,&quot;LNAME&quot;:&quot;Roger&quot;}</example> */
        [JsonPropertyName("attributes")]
        public Object? Attributes { get { return this.AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExcludeListIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ExcludeListIdsOption { get; private set; }

        /// <summary>
        /// Lists under user account where contact should not be added
        /// </summary>
        /// <value>Lists under user account where contact should not be added</value>
        [JsonPropertyName("excludeListIds")]
        public List<long>? ExcludeListIds { get { return this.ExcludeListIdsOption; } set { this.ExcludeListIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDoiContact {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IncludeListIds: ").Append(IncludeListIds).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  RedirectionUrl: ").Append(RedirectionUrl).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ExcludeListIds: ").Append(ExcludeListIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDoiContact" />
    /// </summary>
    public class CreateDoiContactJsonConverter : JsonConverter<CreateDoiContact>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateDoiContact" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDoiContact Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<List<long>?> includeListIds = default;
            Option<long?> templateId = default;
            Option<string?> redirectionUrl = default;
            Option<Object?> attributes = default;
            Option<List<long>?> excludeListIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "includeListIds":
                            includeListIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templateId":
                            templateId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "redirectionUrl":
                            redirectionUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attributes":
                            attributes = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "excludeListIds":
                            excludeListIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class CreateDoiContact.", nameof(email));

            if (!includeListIds.IsSet)
                throw new ArgumentException("Property is required for class CreateDoiContact.", nameof(includeListIds));

            if (!templateId.IsSet)
                throw new ArgumentException("Property is required for class CreateDoiContact.", nameof(templateId));

            if (!redirectionUrl.IsSet)
                throw new ArgumentException("Property is required for class CreateDoiContact.", nameof(redirectionUrl));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class CreateDoiContact.");

            if (includeListIds.IsSet && includeListIds.Value == null)
                throw new ArgumentNullException(nameof(includeListIds), "Property is not nullable for class CreateDoiContact.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class CreateDoiContact.");

            if (redirectionUrl.IsSet && redirectionUrl.Value == null)
                throw new ArgumentNullException(nameof(redirectionUrl), "Property is not nullable for class CreateDoiContact.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class CreateDoiContact.");

            if (excludeListIds.IsSet && excludeListIds.Value == null)
                throw new ArgumentNullException(nameof(excludeListIds), "Property is not nullable for class CreateDoiContact.");

            return new CreateDoiContact(email.Value!, includeListIds.Value!, templateId.Value!.Value!, redirectionUrl.Value!, attributes, excludeListIds);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDoiContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDoiContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDoiContact createDoiContact, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDoiContact, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDoiContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDoiContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDoiContact createDoiContact, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDoiContact.Email == null)
                throw new ArgumentNullException(nameof(createDoiContact.Email), "Property is required for class CreateDoiContact.");

            if (createDoiContact.IncludeListIds == null)
                throw new ArgumentNullException(nameof(createDoiContact.IncludeListIds), "Property is required for class CreateDoiContact.");

            if (createDoiContact.RedirectionUrl == null)
                throw new ArgumentNullException(nameof(createDoiContact.RedirectionUrl), "Property is required for class CreateDoiContact.");

            if (createDoiContact.AttributesOption.IsSet && createDoiContact.Attributes == null)
                throw new ArgumentNullException(nameof(createDoiContact.Attributes), "Property is required for class CreateDoiContact.");

            if (createDoiContact.ExcludeListIdsOption.IsSet && createDoiContact.ExcludeListIds == null)
                throw new ArgumentNullException(nameof(createDoiContact.ExcludeListIds), "Property is required for class CreateDoiContact.");

            writer.WriteString("email", createDoiContact.Email);

            writer.WritePropertyName("includeListIds");
            JsonSerializer.Serialize(writer, createDoiContact.IncludeListIds, jsonSerializerOptions);
            writer.WriteNumber("templateId", createDoiContact.TemplateId);

            writer.WriteString("redirectionUrl", createDoiContact.RedirectionUrl);

            if (createDoiContact.AttributesOption.IsSet)
            {
                writer.WritePropertyName("attributes");
                JsonSerializer.Serialize(writer, createDoiContact.Attributes, jsonSerializerOptions);
            }
            if (createDoiContact.ExcludeListIdsOption.IsSet)
            {
                writer.WritePropertyName("excludeListIds");
                JsonSerializer.Serialize(writer, createDoiContact.ExcludeListIds, jsonSerializerOptions);
            }
        }
    }
}
