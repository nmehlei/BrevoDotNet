// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// PostContactInfoContacts
    /// </summary>
    public partial class PostContactInfoContacts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContactInfoContacts" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="failure">failure</param>
        /// <param name="total">Displays the count of total number of contacts removed from list when user opts for \&quot;all\&quot; option.</param>
        /// <param name="processId">Id of the process created to remove contacts from list when user opts for \&quot;all\&quot; option.</param>
        [JsonConstructor]
        public PostContactInfoContacts(Option<List<string>?> success = default, Option<List<string>?> failure = default, Option<long?> total = default, Option<long?> processId = default)
        {
            SuccessOption = success;
            FailureOption = failure;
            TotalOption = total;
            ProcessIdOption = processId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Success
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SuccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public List<string>? Success { get { return this.SuccessOption; } set { this.SuccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of Failure
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FailureOption { get; private set; }

        /// <summary>
        /// Gets or Sets Failure
        /// </summary>
        [JsonPropertyName("failure")]
        public List<string>? Failure { get { return this.FailureOption; } set { this.FailureOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TotalOption { get; private set; }

        /// <summary>
        /// Displays the count of total number of contacts removed from list when user opts for \&quot;all\&quot; option.
        /// </summary>
        /// <value>Displays the count of total number of contacts removed from list when user opts for \&quot;all\&quot; option.</value>
        /* <example>27</example> */
        [JsonPropertyName("total")]
        public long? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProcessIdOption { get; private set; }

        /// <summary>
        /// Id of the process created to remove contacts from list when user opts for \&quot;all\&quot; option.
        /// </summary>
        /// <value>Id of the process created to remove contacts from list when user opts for \&quot;all\&quot; option.</value>
        /* <example>78</example> */
        [JsonPropertyName("processId")]
        public long? ProcessId { get { return this.ProcessIdOption; } set { this.ProcessIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostContactInfoContacts {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Failure: ").Append(Failure).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostContactInfoContacts" />
    /// </summary>
    public class PostContactInfoContactsJsonConverter : JsonConverter<PostContactInfoContacts>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostContactInfoContacts" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostContactInfoContacts Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> success = default;
            Option<List<string>?> failure = default;
            Option<long?> total = default;
            Option<long?> processId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "failure":
                            failure = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "processId":
                            processId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class PostContactInfoContacts.");

            if (failure.IsSet && failure.Value == null)
                throw new ArgumentNullException(nameof(failure), "Property is not nullable for class PostContactInfoContacts.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class PostContactInfoContacts.");

            if (processId.IsSet && processId.Value == null)
                throw new ArgumentNullException(nameof(processId), "Property is not nullable for class PostContactInfoContacts.");

            return new PostContactInfoContacts(success, failure, total, processId);
        }

        /// <summary>
        /// Serializes a <see cref="PostContactInfoContacts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postContactInfoContacts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostContactInfoContacts postContactInfoContacts, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postContactInfoContacts, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostContactInfoContacts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postContactInfoContacts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostContactInfoContacts postContactInfoContacts, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postContactInfoContacts.SuccessOption.IsSet && postContactInfoContacts.Success == null)
                throw new ArgumentNullException(nameof(postContactInfoContacts.Success), "Property is required for class PostContactInfoContacts.");

            if (postContactInfoContacts.FailureOption.IsSet && postContactInfoContacts.Failure == null)
                throw new ArgumentNullException(nameof(postContactInfoContacts.Failure), "Property is required for class PostContactInfoContacts.");

            if (postContactInfoContacts.SuccessOption.IsSet)
            {
                writer.WritePropertyName("success");
                JsonSerializer.Serialize(writer, postContactInfoContacts.Success, jsonSerializerOptions);
            }
            if (postContactInfoContacts.FailureOption.IsSet)
            {
                writer.WritePropertyName("failure");
                JsonSerializer.Serialize(writer, postContactInfoContacts.Failure, jsonSerializerOptions);
            }
            if (postContactInfoContacts.TotalOption.IsSet)
                writer.WriteNumber("total", postContactInfoContacts.TotalOption.Value!.Value);

            if (postContactInfoContacts.ProcessIdOption.IsSet)
                writer.WriteNumber("processId", postContactInfoContacts.ProcessIdOption.Value!.Value);
        }
    }
}
