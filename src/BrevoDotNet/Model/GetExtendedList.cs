// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetExtendedList
    /// </summary>
    public partial class GetExtendedList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedList" /> class.
        /// </summary>
        /// <param name="id">ID of the list</param>
        /// <param name="name">Name of the list</param>
        /// <param name="totalBlacklisted">Number of blacklisted contacts in the list</param>
        /// <param name="totalSubscribers">Number of contacts in the list</param>
        /// <param name="folderId">ID of the folder</param>
        /// <param name="createdAt">Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="campaignStats">campaignStats</param>
        /// <param name="dynamicList">Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic)</param>
        [JsonConstructor]
        public GetExtendedList(long id, string name, long totalBlacklisted, long totalSubscribers, long folderId, DateTime createdAt, Option<List<GetExtendedListAllOfCampaignStats>?> campaignStats = default, Option<bool?> dynamicList = default)
        {
            Id = id;
            Name = name;
            TotalBlacklisted = totalBlacklisted;
            TotalSubscribers = totalSubscribers;
            FolderId = folderId;
            CreatedAt = createdAt;
            CampaignStatsOption = campaignStats;
            DynamicListOption = dynamicList;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the list
        /// </summary>
        /// <value>ID of the list</value>
        /* <example>23</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the list
        /// </summary>
        /// <value>Name of the list</value>
        /* <example>Magento Customers - EN</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Number of blacklisted contacts in the list
        /// </summary>
        /// <value>Number of blacklisted contacts in the list</value>
        /* <example>13</example> */
        [JsonPropertyName("totalBlacklisted")]
        public long TotalBlacklisted { get; set; }

        /// <summary>
        /// Number of contacts in the list
        /// </summary>
        /// <value>Number of contacts in the list</value>
        /* <example>1776</example> */
        [JsonPropertyName("totalSubscribers")]
        public long TotalSubscribers { get; set; }

        /// <summary>
        /// ID of the folder
        /// </summary>
        /// <value>ID of the folder</value>
        /* <example>2</example> */
        [JsonPropertyName("folderId")]
        public long FolderId { get; set; }

        /// <summary>
        /// Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-03-13T17:05:09Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of CampaignStats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedListAllOfCampaignStats>?> CampaignStatsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CampaignStats
        /// </summary>
        [JsonPropertyName("campaignStats")]
        public List<GetExtendedListAllOfCampaignStats>? CampaignStats { get { return this.CampaignStatsOption; } set { this.CampaignStatsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DynamicList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DynamicListOption { get; private set; }

        /// <summary>
        /// Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic)
        /// </summary>
        /// <value>Status telling if the list is dynamic or not (true&#x3D;dynamic, false&#x3D;not dynamic)</value>
        /* <example>false</example> */
        [JsonPropertyName("dynamicList")]
        public bool? DynamicList { get { return this.DynamicListOption; } set { this.DynamicListOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExtendedList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalBlacklisted: ").Append(TotalBlacklisted).Append("\n");
            sb.Append("  TotalSubscribers: ").Append(TotalSubscribers).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CampaignStats: ").Append(CampaignStats).Append("\n");
            sb.Append("  DynamicList: ").Append(DynamicList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetExtendedList" />
    /// </summary>
    public class GetExtendedListJsonConverter : JsonConverter<GetExtendedList>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetExtendedList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetExtendedList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<long?> totalBlacklisted = default;
            Option<long?> totalSubscribers = default;
            Option<long?> folderId = default;
            Option<DateTime?> createdAt = default;
            Option<List<GetExtendedListAllOfCampaignStats>?> campaignStats = default;
            Option<bool?> dynamicList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totalBlacklisted":
                            totalBlacklisted = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "totalSubscribers":
                            totalSubscribers = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "folderId":
                            folderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "campaignStats":
                            campaignStats = new Option<List<GetExtendedListAllOfCampaignStats>?>(JsonSerializer.Deserialize<List<GetExtendedListAllOfCampaignStats>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dynamicList":
                            dynamicList = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(name));

            if (!totalBlacklisted.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(totalBlacklisted));

            if (!totalSubscribers.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(totalSubscribers));

            if (!folderId.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(folderId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedList.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetExtendedList.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetExtendedList.");

            if (totalBlacklisted.IsSet && totalBlacklisted.Value == null)
                throw new ArgumentNullException(nameof(totalBlacklisted), "Property is not nullable for class GetExtendedList.");

            if (totalSubscribers.IsSet && totalSubscribers.Value == null)
                throw new ArgumentNullException(nameof(totalSubscribers), "Property is not nullable for class GetExtendedList.");

            if (folderId.IsSet && folderId.Value == null)
                throw new ArgumentNullException(nameof(folderId), "Property is not nullable for class GetExtendedList.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetExtendedList.");

            if (campaignStats.IsSet && campaignStats.Value == null)
                throw new ArgumentNullException(nameof(campaignStats), "Property is not nullable for class GetExtendedList.");

            if (dynamicList.IsSet && dynamicList.Value == null)
                throw new ArgumentNullException(nameof(dynamicList), "Property is not nullable for class GetExtendedList.");

            return new GetExtendedList(id.Value!.Value!, name.Value!, totalBlacklisted.Value!.Value!, totalSubscribers.Value!.Value!, folderId.Value!.Value!, createdAt.Value!.Value!, campaignStats, dynamicList);
        }

        /// <summary>
        /// Serializes a <see cref="GetExtendedList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetExtendedList getExtendedList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getExtendedList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetExtendedList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetExtendedList getExtendedList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getExtendedList.Name == null)
                throw new ArgumentNullException(nameof(getExtendedList.Name), "Property is required for class GetExtendedList.");

            if (getExtendedList.CampaignStatsOption.IsSet && getExtendedList.CampaignStats == null)
                throw new ArgumentNullException(nameof(getExtendedList.CampaignStats), "Property is required for class GetExtendedList.");

            writer.WriteNumber("id", getExtendedList.Id);

            writer.WriteString("name", getExtendedList.Name);

            writer.WriteNumber("totalBlacklisted", getExtendedList.TotalBlacklisted);

            writer.WriteNumber("totalSubscribers", getExtendedList.TotalSubscribers);

            writer.WriteNumber("folderId", getExtendedList.FolderId);

            writer.WriteString("createdAt", getExtendedList.CreatedAt.ToString(CreatedAtFormat));

            if (getExtendedList.CampaignStatsOption.IsSet)
            {
                writer.WritePropertyName("campaignStats");
                JsonSerializer.Serialize(writer, getExtendedList.CampaignStats, jsonSerializerOptions);
            }
            if (getExtendedList.DynamicListOption.IsSet)
                writer.WriteBoolean("dynamicList", getExtendedList.DynamicListOption.Value!.Value);
        }
    }
}
