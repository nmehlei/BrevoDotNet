// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// SendEmail
    /// </summary>
    public partial class SendEmail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendEmail" /> class.
        /// </summary>
        /// <param name="emailTo">List of the email addresses of the recipients. For example, [&#39;abc@example.com&#39;, &#39;asd@example.com&#39;].</param>
        /// <param name="emailBcc">List of the email addresses of the recipients in bcc</param>
        /// <param name="emailCc">List of the email addresses of the recipients in cc</param>
        /// <param name="replyTo">Email address which shall be used by campaign recipients to reply back</param>
        /// <param name="attachmentUrl">Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</param>
        /// <param name="attachment">Pass the list of content (base64 encoded) and name of the attachment. For example, [{\&quot;content\&quot;:\&quot;base64 encoded content 1\&quot;, \&quot;name\&quot;:\&quot;attcahment1\&quot;}, {\&quot;content\&quot;:\&quot;base64 encoded content 2\&quot;, \&quot;name\&quot;:\&quot;attcahment2\&quot;}].</param>
        /// <param name="headers">Pass the set of headers that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {\&quot;Content-Type\&quot;:\&quot;text/html\&quot;, \&quot;charset\&quot;:\&quot;iso-8859-1\&quot;, \&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;}</param>
        /// <param name="attributes">Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}</param>
        /// <param name="tags">Tag your emails to find them more easily</param>
        [JsonConstructor]
        public SendEmail(List<string> emailTo, Option<List<string>?> emailBcc = default, Option<List<string>?> emailCc = default, Option<string?> replyTo = default, Option<string?> attachmentUrl = default, Option<List<SendEmailAttachmentInner>?> attachment = default, Option<Object?> headers = default, Option<Object?> attributes = default, Option<List<string>?> tags = default)
        {
            EmailTo = emailTo;
            EmailBccOption = emailBcc;
            EmailCcOption = emailCc;
            ReplyToOption = replyTo;
            AttachmentUrlOption = attachmentUrl;
            AttachmentOption = attachment;
            HeadersOption = headers;
            AttributesOption = attributes;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// List of the email addresses of the recipients. For example, [&#39;abc@example.com&#39;, &#39;asd@example.com&#39;].
        /// </summary>
        /// <value>List of the email addresses of the recipients. For example, [&#39;abc@example.com&#39;, &#39;asd@example.com&#39;].</value>
        [JsonPropertyName("emailTo")]
        public List<string> EmailTo { get; set; }

        /// <summary>
        /// Used to track the state of EmailBcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EmailBccOption { get; private set; }

        /// <summary>
        /// List of the email addresses of the recipients in bcc
        /// </summary>
        /// <value>List of the email addresses of the recipients in bcc</value>
        [JsonPropertyName("emailBcc")]
        public List<string>? EmailBcc { get { return this.EmailBccOption; } set { this.EmailBccOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailCc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EmailCcOption { get; private set; }

        /// <summary>
        /// List of the email addresses of the recipients in cc
        /// </summary>
        /// <value>List of the email addresses of the recipients in cc</value>
        [JsonPropertyName("emailCc")]
        public List<string>? EmailCc { get { return this.EmailCcOption; } set { this.EmailCcOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyToOption { get; private set; }

        /// <summary>
        /// Email address which shall be used by campaign recipients to reply back
        /// </summary>
        /// <value>Email address which shall be used by campaign recipients to reply back</value>
        /* <example>support@myshop.com</example> */
        [JsonPropertyName("replyTo")]
        public string? ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttachmentUrlOption { get; private set; }

        /// <summary>
        /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
        /// </summary>
        /// <value>Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</value>
        /* <example>https://attachment.domain.com</example> */
        [JsonPropertyName("attachmentUrl")]
        public string? AttachmentUrl { get { return this.AttachmentUrlOption; } set { this.AttachmentUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SendEmailAttachmentInner>?> AttachmentOption { get; private set; }

        /// <summary>
        /// Pass the list of content (base64 encoded) and name of the attachment. For example, [{\&quot;content\&quot;:\&quot;base64 encoded content 1\&quot;, \&quot;name\&quot;:\&quot;attcahment1\&quot;}, {\&quot;content\&quot;:\&quot;base64 encoded content 2\&quot;, \&quot;name\&quot;:\&quot;attcahment2\&quot;}].
        /// </summary>
        /// <value>Pass the list of content (base64 encoded) and name of the attachment. For example, [{\&quot;content\&quot;:\&quot;base64 encoded content 1\&quot;, \&quot;name\&quot;:\&quot;attcahment1\&quot;}, {\&quot;content\&quot;:\&quot;base64 encoded content 2\&quot;, \&quot;name\&quot;:\&quot;attcahment2\&quot;}].</value>
        [JsonPropertyName("attachment")]
        public List<SendEmailAttachmentInner>? Attachment { get { return this.AttachmentOption; } set { this.AttachmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Headers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HeadersOption { get; private set; }

        /// <summary>
        /// Pass the set of headers that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {\&quot;Content-Type\&quot;:\&quot;text/html\&quot;, \&quot;charset\&quot;:\&quot;iso-8859-1\&quot;, \&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;}
        /// </summary>
        /// <value>Pass the set of headers that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {\&quot;Content-Type\&quot;:\&quot;text/html\&quot;, \&quot;charset\&quot;:\&quot;iso-8859-1\&quot;, \&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;}</value>
        /* <example>{&quot;Content-Type&quot;:&quot;text/html&quot;,&quot;charset&quot;:&quot;iso-8859-1&quot;,&quot;sender.ip&quot;:&quot;1.2.3.4&quot;}</example> */
        [JsonPropertyName("headers")]
        public Object? Headers { get { return this.HeadersOption; } set { this.HeadersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AttributesOption { get; private set; }

        /// <summary>
        /// Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}
        /// </summary>
        /// <value>Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}</value>
        /* <example>{&quot;FNAME&quot;:&quot;Joe&quot;,&quot;LNAME&quot;:&quot;Doe&quot;}</example> */
        [JsonPropertyName("attributes")]
        public Object? Attributes { get { return this.AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Tag your emails to find them more easily
        /// </summary>
        /// <value>Tag your emails to find them more easily</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendEmail {\n");
            sb.Append("  EmailTo: ").Append(EmailTo).Append("\n");
            sb.Append("  EmailBcc: ").Append(EmailBcc).Append("\n");
            sb.Append("  EmailCc: ").Append(EmailCc).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendEmail" />
    /// </summary>
    public class SendEmailJsonConverter : JsonConverter<SendEmail>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendEmail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendEmail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> emailTo = default;
            Option<List<string>?> emailBcc = default;
            Option<List<string>?> emailCc = default;
            Option<string?> replyTo = default;
            Option<string?> attachmentUrl = default;
            Option<List<SendEmailAttachmentInner>?> attachment = default;
            Option<Object?> headers = default;
            Option<Object?> attributes = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emailTo":
                            emailTo = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "emailBcc":
                            emailBcc = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "emailCc":
                            emailCc = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "replyTo":
                            replyTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachmentUrl":
                            attachmentUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachment":
                            attachment = new Option<List<SendEmailAttachmentInner>?>(JsonSerializer.Deserialize<List<SendEmailAttachmentInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "headers":
                            headers = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attributes":
                            attributes = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!emailTo.IsSet)
                throw new ArgumentException("Property is required for class SendEmail.", nameof(emailTo));

            if (emailTo.IsSet && emailTo.Value == null)
                throw new ArgumentNullException(nameof(emailTo), "Property is not nullable for class SendEmail.");

            if (emailBcc.IsSet && emailBcc.Value == null)
                throw new ArgumentNullException(nameof(emailBcc), "Property is not nullable for class SendEmail.");

            if (emailCc.IsSet && emailCc.Value == null)
                throw new ArgumentNullException(nameof(emailCc), "Property is not nullable for class SendEmail.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class SendEmail.");

            if (attachmentUrl.IsSet && attachmentUrl.Value == null)
                throw new ArgumentNullException(nameof(attachmentUrl), "Property is not nullable for class SendEmail.");

            if (attachment.IsSet && attachment.Value == null)
                throw new ArgumentNullException(nameof(attachment), "Property is not nullable for class SendEmail.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class SendEmail.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class SendEmail.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class SendEmail.");

            return new SendEmail(emailTo.Value!, emailBcc, emailCc, replyTo, attachmentUrl, attachment, headers, attributes, tags);
        }

        /// <summary>
        /// Serializes a <see cref="SendEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendEmail sendEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendEmail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendEmail sendEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendEmail.EmailTo == null)
                throw new ArgumentNullException(nameof(sendEmail.EmailTo), "Property is required for class SendEmail.");

            if (sendEmail.EmailBccOption.IsSet && sendEmail.EmailBcc == null)
                throw new ArgumentNullException(nameof(sendEmail.EmailBcc), "Property is required for class SendEmail.");

            if (sendEmail.EmailCcOption.IsSet && sendEmail.EmailCc == null)
                throw new ArgumentNullException(nameof(sendEmail.EmailCc), "Property is required for class SendEmail.");

            if (sendEmail.ReplyToOption.IsSet && sendEmail.ReplyTo == null)
                throw new ArgumentNullException(nameof(sendEmail.ReplyTo), "Property is required for class SendEmail.");

            if (sendEmail.AttachmentUrlOption.IsSet && sendEmail.AttachmentUrl == null)
                throw new ArgumentNullException(nameof(sendEmail.AttachmentUrl), "Property is required for class SendEmail.");

            if (sendEmail.AttachmentOption.IsSet && sendEmail.Attachment == null)
                throw new ArgumentNullException(nameof(sendEmail.Attachment), "Property is required for class SendEmail.");

            if (sendEmail.HeadersOption.IsSet && sendEmail.Headers == null)
                throw new ArgumentNullException(nameof(sendEmail.Headers), "Property is required for class SendEmail.");

            if (sendEmail.AttributesOption.IsSet && sendEmail.Attributes == null)
                throw new ArgumentNullException(nameof(sendEmail.Attributes), "Property is required for class SendEmail.");

            if (sendEmail.TagsOption.IsSet && sendEmail.Tags == null)
                throw new ArgumentNullException(nameof(sendEmail.Tags), "Property is required for class SendEmail.");

            writer.WritePropertyName("emailTo");
            JsonSerializer.Serialize(writer, sendEmail.EmailTo, jsonSerializerOptions);
            if (sendEmail.EmailBccOption.IsSet)
            {
                writer.WritePropertyName("emailBcc");
                JsonSerializer.Serialize(writer, sendEmail.EmailBcc, jsonSerializerOptions);
            }
            if (sendEmail.EmailCcOption.IsSet)
            {
                writer.WritePropertyName("emailCc");
                JsonSerializer.Serialize(writer, sendEmail.EmailCc, jsonSerializerOptions);
            }
            if (sendEmail.ReplyToOption.IsSet)
                writer.WriteString("replyTo", sendEmail.ReplyTo);

            if (sendEmail.AttachmentUrlOption.IsSet)
                writer.WriteString("attachmentUrl", sendEmail.AttachmentUrl);

            if (sendEmail.AttachmentOption.IsSet)
            {
                writer.WritePropertyName("attachment");
                JsonSerializer.Serialize(writer, sendEmail.Attachment, jsonSerializerOptions);
            }
            if (sendEmail.HeadersOption.IsSet)
            {
                writer.WritePropertyName("headers");
                JsonSerializer.Serialize(writer, sendEmail.Headers, jsonSerializerOptions);
            }
            if (sendEmail.AttributesOption.IsSet)
            {
                writer.WritePropertyName("attributes");
                JsonSerializer.Serialize(writer, sendEmail.Attributes, jsonSerializerOptions);
            }
            if (sendEmail.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, sendEmail.Tags, jsonSerializerOptions);
            }
        }
    }
}
