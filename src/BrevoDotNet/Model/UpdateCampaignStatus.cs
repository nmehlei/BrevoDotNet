// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Status of the campaign
    /// </summary>
    public partial class UpdateCampaignStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCampaignStatus" /> class.
        /// </summary>
        /// <param name="status">Note:- replicateTemplate status will be available only for template type campaigns.</param>
        [JsonConstructor]
        public UpdateCampaignStatus(Option<StatusEnum?> status = default)
        {
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Note:- replicateTemplate status will be available only for template type campaigns.
        /// </summary>
        /// <value>Note:- replicateTemplate status will be available only for template type campaigns.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 1,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            Archive = 2,

            /// <summary>
            /// Enum Darchive for value: darchive
            /// </summary>
            Darchive = 3,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 4,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            Queued = 5,

            /// <summary>
            /// Enum Replicate for value: replicate
            /// </summary>
            Replicate = 6,

            /// <summary>
            /// Enum ReplicateTemplate for value: replicateTemplate
            /// </summary>
            ReplicateTemplate = 7,

            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 8
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("darchive"))
                return StatusEnum.Darchive;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("replicate"))
                return StatusEnum.Replicate;

            if (value.Equals("replicateTemplate"))
                return StatusEnum.ReplicateTemplate;

            if (value.Equals("draft"))
                return StatusEnum.Draft;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("darchive"))
                return StatusEnum.Darchive;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("replicate"))
                return StatusEnum.Replicate;

            if (value.Equals("replicateTemplate"))
                return StatusEnum.ReplicateTemplate;

            if (value.Equals("draft"))
                return StatusEnum.Draft;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Suspended)
                return "suspended";

            if (value == StatusEnum.Archive)
                return "archive";

            if (value == StatusEnum.Darchive)
                return "darchive";

            if (value == StatusEnum.Sent)
                return "sent";

            if (value == StatusEnum.Queued)
                return "queued";

            if (value == StatusEnum.Replicate)
                return "replicate";

            if (value == StatusEnum.ReplicateTemplate)
                return "replicateTemplate";

            if (value == StatusEnum.Draft)
                return "draft";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Note:- replicateTemplate status will be available only for template type campaigns.
        /// </summary>
        /// <value>Note:- replicateTemplate status will be available only for template type campaigns.</value>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateCampaignStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateCampaignStatus" />
    /// </summary>
    public class UpdateCampaignStatusJsonConverter : JsonConverter<UpdateCampaignStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateCampaignStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateCampaignStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UpdateCampaignStatus.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<UpdateCampaignStatus.StatusEnum?>(UpdateCampaignStatus.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UpdateCampaignStatus.");

            return new UpdateCampaignStatus(status);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateCampaignStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateCampaignStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateCampaignStatus updateCampaignStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateCampaignStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateCampaignStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateCampaignStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateCampaignStatus updateCampaignStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            var statusRawValue = UpdateCampaignStatus.StatusEnumToJsonValue(updateCampaignStatus.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
        }
    }
}
