// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetContactCampaignStatsTransacAttributesInner
    /// </summary>
    public partial class GetContactCampaignStatsTransacAttributesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactCampaignStatsTransacAttributesInner" /> class.
        /// </summary>
        /// <param name="orderDate">Date of the order</param>
        /// <param name="orderPrice">Price of the order</param>
        /// <param name="orderId">ID of the order</param>
        [JsonConstructor]
        public GetContactCampaignStatsTransacAttributesInner(DateOnly orderDate, float orderPrice, long orderId)
        {
            OrderDate = orderDate;
            OrderPrice = orderPrice;
            OrderId = orderId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Date of the order
        /// </summary>
        /// <value>Date of the order</value>
        /* <example>Sun Mar 12 00:00:00 UTC 2017</example> */
        [JsonPropertyName("orderDate")]
        public DateOnly OrderDate { get; set; }

        /// <summary>
        /// Price of the order
        /// </summary>
        /// <value>Price of the order</value>
        /* <example>24.99</example> */
        [JsonPropertyName("orderPrice")]
        public float OrderPrice { get; set; }

        /// <summary>
        /// ID of the order
        /// </summary>
        /// <value>ID of the order</value>
        /* <example>248</example> */
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetContactCampaignStatsTransacAttributesInner {\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderPrice: ").Append(OrderPrice).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetContactCampaignStatsTransacAttributesInner" />
    /// </summary>
    public class GetContactCampaignStatsTransacAttributesInnerJsonConverter : JsonConverter<GetContactCampaignStatsTransacAttributesInner>
    {
        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="GetContactCampaignStatsTransacAttributesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetContactCampaignStatsTransacAttributesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> orderDate = default;
            Option<float?> orderPrice = default;
            Option<long?> orderId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "orderDate":
                            orderDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orderPrice":
                            orderPrice = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!orderDate.IsSet)
                throw new ArgumentException("Property is required for class GetContactCampaignStatsTransacAttributesInner.", nameof(orderDate));

            if (!orderPrice.IsSet)
                throw new ArgumentException("Property is required for class GetContactCampaignStatsTransacAttributesInner.", nameof(orderPrice));

            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class GetContactCampaignStatsTransacAttributesInner.", nameof(orderId));

            if (orderDate.IsSet && orderDate.Value == null)
                throw new ArgumentNullException(nameof(orderDate), "Property is not nullable for class GetContactCampaignStatsTransacAttributesInner.");

            if (orderPrice.IsSet && orderPrice.Value == null)
                throw new ArgumentNullException(nameof(orderPrice), "Property is not nullable for class GetContactCampaignStatsTransacAttributesInner.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class GetContactCampaignStatsTransacAttributesInner.");

            return new GetContactCampaignStatsTransacAttributesInner(orderDate.Value!.Value!, orderPrice.Value!.Value!, orderId.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetContactCampaignStatsTransacAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getContactCampaignStatsTransacAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetContactCampaignStatsTransacAttributesInner getContactCampaignStatsTransacAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getContactCampaignStatsTransacAttributesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetContactCampaignStatsTransacAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getContactCampaignStatsTransacAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetContactCampaignStatsTransacAttributesInner getContactCampaignStatsTransacAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("orderDate", getContactCampaignStatsTransacAttributesInner.OrderDate.ToString(OrderDateFormat));

            writer.WriteNumber("orderPrice", getContactCampaignStatsTransacAttributesInner.OrderPrice);

            writer.WriteNumber("orderId", getContactCampaignStatsTransacAttributesInner.OrderId);
        }
    }
}
