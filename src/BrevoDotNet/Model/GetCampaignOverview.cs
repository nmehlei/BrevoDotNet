// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetCampaignOverview
    /// </summary>
    public partial class GetCampaignOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCampaignOverview" /> class.
        /// </summary>
        /// <param name="id">ID of the campaign</param>
        /// <param name="name">Name of the campaign</param>
        /// <param name="type">Type of campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="subject">Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;</param>
        /// <param name="scheduledAt">UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="abTesting">Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.</param>
        /// <param name="subjectA">Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="subjectB">Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="splitRule">The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="winnerCriteria">Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="winnerDelay">The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="sendAtBestTime">It is true if you have chosen to send your campaign at best time, otherwise it is false</param>
        [JsonConstructor]
        public GetCampaignOverview(long id, string name, TypeEnum type, StatusEnum status, Option<string?> subject = default, Option<DateTime?> scheduledAt = default, Option<bool?> abTesting = default, Option<string?> subjectA = default, Option<string?> subjectB = default, Option<int?> splitRule = default, Option<string?> winnerCriteria = default, Option<int?> winnerDelay = default, Option<bool?> sendAtBestTime = default)
        {
            Id = id;
            Name = name;
            Type = type;
            Status = status;
            SubjectOption = subject;
            ScheduledAtOption = scheduledAt;
            AbTestingOption = abTesting;
            SubjectAOption = subjectA;
            SubjectBOption = subjectB;
            SplitRuleOption = splitRule;
            WinnerCriteriaOption = winnerCriteria;
            WinnerDelayOption = winnerDelay;
            SendAtBestTimeOption = sendAtBestTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of campaign
        /// </summary>
        /// <value>Type of campaign</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Classic for value: classic
            /// </summary>
            Classic = 1,

            /// <summary>
            /// Enum Trigger for value: trigger
            /// </summary>
            Trigger = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("classic"))
                return TypeEnum.Classic;

            if (value.Equals("trigger"))
                return TypeEnum.Trigger;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("classic"))
                return TypeEnum.Classic;

            if (value.Equals("trigger"))
                return TypeEnum.Trigger;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Classic)
                return "classic";

            if (value == TypeEnum.Trigger)
                return "trigger";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of campaign
        /// </summary>
        /// <value>Type of campaign</value>
        /* <example>classic</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 1,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 2,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            Archive = 3,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            Queued = 4,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 5,

            /// <summary>
            /// Enum InProcess for value: in_process
            /// </summary>
            InProcess = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Draft)
                return "draft";

            if (value == StatusEnum.Sent)
                return "sent";

            if (value == StatusEnum.Archive)
                return "archive";

            if (value == StatusEnum.Queued)
                return "queued";

            if (value == StatusEnum.Suspended)
                return "suspended";

            if (value == StatusEnum.InProcess)
                return "in_process";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        /* <example>sent</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// ID of the campaign
        /// </summary>
        /// <value>ID of the campaign</value>
        /* <example>12</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        /// <value>Name of the campaign</value>
        /* <example>EN - Sales Summer 2017</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;
        /// </summary>
        /// <value>Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;</value>
        /* <example>20% OFF for 2017 Summer Sales</example> */
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ScheduledAtOption { get; private set; }

        /// <summary>
        /// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-06-01T12:30Z</example> */
        [JsonPropertyName("scheduledAt")]
        public DateTime? ScheduledAt { get { return this.ScheduledAtOption; } set { this.ScheduledAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of AbTesting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AbTestingOption { get; private set; }

        /// <summary>
        /// Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.
        /// </summary>
        /// <value>Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.</value>
        /* <example>true</example> */
        [JsonPropertyName("abTesting")]
        public bool? AbTesting { get { return this.AbTestingOption; } set { this.AbTestingOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectAOption { get; private set; }

        /// <summary>
        /// Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>Discover the New Collection!</example> */
        [JsonPropertyName("subjectA")]
        public string? SubjectA { get { return this.SubjectAOption; } set { this.SubjectAOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectBOption { get; private set; }

        /// <summary>
        /// Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>Want to discover the New Collection?</example> */
        [JsonPropertyName("subjectB")]
        public string? SubjectB { get { return this.SubjectBOption; } set { this.SubjectBOption = new(value); } }

        /// <summary>
        /// Used to track the state of SplitRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SplitRuleOption { get; private set; }

        /// <summary>
        /// The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>25</example> */
        [JsonPropertyName("splitRule")]
        public int? SplitRule { get { return this.SplitRuleOption; } set { this.SplitRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinnerCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WinnerCriteriaOption { get; private set; }

        /// <summary>
        /// Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>open</example> */
        [JsonPropertyName("winnerCriteria")]
        public string? WinnerCriteria { get { return this.WinnerCriteriaOption; } set { this.WinnerCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinnerDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WinnerDelayOption { get; private set; }

        /// <summary>
        /// The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>50</example> */
        [JsonPropertyName("winnerDelay")]
        public int? WinnerDelay { get { return this.WinnerDelayOption; } set { this.WinnerDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of SendAtBestTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SendAtBestTimeOption { get; private set; }

        /// <summary>
        /// It is true if you have chosen to send your campaign at best time, otherwise it is false
        /// </summary>
        /// <value>It is true if you have chosen to send your campaign at best time, otherwise it is false</value>
        /* <example>true</example> */
        [JsonPropertyName("sendAtBestTime")]
        public bool? SendAtBestTime { get { return this.SendAtBestTimeOption; } set { this.SendAtBestTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCampaignOverview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  AbTesting: ").Append(AbTesting).Append("\n");
            sb.Append("  SubjectA: ").Append(SubjectA).Append("\n");
            sb.Append("  SubjectB: ").Append(SubjectB).Append("\n");
            sb.Append("  SplitRule: ").Append(SplitRule).Append("\n");
            sb.Append("  WinnerCriteria: ").Append(WinnerCriteria).Append("\n");
            sb.Append("  WinnerDelay: ").Append(WinnerDelay).Append("\n");
            sb.Append("  SendAtBestTime: ").Append(SendAtBestTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetCampaignOverview" />
    /// </summary>
    public class GetCampaignOverviewJsonConverter : JsonConverter<GetCampaignOverview>
    {
        /// <summary>
        /// The format to use to serialize ScheduledAt
        /// </summary>
        public static string ScheduledAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetCampaignOverview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetCampaignOverview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<GetCampaignOverview.TypeEnum?> type = default;
            Option<GetCampaignOverview.StatusEnum?> status = default;
            Option<string?> subject = default;
            Option<DateTime?> scheduledAt = default;
            Option<bool?> abTesting = default;
            Option<string?> subjectA = default;
            Option<string?> subjectB = default;
            Option<int?> splitRule = default;
            Option<string?> winnerCriteria = default;
            Option<int?> winnerDelay = default;
            Option<bool?> sendAtBestTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetCampaignOverview.TypeEnum?>(GetCampaignOverview.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetCampaignOverview.StatusEnum?>(GetCampaignOverview.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scheduledAt":
                            scheduledAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "abTesting":
                            abTesting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subjectA":
                            subjectA = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectB":
                            subjectB = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "splitRule":
                            splitRule = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "winnerCriteria":
                            winnerCriteria = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "winnerDelay":
                            winnerDelay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sendAtBestTime":
                            sendAtBestTime = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignOverview.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignOverview.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignOverview.", nameof(type));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignOverview.", nameof(status));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetCampaignOverview.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetCampaignOverview.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetCampaignOverview.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetCampaignOverview.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class GetCampaignOverview.");

            if (scheduledAt.IsSet && scheduledAt.Value == null)
                throw new ArgumentNullException(nameof(scheduledAt), "Property is not nullable for class GetCampaignOverview.");

            if (abTesting.IsSet && abTesting.Value == null)
                throw new ArgumentNullException(nameof(abTesting), "Property is not nullable for class GetCampaignOverview.");

            if (subjectA.IsSet && subjectA.Value == null)
                throw new ArgumentNullException(nameof(subjectA), "Property is not nullable for class GetCampaignOverview.");

            if (subjectB.IsSet && subjectB.Value == null)
                throw new ArgumentNullException(nameof(subjectB), "Property is not nullable for class GetCampaignOverview.");

            if (splitRule.IsSet && splitRule.Value == null)
                throw new ArgumentNullException(nameof(splitRule), "Property is not nullable for class GetCampaignOverview.");

            if (winnerCriteria.IsSet && winnerCriteria.Value == null)
                throw new ArgumentNullException(nameof(winnerCriteria), "Property is not nullable for class GetCampaignOverview.");

            if (winnerDelay.IsSet && winnerDelay.Value == null)
                throw new ArgumentNullException(nameof(winnerDelay), "Property is not nullable for class GetCampaignOverview.");

            if (sendAtBestTime.IsSet && sendAtBestTime.Value == null)
                throw new ArgumentNullException(nameof(sendAtBestTime), "Property is not nullable for class GetCampaignOverview.");

            return new GetCampaignOverview(id.Value!.Value!, name.Value!, type.Value!.Value!, status.Value!.Value!, subject, scheduledAt, abTesting, subjectA, subjectB, splitRule, winnerCriteria, winnerDelay, sendAtBestTime);
        }

        /// <summary>
        /// Serializes a <see cref="GetCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetCampaignOverview getCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getCampaignOverview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetCampaignOverview getCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getCampaignOverview.Name == null)
                throw new ArgumentNullException(nameof(getCampaignOverview.Name), "Property is required for class GetCampaignOverview.");

            if (getCampaignOverview.SubjectOption.IsSet && getCampaignOverview.Subject == null)
                throw new ArgumentNullException(nameof(getCampaignOverview.Subject), "Property is required for class GetCampaignOverview.");

            if (getCampaignOverview.SubjectAOption.IsSet && getCampaignOverview.SubjectA == null)
                throw new ArgumentNullException(nameof(getCampaignOverview.SubjectA), "Property is required for class GetCampaignOverview.");

            if (getCampaignOverview.SubjectBOption.IsSet && getCampaignOverview.SubjectB == null)
                throw new ArgumentNullException(nameof(getCampaignOverview.SubjectB), "Property is required for class GetCampaignOverview.");

            if (getCampaignOverview.WinnerCriteriaOption.IsSet && getCampaignOverview.WinnerCriteria == null)
                throw new ArgumentNullException(nameof(getCampaignOverview.WinnerCriteria), "Property is required for class GetCampaignOverview.");

            writer.WriteNumber("id", getCampaignOverview.Id);

            writer.WriteString("name", getCampaignOverview.Name);

            var typeRawValue = GetCampaignOverview.TypeEnumToJsonValue(getCampaignOverview.Type);
            writer.WriteString("type", typeRawValue);
            var statusRawValue = GetCampaignOverview.StatusEnumToJsonValue(getCampaignOverview.Status);
            writer.WriteString("status", statusRawValue);
            if (getCampaignOverview.SubjectOption.IsSet)
                writer.WriteString("subject", getCampaignOverview.Subject);

            if (getCampaignOverview.ScheduledAtOption.IsSet)
                writer.WriteString("scheduledAt", getCampaignOverview.ScheduledAtOption.Value!.Value.ToString(ScheduledAtFormat));

            if (getCampaignOverview.AbTestingOption.IsSet)
                writer.WriteBoolean("abTesting", getCampaignOverview.AbTestingOption.Value!.Value);

            if (getCampaignOverview.SubjectAOption.IsSet)
                writer.WriteString("subjectA", getCampaignOverview.SubjectA);

            if (getCampaignOverview.SubjectBOption.IsSet)
                writer.WriteString("subjectB", getCampaignOverview.SubjectB);

            if (getCampaignOverview.SplitRuleOption.IsSet)
                writer.WriteNumber("splitRule", getCampaignOverview.SplitRuleOption.Value!.Value);

            if (getCampaignOverview.WinnerCriteriaOption.IsSet)
                writer.WriteString("winnerCriteria", getCampaignOverview.WinnerCriteria);

            if (getCampaignOverview.WinnerDelayOption.IsSet)
                writer.WriteNumber("winnerDelay", getCampaignOverview.WinnerDelayOption.Value!.Value);

            if (getCampaignOverview.SendAtBestTimeOption.IsSet)
                writer.WriteBoolean("sendAtBestTime", getCampaignOverview.SendAtBestTimeOption.Value!.Value);
        }
    }
}
