// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Percentage of a particular event for both versions
    /// </summary>
    public partial class AbTestVersionStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbTestVersionStats" /> class.
        /// </summary>
        /// <param name="versionA">percentage of an event for version A</param>
        /// <param name="versionB">percentage of an event for version B</param>
        [JsonConstructor]
        public AbTestVersionStats(string versionA, string versionB)
        {
            VersionA = versionA;
            VersionB = versionB;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// percentage of an event for version A
        /// </summary>
        /// <value>percentage of an event for version A</value>
        /* <example>50%</example> */
        [JsonPropertyName("Version A")]
        public string VersionA { get; set; }

        /// <summary>
        /// percentage of an event for version B
        /// </summary>
        /// <value>percentage of an event for version B</value>
        /* <example>50%</example> */
        [JsonPropertyName("Version B")]
        public string VersionB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AbTestVersionStats {\n");
            sb.Append("  VersionA: ").Append(VersionA).Append("\n");
            sb.Append("  VersionB: ").Append(VersionB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AbTestVersionStats" />
    /// </summary>
    public class AbTestVersionStatsJsonConverter : JsonConverter<AbTestVersionStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="AbTestVersionStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AbTestVersionStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> versionA = default;
            Option<string?> versionB = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Version A":
                            versionA = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "Version B":
                            versionB = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!versionA.IsSet)
                throw new ArgumentException("Property is required for class AbTestVersionStats.", nameof(versionA));

            if (!versionB.IsSet)
                throw new ArgumentException("Property is required for class AbTestVersionStats.", nameof(versionB));

            if (versionA.IsSet && versionA.Value == null)
                throw new ArgumentNullException(nameof(versionA), "Property is not nullable for class AbTestVersionStats.");

            if (versionB.IsSet && versionB.Value == null)
                throw new ArgumentNullException(nameof(versionB), "Property is not nullable for class AbTestVersionStats.");

            return new AbTestVersionStats(versionA.Value!, versionB.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AbTestVersionStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="abTestVersionStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AbTestVersionStats abTestVersionStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, abTestVersionStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AbTestVersionStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="abTestVersionStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AbTestVersionStats abTestVersionStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (abTestVersionStats.VersionA == null)
                throw new ArgumentNullException(nameof(abTestVersionStats.VersionA), "Property is required for class AbTestVersionStats.");

            if (abTestVersionStats.VersionB == null)
                throw new ArgumentNullException(nameof(abTestVersionStats.VersionB), "Property is required for class AbTestVersionStats.");

            writer.WriteString("Version A", abTestVersionStats.VersionA);

            writer.WriteString("Version B", abTestVersionStats.VersionB);
        }
    }
}
