// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetClient
    /// </summary>
    public partial class GetClient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetClient" /> class.
        /// </summary>
        /// <param name="email">Login Email</param>
        /// <param name="firstName">First Name</param>
        /// <param name="lastName">Last Name</param>
        /// <param name="companyName">Name of the company</param>
        [JsonConstructor]
        public GetClient(string email, string firstName, string lastName, string companyName)
        {
            Email = email;
            FirstName = firstName;
            LastName = lastName;
            CompanyName = companyName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Login Email
        /// </summary>
        /// <value>Login Email</value>
        /* <example>john.smith@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// First Name
        /// </summary>
        /// <value>First Name</value>
        /* <example>John</example> */
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last Name
        /// </summary>
        /// <value>Last Name</value>
        /* <example>Smith</example> */
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Name of the company
        /// </summary>
        /// <value>Name of the company</value>
        /* <example>MyCompany</example> */
        [JsonPropertyName("companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetClient {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetClient" />
    /// </summary>
    public class GetClientJsonConverter : JsonConverter<GetClient>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetClient" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetClient Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> companyName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "companyName":
                            companyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class GetClient.", nameof(email));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class GetClient.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class GetClient.", nameof(lastName));

            if (!companyName.IsSet)
                throw new ArgumentException("Property is required for class GetClient.", nameof(companyName));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class GetClient.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class GetClient.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class GetClient.");

            if (companyName.IsSet && companyName.Value == null)
                throw new ArgumentNullException(nameof(companyName), "Property is not nullable for class GetClient.");

            return new GetClient(email.Value!, firstName.Value!, lastName.Value!, companyName.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetClient getClient, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getClient, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetClient getClient, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getClient.Email == null)
                throw new ArgumentNullException(nameof(getClient.Email), "Property is required for class GetClient.");

            if (getClient.FirstName == null)
                throw new ArgumentNullException(nameof(getClient.FirstName), "Property is required for class GetClient.");

            if (getClient.LastName == null)
                throw new ArgumentNullException(nameof(getClient.LastName), "Property is required for class GetClient.");

            if (getClient.CompanyName == null)
                throw new ArgumentNullException(nameof(getClient.CompanyName), "Property is required for class GetClient.");

            writer.WriteString("email", getClient.Email);

            writer.WriteString("firstName", getClient.FirstName);

            writer.WriteString("lastName", getClient.LastName);

            writer.WriteString("companyName", getClient.CompanyName);
        }
    }
}
