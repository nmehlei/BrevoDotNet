// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetSmsEventReport
    /// </summary>
    public partial class GetSmsEventReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsEventReport" /> class.
        /// </summary>
        /// <param name="events">events</param>
        [JsonConstructor]
        public GetSmsEventReport(Option<List<GetSmsEventReportEventsInner>?> events = default)
        {
            EventsOption = events;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Events
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetSmsEventReportEventsInner>?> EventsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [JsonPropertyName("events")]
        public List<GetSmsEventReportEventsInner>? Events { get { return this.EventsOption; } set { this.EventsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmsEventReport {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSmsEventReport" />
    /// </summary>
    public class GetSmsEventReportJsonConverter : JsonConverter<GetSmsEventReport>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSmsEventReport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSmsEventReport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GetSmsEventReportEventsInner>?> events = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "events":
                            events = new Option<List<GetSmsEventReportEventsInner>?>(JsonSerializer.Deserialize<List<GetSmsEventReportEventsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class GetSmsEventReport.");

            return new GetSmsEventReport(events);
        }

        /// <summary>
        /// Serializes a <see cref="GetSmsEventReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsEventReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSmsEventReport getSmsEventReport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSmsEventReport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSmsEventReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsEventReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSmsEventReport getSmsEventReport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSmsEventReport.EventsOption.IsSet && getSmsEventReport.Events == null)
                throw new ArgumentNullException(nameof(getSmsEventReport.Events), "Property is required for class GetSmsEventReport.");

            if (getSmsEventReport.EventsOption.IsSet)
            {
                writer.WritePropertyName("events");
                JsonSerializer.Serialize(writer, getSmsEventReport.Events, jsonSerializerOptions);
            }
        }
    }
}
