// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetAggregatedReport
    /// </summary>
    public partial class GetAggregatedReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAggregatedReport" /> class.
        /// </summary>
        /// <param name="range">Time frame of the report</param>
        /// <param name="requests">Number of requests for the timeframe</param>
        /// <param name="delivered">Number of delivered emails for the timeframe</param>
        /// <param name="hardBounces">Number of hardbounces for the timeframe</param>
        /// <param name="softBounces">Number of softbounces for the timeframe</param>
        /// <param name="clicks">Number of clicks for the timeframe</param>
        /// <param name="uniqueClicks">Number of unique clicks for the timeframe</param>
        /// <param name="opens">Number of openings for the timeframe</param>
        /// <param name="uniqueOpens">Number of unique openings for the timeframe</param>
        /// <param name="spamReports">Number of complaint (spam report) for the timeframe</param>
        /// <param name="blocked">Number of blocked contact emails for the timeframe</param>
        /// <param name="invalid">Number of invalid emails for the timeframe</param>
        /// <param name="unsubscribed">Number of unsubscribed emails for the timeframe</param>
        [JsonConstructor]
        public GetAggregatedReport(string range, long requests, long delivered, long hardBounces, long softBounces, long clicks, long uniqueClicks, long opens, long uniqueOpens, long spamReports, long blocked, long invalid, long unsubscribed)
        {
            Range = range;
            Requests = requests;
            Delivered = delivered;
            HardBounces = hardBounces;
            SoftBounces = softBounces;
            Clicks = clicks;
            UniqueClicks = uniqueClicks;
            Opens = opens;
            UniqueOpens = uniqueOpens;
            SpamReports = spamReports;
            Blocked = blocked;
            Invalid = invalid;
            Unsubscribed = unsubscribed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Time frame of the report
        /// </summary>
        /// <value>Time frame of the report</value>
        /* <example>2016-09-08|2017-04-06</example> */
        [JsonPropertyName("range")]
        public string Range { get; set; }

        /// <summary>
        /// Number of requests for the timeframe
        /// </summary>
        /// <value>Number of requests for the timeframe</value>
        /* <example>263</example> */
        [JsonPropertyName("requests")]
        public long Requests { get; set; }

        /// <summary>
        /// Number of delivered emails for the timeframe
        /// </summary>
        /// <value>Number of delivered emails for the timeframe</value>
        /* <example>249</example> */
        [JsonPropertyName("delivered")]
        public long Delivered { get; set; }

        /// <summary>
        /// Number of hardbounces for the timeframe
        /// </summary>
        /// <value>Number of hardbounces for the timeframe</value>
        /* <example>1</example> */
        [JsonPropertyName("hardBounces")]
        public long HardBounces { get; set; }

        /// <summary>
        /// Number of softbounces for the timeframe
        /// </summary>
        /// <value>Number of softbounces for the timeframe</value>
        /* <example>4</example> */
        [JsonPropertyName("softBounces")]
        public long SoftBounces { get; set; }

        /// <summary>
        /// Number of clicks for the timeframe
        /// </summary>
        /// <value>Number of clicks for the timeframe</value>
        /* <example>12</example> */
        [JsonPropertyName("clicks")]
        public long Clicks { get; set; }

        /// <summary>
        /// Number of unique clicks for the timeframe
        /// </summary>
        /// <value>Number of unique clicks for the timeframe</value>
        /* <example>8</example> */
        [JsonPropertyName("uniqueClicks")]
        public long UniqueClicks { get; set; }

        /// <summary>
        /// Number of openings for the timeframe
        /// </summary>
        /// <value>Number of openings for the timeframe</value>
        /* <example>47</example> */
        [JsonPropertyName("opens")]
        public long Opens { get; set; }

        /// <summary>
        /// Number of unique openings for the timeframe
        /// </summary>
        /// <value>Number of unique openings for the timeframe</value>
        /* <example>37</example> */
        [JsonPropertyName("uniqueOpens")]
        public long UniqueOpens { get; set; }

        /// <summary>
        /// Number of complaint (spam report) for the timeframe
        /// </summary>
        /// <value>Number of complaint (spam report) for the timeframe</value>
        /* <example>0</example> */
        [JsonPropertyName("spamReports")]
        public long SpamReports { get; set; }

        /// <summary>
        /// Number of blocked contact emails for the timeframe
        /// </summary>
        /// <value>Number of blocked contact emails for the timeframe</value>
        /* <example>2</example> */
        [JsonPropertyName("blocked")]
        public long Blocked { get; set; }

        /// <summary>
        /// Number of invalid emails for the timeframe
        /// </summary>
        /// <value>Number of invalid emails for the timeframe</value>
        /* <example>0</example> */
        [JsonPropertyName("invalid")]
        public long Invalid { get; set; }

        /// <summary>
        /// Number of unsubscribed emails for the timeframe
        /// </summary>
        /// <value>Number of unsubscribed emails for the timeframe</value>
        /* <example>0</example> */
        [JsonPropertyName("unsubscribed")]
        public long Unsubscribed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAggregatedReport {\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  UniqueClicks: ").Append(UniqueClicks).Append("\n");
            sb.Append("  Opens: ").Append(Opens).Append("\n");
            sb.Append("  UniqueOpens: ").Append(UniqueOpens).Append("\n");
            sb.Append("  SpamReports: ").Append(SpamReports).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  Unsubscribed: ").Append(Unsubscribed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAggregatedReport" />
    /// </summary>
    public class GetAggregatedReportJsonConverter : JsonConverter<GetAggregatedReport>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAggregatedReport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAggregatedReport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> range = default;
            Option<long?> requests = default;
            Option<long?> delivered = default;
            Option<long?> hardBounces = default;
            Option<long?> softBounces = default;
            Option<long?> clicks = default;
            Option<long?> uniqueClicks = default;
            Option<long?> opens = default;
            Option<long?> uniqueOpens = default;
            Option<long?> spamReports = default;
            Option<long?> blocked = default;
            Option<long?> invalid = default;
            Option<long?> unsubscribed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "range":
                            range = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "requests":
                            requests = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "delivered":
                            delivered = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "hardBounces":
                            hardBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "softBounces":
                            softBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "clicks":
                            clicks = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "uniqueClicks":
                            uniqueClicks = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "opens":
                            opens = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "uniqueOpens":
                            uniqueOpens = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "spamReports":
                            spamReports = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "blocked":
                            blocked = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "invalid":
                            invalid = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "unsubscribed":
                            unsubscribed = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!range.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(range));

            if (!requests.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(requests));

            if (!delivered.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(delivered));

            if (!hardBounces.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(hardBounces));

            if (!softBounces.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(softBounces));

            if (!clicks.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(clicks));

            if (!uniqueClicks.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(uniqueClicks));

            if (!opens.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(opens));

            if (!uniqueOpens.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(uniqueOpens));

            if (!spamReports.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(spamReports));

            if (!blocked.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(blocked));

            if (!invalid.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(invalid));

            if (!unsubscribed.IsSet)
                throw new ArgumentException("Property is required for class GetAggregatedReport.", nameof(unsubscribed));

            if (range.IsSet && range.Value == null)
                throw new ArgumentNullException(nameof(range), "Property is not nullable for class GetAggregatedReport.");

            if (requests.IsSet && requests.Value == null)
                throw new ArgumentNullException(nameof(requests), "Property is not nullable for class GetAggregatedReport.");

            if (delivered.IsSet && delivered.Value == null)
                throw new ArgumentNullException(nameof(delivered), "Property is not nullable for class GetAggregatedReport.");

            if (hardBounces.IsSet && hardBounces.Value == null)
                throw new ArgumentNullException(nameof(hardBounces), "Property is not nullable for class GetAggregatedReport.");

            if (softBounces.IsSet && softBounces.Value == null)
                throw new ArgumentNullException(nameof(softBounces), "Property is not nullable for class GetAggregatedReport.");

            if (clicks.IsSet && clicks.Value == null)
                throw new ArgumentNullException(nameof(clicks), "Property is not nullable for class GetAggregatedReport.");

            if (uniqueClicks.IsSet && uniqueClicks.Value == null)
                throw new ArgumentNullException(nameof(uniqueClicks), "Property is not nullable for class GetAggregatedReport.");

            if (opens.IsSet && opens.Value == null)
                throw new ArgumentNullException(nameof(opens), "Property is not nullable for class GetAggregatedReport.");

            if (uniqueOpens.IsSet && uniqueOpens.Value == null)
                throw new ArgumentNullException(nameof(uniqueOpens), "Property is not nullable for class GetAggregatedReport.");

            if (spamReports.IsSet && spamReports.Value == null)
                throw new ArgumentNullException(nameof(spamReports), "Property is not nullable for class GetAggregatedReport.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class GetAggregatedReport.");

            if (invalid.IsSet && invalid.Value == null)
                throw new ArgumentNullException(nameof(invalid), "Property is not nullable for class GetAggregatedReport.");

            if (unsubscribed.IsSet && unsubscribed.Value == null)
                throw new ArgumentNullException(nameof(unsubscribed), "Property is not nullable for class GetAggregatedReport.");

            return new GetAggregatedReport(range.Value!, requests.Value!.Value!, delivered.Value!.Value!, hardBounces.Value!.Value!, softBounces.Value!.Value!, clicks.Value!.Value!, uniqueClicks.Value!.Value!, opens.Value!.Value!, uniqueOpens.Value!.Value!, spamReports.Value!.Value!, blocked.Value!.Value!, invalid.Value!.Value!, unsubscribed.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetAggregatedReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAggregatedReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAggregatedReport getAggregatedReport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAggregatedReport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAggregatedReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAggregatedReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAggregatedReport getAggregatedReport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAggregatedReport.Range == null)
                throw new ArgumentNullException(nameof(getAggregatedReport.Range), "Property is required for class GetAggregatedReport.");

            writer.WriteString("range", getAggregatedReport.Range);

            writer.WriteNumber("requests", getAggregatedReport.Requests);

            writer.WriteNumber("delivered", getAggregatedReport.Delivered);

            writer.WriteNumber("hardBounces", getAggregatedReport.HardBounces);

            writer.WriteNumber("softBounces", getAggregatedReport.SoftBounces);

            writer.WriteNumber("clicks", getAggregatedReport.Clicks);

            writer.WriteNumber("uniqueClicks", getAggregatedReport.UniqueClicks);

            writer.WriteNumber("opens", getAggregatedReport.Opens);

            writer.WriteNumber("uniqueOpens", getAggregatedReport.UniqueOpens);

            writer.WriteNumber("spamReports", getAggregatedReport.SpamReports);

            writer.WriteNumber("blocked", getAggregatedReport.Blocked);

            writer.WriteNumber("invalid", getAggregatedReport.Invalid);

            writer.WriteNumber("unsubscribed", getAggregatedReport.Unsubscribed);
        }
    }
}
