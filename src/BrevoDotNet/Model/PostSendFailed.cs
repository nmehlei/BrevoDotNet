// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// PostSendFailed
    /// </summary>
    public partial class PostSendFailed : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSendFailed" /> class.
        /// </summary>
        /// <param name="code">Response code</param>
        /// <param name="message">Response message</param>
        /// <param name="unexistingEmails">unexistingEmails</param>
        /// <param name="withoutListEmails">withoutListEmails</param>
        /// <param name="blackListedEmails">blackListedEmails</param>
        [JsonConstructor]
        public PostSendFailed(long code, string message, Option<List<string>?> unexistingEmails = default, Option<List<string>?> withoutListEmails = default, Option<List<string>?> blackListedEmails = default)
        {
            Code = code;
            Message = message;
            UnexistingEmailsOption = unexistingEmails;
            WithoutListEmailsOption = withoutListEmails;
            BlackListedEmailsOption = blackListedEmails;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Response code
        /// </summary>
        /// <value>Response code</value>
        [JsonPropertyName("code")]
        public long Code { get; set; }

        /// <summary>
        /// Response message
        /// </summary>
        /// <value>Response message</value>
        /* <example>The email could not be sent to all recipients</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of UnexistingEmails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UnexistingEmailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnexistingEmails
        /// </summary>
        [JsonPropertyName("unexistingEmails")]
        public List<string>? UnexistingEmails { get { return this.UnexistingEmailsOption; } set { this.UnexistingEmailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WithoutListEmails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> WithoutListEmailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets WithoutListEmails
        /// </summary>
        [JsonPropertyName("withoutListEmails")]
        public List<string>? WithoutListEmails { get { return this.WithoutListEmailsOption; } set { this.WithoutListEmailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlackListedEmails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> BlackListedEmailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlackListedEmails
        /// </summary>
        [JsonPropertyName("blackListedEmails")]
        public List<string>? BlackListedEmails { get { return this.BlackListedEmailsOption; } set { this.BlackListedEmailsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostSendFailed {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  UnexistingEmails: ").Append(UnexistingEmails).Append("\n");
            sb.Append("  WithoutListEmails: ").Append(WithoutListEmails).Append("\n");
            sb.Append("  BlackListedEmails: ").Append(BlackListedEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostSendFailed" />
    /// </summary>
    public class PostSendFailedJsonConverter : JsonConverter<PostSendFailed>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostSendFailed" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostSendFailed Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> code = default;
            Option<string?> message = default;
            Option<List<string>?> unexistingEmails = default;
            Option<List<string>?> withoutListEmails = default;
            Option<List<string>?> blackListedEmails = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "unexistingEmails":
                            unexistingEmails = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "withoutListEmails":
                            withoutListEmails = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "blackListedEmails":
                            blackListedEmails = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class PostSendFailed.", nameof(code));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class PostSendFailed.", nameof(message));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class PostSendFailed.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class PostSendFailed.");

            if (unexistingEmails.IsSet && unexistingEmails.Value == null)
                throw new ArgumentNullException(nameof(unexistingEmails), "Property is not nullable for class PostSendFailed.");

            if (withoutListEmails.IsSet && withoutListEmails.Value == null)
                throw new ArgumentNullException(nameof(withoutListEmails), "Property is not nullable for class PostSendFailed.");

            if (blackListedEmails.IsSet && blackListedEmails.Value == null)
                throw new ArgumentNullException(nameof(blackListedEmails), "Property is not nullable for class PostSendFailed.");

            return new PostSendFailed(code.Value!.Value!, message.Value!, unexistingEmails, withoutListEmails, blackListedEmails);
        }

        /// <summary>
        /// Serializes a <see cref="PostSendFailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postSendFailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostSendFailed postSendFailed, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postSendFailed, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostSendFailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postSendFailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostSendFailed postSendFailed, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postSendFailed.Message == null)
                throw new ArgumentNullException(nameof(postSendFailed.Message), "Property is required for class PostSendFailed.");

            if (postSendFailed.UnexistingEmailsOption.IsSet && postSendFailed.UnexistingEmails == null)
                throw new ArgumentNullException(nameof(postSendFailed.UnexistingEmails), "Property is required for class PostSendFailed.");

            if (postSendFailed.WithoutListEmailsOption.IsSet && postSendFailed.WithoutListEmails == null)
                throw new ArgumentNullException(nameof(postSendFailed.WithoutListEmails), "Property is required for class PostSendFailed.");

            if (postSendFailed.BlackListedEmailsOption.IsSet && postSendFailed.BlackListedEmails == null)
                throw new ArgumentNullException(nameof(postSendFailed.BlackListedEmails), "Property is required for class PostSendFailed.");

            writer.WriteNumber("code", postSendFailed.Code);

            writer.WriteString("message", postSendFailed.Message);

            if (postSendFailed.UnexistingEmailsOption.IsSet)
            {
                writer.WritePropertyName("unexistingEmails");
                JsonSerializer.Serialize(writer, postSendFailed.UnexistingEmails, jsonSerializerOptions);
            }
            if (postSendFailed.WithoutListEmailsOption.IsSet)
            {
                writer.WritePropertyName("withoutListEmails");
                JsonSerializer.Serialize(writer, postSendFailed.WithoutListEmails, jsonSerializerOptions);
            }
            if (postSendFailed.BlackListedEmailsOption.IsSet)
            {
                writer.WritePropertyName("blackListedEmails");
                JsonSerializer.Serialize(writer, postSendFailed.BlackListedEmails, jsonSerializerOptions);
            }
        }
    }
}
