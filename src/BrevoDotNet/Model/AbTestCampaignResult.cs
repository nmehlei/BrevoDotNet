// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// AbTestCampaignResult
    /// </summary>
    public partial class AbTestCampaignResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbTestCampaignResult" /> class.
        /// </summary>
        /// <param name="winningVersion">Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.</param>
        /// <param name="winningCriteria">Criteria choosen for winning version (Open/Click)</param>
        /// <param name="winningSubjectLine">Subject Line of current winning version</param>
        /// <param name="openRate">Open rate for current winning version</param>
        /// <param name="clickRate">Click rate for current winning version</param>
        /// <param name="winningVersionRate">Open/Click rate for the winner version</param>
        /// <param name="statistics">statistics</param>
        /// <param name="clickedLinks">clickedLinks</param>
        [JsonConstructor]
        public AbTestCampaignResult(Option<WinningVersionEnum?> winningVersion = default, Option<WinningCriteriaEnum?> winningCriteria = default, Option<string?> winningSubjectLine = default, Option<string?> openRate = default, Option<string?> clickRate = default, Option<string?> winningVersionRate = default, Option<AbTestCampaignResultStatistics?> statistics = default, Option<AbTestCampaignResultClickedLinks?> clickedLinks = default)
        {
            WinningVersionOption = winningVersion;
            WinningCriteriaOption = winningCriteria;
            WinningSubjectLineOption = winningSubjectLine;
            OpenRateOption = openRate;
            ClickRateOption = clickRate;
            WinningVersionRateOption = winningVersionRate;
            StatisticsOption = statistics;
            ClickedLinksOption = clickedLinks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.
        /// </summary>
        /// <value>Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.</value>
        public enum WinningVersionEnum
        {
            /// <summary>
            /// Enum NotAvailable for value: notAvailable
            /// </summary>
            NotAvailable = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 2,

            /// <summary>
            /// Enum Tie for value: tie
            /// </summary>
            Tie = 3,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 4,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            B = 5
        }

        /// <summary>
        /// Returns a <see cref="WinningVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WinningVersionEnum WinningVersionEnumFromString(string value)
        {
            if (value.Equals("notAvailable"))
                return WinningVersionEnum.NotAvailable;

            if (value.Equals("pending"))
                return WinningVersionEnum.Pending;

            if (value.Equals("tie"))
                return WinningVersionEnum.Tie;

            if (value.Equals("A"))
                return WinningVersionEnum.A;

            if (value.Equals("B"))
                return WinningVersionEnum.B;

            throw new NotImplementedException($"Could not convert value to type WinningVersionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WinningVersionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WinningVersionEnum? WinningVersionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("notAvailable"))
                return WinningVersionEnum.NotAvailable;

            if (value.Equals("pending"))
                return WinningVersionEnum.Pending;

            if (value.Equals("tie"))
                return WinningVersionEnum.Tie;

            if (value.Equals("A"))
                return WinningVersionEnum.A;

            if (value.Equals("B"))
                return WinningVersionEnum.B;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WinningVersionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WinningVersionEnumToJsonValue(WinningVersionEnum? value)
        {
            if (value == WinningVersionEnum.NotAvailable)
                return "notAvailable";

            if (value == WinningVersionEnum.Pending)
                return "pending";

            if (value == WinningVersionEnum.Tie)
                return "tie";

            if (value == WinningVersionEnum.A)
                return "A";

            if (value == WinningVersionEnum.B)
                return "B";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of WinningVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WinningVersionEnum?> WinningVersionOption { get; private set; }

        /// <summary>
        /// Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.
        /// </summary>
        /// <value>Winning Campaign Info. pending &#x3D; Campaign has been picked for sending and winning version is yet to be decided, tie &#x3D; A tie happened between both the versions, notAvailable &#x3D; Campaign has not yet been picked for sending.</value>
        /* <example>A</example> */
        [JsonPropertyName("winningVersion")]
        public WinningVersionEnum? WinningVersion { get { return this.WinningVersionOption; } set { this.WinningVersionOption = new(value); } }

        /// <summary>
        /// Criteria choosen for winning version (Open/Click)
        /// </summary>
        /// <value>Criteria choosen for winning version (Open/Click)</value>
        public enum WinningCriteriaEnum
        {
            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            Open = 1,

            /// <summary>
            /// Enum Click for value: Click
            /// </summary>
            Click = 2
        }

        /// <summary>
        /// Returns a <see cref="WinningCriteriaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WinningCriteriaEnum WinningCriteriaEnumFromString(string value)
        {
            if (value.Equals("Open"))
                return WinningCriteriaEnum.Open;

            if (value.Equals("Click"))
                return WinningCriteriaEnum.Click;

            throw new NotImplementedException($"Could not convert value to type WinningCriteriaEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WinningCriteriaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WinningCriteriaEnum? WinningCriteriaEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Open"))
                return WinningCriteriaEnum.Open;

            if (value.Equals("Click"))
                return WinningCriteriaEnum.Click;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WinningCriteriaEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WinningCriteriaEnumToJsonValue(WinningCriteriaEnum? value)
        {
            if (value == WinningCriteriaEnum.Open)
                return "Open";

            if (value == WinningCriteriaEnum.Click)
                return "Click";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of WinningCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WinningCriteriaEnum?> WinningCriteriaOption { get; private set; }

        /// <summary>
        /// Criteria choosen for winning version (Open/Click)
        /// </summary>
        /// <value>Criteria choosen for winning version (Open/Click)</value>
        /* <example>Open</example> */
        [JsonPropertyName("winningCriteria")]
        public WinningCriteriaEnum? WinningCriteria { get { return this.WinningCriteriaOption; } set { this.WinningCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinningSubjectLine
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WinningSubjectLineOption { get; private set; }

        /// <summary>
        /// Subject Line of current winning version
        /// </summary>
        /// <value>Subject Line of current winning version</value>
        /* <example>Subject Line A</example> */
        [JsonPropertyName("winningSubjectLine")]
        public string? WinningSubjectLine { get { return this.WinningSubjectLineOption; } set { this.WinningSubjectLineOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpenRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OpenRateOption { get; private set; }

        /// <summary>
        /// Open rate for current winning version
        /// </summary>
        /// <value>Open rate for current winning version</value>
        /* <example>70%</example> */
        [JsonPropertyName("openRate")]
        public string? OpenRate { get { return this.OpenRateOption; } set { this.OpenRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClickRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClickRateOption { get; private set; }

        /// <summary>
        /// Click rate for current winning version
        /// </summary>
        /// <value>Click rate for current winning version</value>
        /* <example>70%</example> */
        [JsonPropertyName("clickRate")]
        public string? ClickRate { get { return this.ClickRateOption; } set { this.ClickRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinningVersionRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WinningVersionRateOption { get; private set; }

        /// <summary>
        /// Open/Click rate for the winner version
        /// </summary>
        /// <value>Open/Click rate for the winner version</value>
        /* <example>70%</example> */
        [JsonPropertyName("winningVersionRate")]
        public string? WinningVersionRate { get { return this.WinningVersionRateOption; } set { this.WinningVersionRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Statistics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AbTestCampaignResultStatistics?> StatisticsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [JsonPropertyName("statistics")]
        public AbTestCampaignResultStatistics? Statistics { get { return this.StatisticsOption; } set { this.StatisticsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClickedLinks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AbTestCampaignResultClickedLinks?> ClickedLinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClickedLinks
        /// </summary>
        [JsonPropertyName("clickedLinks")]
        public AbTestCampaignResultClickedLinks? ClickedLinks { get { return this.ClickedLinksOption; } set { this.ClickedLinksOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AbTestCampaignResult {\n");
            sb.Append("  WinningVersion: ").Append(WinningVersion).Append("\n");
            sb.Append("  WinningCriteria: ").Append(WinningCriteria).Append("\n");
            sb.Append("  WinningSubjectLine: ").Append(WinningSubjectLine).Append("\n");
            sb.Append("  OpenRate: ").Append(OpenRate).Append("\n");
            sb.Append("  ClickRate: ").Append(ClickRate).Append("\n");
            sb.Append("  WinningVersionRate: ").Append(WinningVersionRate).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  ClickedLinks: ").Append(ClickedLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AbTestCampaignResult" />
    /// </summary>
    public class AbTestCampaignResultJsonConverter : JsonConverter<AbTestCampaignResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="AbTestCampaignResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AbTestCampaignResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AbTestCampaignResult.WinningVersionEnum?> winningVersion = default;
            Option<AbTestCampaignResult.WinningCriteriaEnum?> winningCriteria = default;
            Option<string?> winningSubjectLine = default;
            Option<string?> openRate = default;
            Option<string?> clickRate = default;
            Option<string?> winningVersionRate = default;
            Option<AbTestCampaignResultStatistics?> statistics = default;
            Option<AbTestCampaignResultClickedLinks?> clickedLinks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "winningVersion":
                            string? winningVersionRawValue = utf8JsonReader.GetString();
                            if (winningVersionRawValue != null)
                                winningVersion = new Option<AbTestCampaignResult.WinningVersionEnum?>(AbTestCampaignResult.WinningVersionEnumFromStringOrDefault(winningVersionRawValue));
                            break;
                        case "winningCriteria":
                            string? winningCriteriaRawValue = utf8JsonReader.GetString();
                            if (winningCriteriaRawValue != null)
                                winningCriteria = new Option<AbTestCampaignResult.WinningCriteriaEnum?>(AbTestCampaignResult.WinningCriteriaEnumFromStringOrDefault(winningCriteriaRawValue));
                            break;
                        case "winningSubjectLine":
                            winningSubjectLine = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "openRate":
                            openRate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "clickRate":
                            clickRate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "winningVersionRate":
                            winningVersionRate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "statistics":
                            statistics = new Option<AbTestCampaignResultStatistics?>(JsonSerializer.Deserialize<AbTestCampaignResultStatistics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clickedLinks":
                            clickedLinks = new Option<AbTestCampaignResultClickedLinks?>(JsonSerializer.Deserialize<AbTestCampaignResultClickedLinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (winningVersion.IsSet && winningVersion.Value == null)
                throw new ArgumentNullException(nameof(winningVersion), "Property is not nullable for class AbTestCampaignResult.");

            if (winningCriteria.IsSet && winningCriteria.Value == null)
                throw new ArgumentNullException(nameof(winningCriteria), "Property is not nullable for class AbTestCampaignResult.");

            if (winningSubjectLine.IsSet && winningSubjectLine.Value == null)
                throw new ArgumentNullException(nameof(winningSubjectLine), "Property is not nullable for class AbTestCampaignResult.");

            if (openRate.IsSet && openRate.Value == null)
                throw new ArgumentNullException(nameof(openRate), "Property is not nullable for class AbTestCampaignResult.");

            if (clickRate.IsSet && clickRate.Value == null)
                throw new ArgumentNullException(nameof(clickRate), "Property is not nullable for class AbTestCampaignResult.");

            if (winningVersionRate.IsSet && winningVersionRate.Value == null)
                throw new ArgumentNullException(nameof(winningVersionRate), "Property is not nullable for class AbTestCampaignResult.");

            if (statistics.IsSet && statistics.Value == null)
                throw new ArgumentNullException(nameof(statistics), "Property is not nullable for class AbTestCampaignResult.");

            if (clickedLinks.IsSet && clickedLinks.Value == null)
                throw new ArgumentNullException(nameof(clickedLinks), "Property is not nullable for class AbTestCampaignResult.");

            return new AbTestCampaignResult(winningVersion, winningCriteria, winningSubjectLine, openRate, clickRate, winningVersionRate, statistics, clickedLinks);
        }

        /// <summary>
        /// Serializes a <see cref="AbTestCampaignResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="abTestCampaignResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AbTestCampaignResult abTestCampaignResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, abTestCampaignResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AbTestCampaignResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="abTestCampaignResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AbTestCampaignResult abTestCampaignResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (abTestCampaignResult.WinningSubjectLineOption.IsSet && abTestCampaignResult.WinningSubjectLine == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.WinningSubjectLine), "Property is required for class AbTestCampaignResult.");

            if (abTestCampaignResult.OpenRateOption.IsSet && abTestCampaignResult.OpenRate == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.OpenRate), "Property is required for class AbTestCampaignResult.");

            if (abTestCampaignResult.ClickRateOption.IsSet && abTestCampaignResult.ClickRate == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.ClickRate), "Property is required for class AbTestCampaignResult.");

            if (abTestCampaignResult.WinningVersionRateOption.IsSet && abTestCampaignResult.WinningVersionRate == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.WinningVersionRate), "Property is required for class AbTestCampaignResult.");

            if (abTestCampaignResult.StatisticsOption.IsSet && abTestCampaignResult.Statistics == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.Statistics), "Property is required for class AbTestCampaignResult.");

            if (abTestCampaignResult.ClickedLinksOption.IsSet && abTestCampaignResult.ClickedLinks == null)
                throw new ArgumentNullException(nameof(abTestCampaignResult.ClickedLinks), "Property is required for class AbTestCampaignResult.");

            var winningVersionRawValue = AbTestCampaignResult.WinningVersionEnumToJsonValue(abTestCampaignResult.WinningVersionOption.Value!.Value);
            writer.WriteString("winningVersion", winningVersionRawValue);
            var winningCriteriaRawValue = AbTestCampaignResult.WinningCriteriaEnumToJsonValue(abTestCampaignResult.WinningCriteriaOption.Value!.Value);
            writer.WriteString("winningCriteria", winningCriteriaRawValue);
            if (abTestCampaignResult.WinningSubjectLineOption.IsSet)
                writer.WriteString("winningSubjectLine", abTestCampaignResult.WinningSubjectLine);

            if (abTestCampaignResult.OpenRateOption.IsSet)
                writer.WriteString("openRate", abTestCampaignResult.OpenRate);

            if (abTestCampaignResult.ClickRateOption.IsSet)
                writer.WriteString("clickRate", abTestCampaignResult.ClickRate);

            if (abTestCampaignResult.WinningVersionRateOption.IsSet)
                writer.WriteString("winningVersionRate", abTestCampaignResult.WinningVersionRate);

            if (abTestCampaignResult.StatisticsOption.IsSet)
            {
                writer.WritePropertyName("statistics");
                JsonSerializer.Serialize(writer, abTestCampaignResult.Statistics, jsonSerializerOptions);
            }
            if (abTestCampaignResult.ClickedLinksOption.IsSet)
            {
                writer.WritePropertyName("clickedLinks");
                JsonSerializer.Serialize(writer, abTestCampaignResult.ClickedLinks, jsonSerializerOptions);
            }
        }
    }
}
