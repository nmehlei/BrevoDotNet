// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetAccount
    /// </summary>
    public partial class GetAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccount" /> class.
        /// </summary>
        /// <param name="email">Login Email</param>
        /// <param name="firstName">First Name</param>
        /// <param name="lastName">Last Name</param>
        /// <param name="companyName">Name of the company</param>
        /// <param name="address">address</param>
        /// <param name="plan">Information about your plans and credits</param>
        /// <param name="relay">relay</param>
        /// <param name="marketingAutomation">marketingAutomation</param>
        [JsonConstructor]
        public GetAccount(string email, string firstName, string lastName, string companyName, GetExtendedClientAllOfAddress address, List<GetAccountAllOfPlan> plan, GetAccountAllOfRelay relay, Option<GetAccountAllOfMarketingAutomation?> marketingAutomation = default)
        {
            Email = email;
            FirstName = firstName;
            LastName = lastName;
            CompanyName = companyName;
            Address = address;
            Plan = plan;
            Relay = relay;
            MarketingAutomationOption = marketingAutomation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Login Email
        /// </summary>
        /// <value>Login Email</value>
        /* <example>john.smith@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// First Name
        /// </summary>
        /// <value>First Name</value>
        /* <example>John</example> */
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last Name
        /// </summary>
        /// <value>Last Name</value>
        /* <example>Smith</example> */
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Name of the company
        /// </summary>
        /// <value>Name of the company</value>
        /* <example>MyCompany</example> */
        [JsonPropertyName("companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public GetExtendedClientAllOfAddress Address { get; set; }

        /// <summary>
        /// Information about your plans and credits
        /// </summary>
        /// <value>Information about your plans and credits</value>
        [JsonPropertyName("plan")]
        public List<GetAccountAllOfPlan> Plan { get; set; }

        /// <summary>
        /// Gets or Sets Relay
        /// </summary>
        [JsonPropertyName("relay")]
        public GetAccountAllOfRelay Relay { get; set; }

        /// <summary>
        /// Used to track the state of MarketingAutomation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAccountAllOfMarketingAutomation?> MarketingAutomationOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarketingAutomation
        /// </summary>
        [JsonPropertyName("marketingAutomation")]
        public GetAccountAllOfMarketingAutomation? MarketingAutomation { get { return this.MarketingAutomationOption; } set { this.MarketingAutomationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccount {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Relay: ").Append(Relay).Append("\n");
            sb.Append("  MarketingAutomation: ").Append(MarketingAutomation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAccount" />
    /// </summary>
    public class GetAccountJsonConverter : JsonConverter<GetAccount>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> companyName = default;
            Option<GetExtendedClientAllOfAddress?> address = default;
            Option<List<GetAccountAllOfPlan>?> plan = default;
            Option<GetAccountAllOfRelay?> relay = default;
            Option<GetAccountAllOfMarketingAutomation?> marketingAutomation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "companyName":
                            companyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address":
                            address = new Option<GetExtendedClientAllOfAddress?>(JsonSerializer.Deserialize<GetExtendedClientAllOfAddress>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "plan":
                            plan = new Option<List<GetAccountAllOfPlan>?>(JsonSerializer.Deserialize<List<GetAccountAllOfPlan>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "relay":
                            relay = new Option<GetAccountAllOfRelay?>(JsonSerializer.Deserialize<GetAccountAllOfRelay>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "marketingAutomation":
                            marketingAutomation = new Option<GetAccountAllOfMarketingAutomation?>(JsonSerializer.Deserialize<GetAccountAllOfMarketingAutomation>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(email));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(lastName));

            if (!companyName.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(companyName));

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(address));

            if (!plan.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(plan));

            if (!relay.IsSet)
                throw new ArgumentException("Property is required for class GetAccount.", nameof(relay));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class GetAccount.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class GetAccount.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class GetAccount.");

            if (companyName.IsSet && companyName.Value == null)
                throw new ArgumentNullException(nameof(companyName), "Property is not nullable for class GetAccount.");

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class GetAccount.");

            if (plan.IsSet && plan.Value == null)
                throw new ArgumentNullException(nameof(plan), "Property is not nullable for class GetAccount.");

            if (relay.IsSet && relay.Value == null)
                throw new ArgumentNullException(nameof(relay), "Property is not nullable for class GetAccount.");

            if (marketingAutomation.IsSet && marketingAutomation.Value == null)
                throw new ArgumentNullException(nameof(marketingAutomation), "Property is not nullable for class GetAccount.");

            return new GetAccount(email.Value!, firstName.Value!, lastName.Value!, companyName.Value!, address.Value!, plan.Value!, relay.Value!, marketingAutomation);
        }

        /// <summary>
        /// Serializes a <see cref="GetAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAccount getAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAccount getAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAccount.Email == null)
                throw new ArgumentNullException(nameof(getAccount.Email), "Property is required for class GetAccount.");

            if (getAccount.FirstName == null)
                throw new ArgumentNullException(nameof(getAccount.FirstName), "Property is required for class GetAccount.");

            if (getAccount.LastName == null)
                throw new ArgumentNullException(nameof(getAccount.LastName), "Property is required for class GetAccount.");

            if (getAccount.CompanyName == null)
                throw new ArgumentNullException(nameof(getAccount.CompanyName), "Property is required for class GetAccount.");

            if (getAccount.Address == null)
                throw new ArgumentNullException(nameof(getAccount.Address), "Property is required for class GetAccount.");

            if (getAccount.Plan == null)
                throw new ArgumentNullException(nameof(getAccount.Plan), "Property is required for class GetAccount.");

            if (getAccount.Relay == null)
                throw new ArgumentNullException(nameof(getAccount.Relay), "Property is required for class GetAccount.");

            if (getAccount.MarketingAutomationOption.IsSet && getAccount.MarketingAutomation == null)
                throw new ArgumentNullException(nameof(getAccount.MarketingAutomation), "Property is required for class GetAccount.");

            writer.WriteString("email", getAccount.Email);

            writer.WriteString("firstName", getAccount.FirstName);

            writer.WriteString("lastName", getAccount.LastName);

            writer.WriteString("companyName", getAccount.CompanyName);

            writer.WritePropertyName("address");
            JsonSerializer.Serialize(writer, getAccount.Address, jsonSerializerOptions);
            writer.WritePropertyName("plan");
            JsonSerializer.Serialize(writer, getAccount.Plan, jsonSerializerOptions);
            writer.WritePropertyName("relay");
            JsonSerializer.Serialize(writer, getAccount.Relay, jsonSerializerOptions);
            if (getAccount.MarketingAutomationOption.IsSet)
            {
                writer.WritePropertyName("marketingAutomation");
                JsonSerializer.Serialize(writer, getAccount.MarketingAutomation, jsonSerializerOptions);
            }
        }
    }
}
