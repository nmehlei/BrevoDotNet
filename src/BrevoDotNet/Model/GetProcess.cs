// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetProcess
    /// </summary>
    public partial class GetProcess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProcess" /> class.
        /// </summary>
        /// <param name="id">Id of the process</param>
        /// <param name="status">Status of the process</param>
        /// <param name="name">Process name</param>
        /// <param name="exportUrl">URL on which send export the of contacts once the process is completed</param>
        [JsonConstructor]
        public GetProcess(long id, StatusEnum status, string name, Option<string?> exportUrl = default)
        {
            Id = id;
            Status = status;
            Name = name;
            ExportUrlOption = exportUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the process
        /// </summary>
        /// <value>Status of the process</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            Queued = 1,

            /// <summary>
            /// Enum InProcess for value: in_process
            /// </summary>
            InProcess = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Queued)
                return "queued";

            if (value == StatusEnum.InProcess)
                return "in_process";

            if (value == StatusEnum.Completed)
                return "completed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the process
        /// </summary>
        /// <value>Status of the process</value>
        /* <example>queued</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Id of the process
        /// </summary>
        /// <value>Id of the process</value>
        /* <example>145</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Process name
        /// </summary>
        /// <value>Process name</value>
        /* <example>IMPORTUSER</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of ExportUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExportUrlOption { get; private set; }

        /// <summary>
        /// URL on which send export the of contacts once the process is completed
        /// </summary>
        /// <value>URL on which send export the of contacts once the process is completed</value>
        /* <example>http://requestb.in/16ua3aj1</example> */
        [JsonPropertyName("export_url")]
        public string? ExportUrl { get { return this.ExportUrlOption; } set { this.ExportUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetProcess {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExportUrl: ").Append(ExportUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetProcess" />
    /// </summary>
    public class GetProcessJsonConverter : JsonConverter<GetProcess>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetProcess" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetProcess Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<GetProcess.StatusEnum?> status = default;
            Option<string?> name = default;
            Option<string?> exportUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetProcess.StatusEnum?>(GetProcess.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "export_url":
                            exportUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetProcess.", nameof(id));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetProcess.", nameof(status));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetProcess.", nameof(name));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetProcess.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetProcess.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetProcess.");

            if (exportUrl.IsSet && exportUrl.Value == null)
                throw new ArgumentNullException(nameof(exportUrl), "Property is not nullable for class GetProcess.");

            return new GetProcess(id.Value!.Value!, status.Value!.Value!, name.Value!, exportUrl);
        }

        /// <summary>
        /// Serializes a <see cref="GetProcess" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getProcess"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetProcess getProcess, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getProcess, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetProcess" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getProcess"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetProcess getProcess, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getProcess.Name == null)
                throw new ArgumentNullException(nameof(getProcess.Name), "Property is required for class GetProcess.");

            if (getProcess.ExportUrlOption.IsSet && getProcess.ExportUrl == null)
                throw new ArgumentNullException(nameof(getProcess.ExportUrl), "Property is required for class GetProcess.");

            writer.WriteNumber("id", getProcess.Id);

            var statusRawValue = GetProcess.StatusEnumToJsonValue(getProcess.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("name", getProcess.Name);

            if (getProcess.ExportUrlOption.IsSet)
                writer.WriteString("export_url", getProcess.ExportUrl);
        }
    }
}
