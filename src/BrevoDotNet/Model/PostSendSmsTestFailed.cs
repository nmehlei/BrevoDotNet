// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// PostSendSmsTestFailed
    /// </summary>
    public partial class PostSendSmsTestFailed : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostSendSmsTestFailed" /> class.
        /// </summary>
        /// <param name="code">Response code</param>
        /// <param name="message">Response message</param>
        /// <param name="unexistingSms">unexistingSms</param>
        /// <param name="withoutListSms">withoutListSms</param>
        [JsonConstructor]
        public PostSendSmsTestFailed(long code, string message, Option<List<string>?> unexistingSms = default, Option<List<string>?> withoutListSms = default)
        {
            Code = code;
            Message = message;
            UnexistingSmsOption = unexistingSms;
            WithoutListSmsOption = withoutListSms;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Response code
        /// </summary>
        /// <value>Response code</value>
        [JsonPropertyName("code")]
        public long Code { get; set; }

        /// <summary>
        /// Response message
        /// </summary>
        /// <value>Response message</value>
        /* <example>The SMS could not be sent to all recipients</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of UnexistingSms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UnexistingSmsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnexistingSms
        /// </summary>
        [JsonPropertyName("unexistingSms")]
        public List<string>? UnexistingSms { get { return this.UnexistingSmsOption; } set { this.UnexistingSmsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WithoutListSms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> WithoutListSmsOption { get; private set; }

        /// <summary>
        /// Gets or Sets WithoutListSms
        /// </summary>
        [JsonPropertyName("withoutListSms")]
        public List<string>? WithoutListSms { get { return this.WithoutListSmsOption; } set { this.WithoutListSmsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostSendSmsTestFailed {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  UnexistingSms: ").Append(UnexistingSms).Append("\n");
            sb.Append("  WithoutListSms: ").Append(WithoutListSms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostSendSmsTestFailed" />
    /// </summary>
    public class PostSendSmsTestFailedJsonConverter : JsonConverter<PostSendSmsTestFailed>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostSendSmsTestFailed" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostSendSmsTestFailed Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> code = default;
            Option<string?> message = default;
            Option<List<string>?> unexistingSms = default;
            Option<List<string>?> withoutListSms = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "unexistingSms":
                            unexistingSms = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "withoutListSms":
                            withoutListSms = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class PostSendSmsTestFailed.", nameof(code));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class PostSendSmsTestFailed.", nameof(message));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class PostSendSmsTestFailed.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class PostSendSmsTestFailed.");

            if (unexistingSms.IsSet && unexistingSms.Value == null)
                throw new ArgumentNullException(nameof(unexistingSms), "Property is not nullable for class PostSendSmsTestFailed.");

            if (withoutListSms.IsSet && withoutListSms.Value == null)
                throw new ArgumentNullException(nameof(withoutListSms), "Property is not nullable for class PostSendSmsTestFailed.");

            return new PostSendSmsTestFailed(code.Value!.Value!, message.Value!, unexistingSms, withoutListSms);
        }

        /// <summary>
        /// Serializes a <see cref="PostSendSmsTestFailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postSendSmsTestFailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostSendSmsTestFailed postSendSmsTestFailed, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postSendSmsTestFailed, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostSendSmsTestFailed" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postSendSmsTestFailed"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostSendSmsTestFailed postSendSmsTestFailed, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postSendSmsTestFailed.Message == null)
                throw new ArgumentNullException(nameof(postSendSmsTestFailed.Message), "Property is required for class PostSendSmsTestFailed.");

            if (postSendSmsTestFailed.UnexistingSmsOption.IsSet && postSendSmsTestFailed.UnexistingSms == null)
                throw new ArgumentNullException(nameof(postSendSmsTestFailed.UnexistingSms), "Property is required for class PostSendSmsTestFailed.");

            if (postSendSmsTestFailed.WithoutListSmsOption.IsSet && postSendSmsTestFailed.WithoutListSms == null)
                throw new ArgumentNullException(nameof(postSendSmsTestFailed.WithoutListSms), "Property is required for class PostSendSmsTestFailed.");

            writer.WriteNumber("code", postSendSmsTestFailed.Code);

            writer.WriteString("message", postSendSmsTestFailed.Message);

            if (postSendSmsTestFailed.UnexistingSmsOption.IsSet)
            {
                writer.WritePropertyName("unexistingSms");
                JsonSerializer.Serialize(writer, postSendSmsTestFailed.UnexistingSms, jsonSerializerOptions);
            }
            if (postSendSmsTestFailed.WithoutListSmsOption.IsSet)
            {
                writer.WritePropertyName("withoutListSms");
                JsonSerializer.Serialize(writer, postSendSmsTestFailed.WithoutListSms, jsonSerializerOptions);
            }
        }
    }
}
