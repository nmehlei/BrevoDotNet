// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// UpdateWebhook
    /// </summary>
    public partial class UpdateWebhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWebhook" /> class.
        /// </summary>
        /// <param name="url">URL of the webhook</param>
        /// <param name="description">Description of the webhook</param>
        /// <param name="events">Events triggering the webhook. Possible values for Transactional type webhook – &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; and possible values for Marketing type webhook – &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; and &#x60;delivered&#x60;</param>
        [JsonConstructor]
        public UpdateWebhook(Option<string?> url = default, Option<string?> description = default, Option<List<UpdateWebhook.EventsEnum>?> events = default)
        {
            UrlOption = url;
            DescriptionOption = description;
            EventsOption = events;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Events
        /// </summary>
        public enum EventsEnum
        {
            /// <summary>
            /// Enum HardBounce for value: hardBounce
            /// </summary>
            HardBounce = 1,

            /// <summary>
            /// Enum SoftBounce for value: softBounce
            /// </summary>
            SoftBounce = 2,

            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            Blocked = 3,

            /// <summary>
            /// Enum Spam for value: spam
            /// </summary>
            Spam = 4,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            Delivered = 5,

            /// <summary>
            /// Enum Request for value: request
            /// </summary>
            Request = 6,

            /// <summary>
            /// Enum Click for value: click
            /// </summary>
            Click = 7,

            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            Invalid = 8,

            /// <summary>
            /// Enum Deferred for value: deferred
            /// </summary>
            Deferred = 9,

            /// <summary>
            /// Enum Opened for value: opened
            /// </summary>
            Opened = 10,

            /// <summary>
            /// Enum UniqueOpened for value: uniqueOpened
            /// </summary>
            UniqueOpened = 11,

            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            Unsubscribed = 12,

            /// <summary>
            /// Enum ListAddition for value: listAddition
            /// </summary>
            ListAddition = 13,

            /// <summary>
            /// Enum ContactUpdated for value: contactUpdated
            /// </summary>
            ContactUpdated = 14,

            /// <summary>
            /// Enum ContactDeleted for value: contactDeleted
            /// </summary>
            ContactDeleted = 15
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventsEnum EventsEnumFromString(string value)
        {
            if (value.Equals("hardBounce"))
                return EventsEnum.HardBounce;

            if (value.Equals("softBounce"))
                return EventsEnum.SoftBounce;

            if (value.Equals("blocked"))
                return EventsEnum.Blocked;

            if (value.Equals("spam"))
                return EventsEnum.Spam;

            if (value.Equals("delivered"))
                return EventsEnum.Delivered;

            if (value.Equals("request"))
                return EventsEnum.Request;

            if (value.Equals("click"))
                return EventsEnum.Click;

            if (value.Equals("invalid"))
                return EventsEnum.Invalid;

            if (value.Equals("deferred"))
                return EventsEnum.Deferred;

            if (value.Equals("opened"))
                return EventsEnum.Opened;

            if (value.Equals("uniqueOpened"))
                return EventsEnum.UniqueOpened;

            if (value.Equals("unsubscribed"))
                return EventsEnum.Unsubscribed;

            if (value.Equals("listAddition"))
                return EventsEnum.ListAddition;

            if (value.Equals("contactUpdated"))
                return EventsEnum.ContactUpdated;

            if (value.Equals("contactDeleted"))
                return EventsEnum.ContactDeleted;

            throw new NotImplementedException($"Could not convert value to type EventsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventsEnum? EventsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("hardBounce"))
                return EventsEnum.HardBounce;

            if (value.Equals("softBounce"))
                return EventsEnum.SoftBounce;

            if (value.Equals("blocked"))
                return EventsEnum.Blocked;

            if (value.Equals("spam"))
                return EventsEnum.Spam;

            if (value.Equals("delivered"))
                return EventsEnum.Delivered;

            if (value.Equals("request"))
                return EventsEnum.Request;

            if (value.Equals("click"))
                return EventsEnum.Click;

            if (value.Equals("invalid"))
                return EventsEnum.Invalid;

            if (value.Equals("deferred"))
                return EventsEnum.Deferred;

            if (value.Equals("opened"))
                return EventsEnum.Opened;

            if (value.Equals("uniqueOpened"))
                return EventsEnum.UniqueOpened;

            if (value.Equals("unsubscribed"))
                return EventsEnum.Unsubscribed;

            if (value.Equals("listAddition"))
                return EventsEnum.ListAddition;

            if (value.Equals("contactUpdated"))
                return EventsEnum.ContactUpdated;

            if (value.Equals("contactDeleted"))
                return EventsEnum.ContactDeleted;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventsEnumToJsonValue(EventsEnum? value)
        {
            if (value == EventsEnum.HardBounce)
                return "hardBounce";

            if (value == EventsEnum.SoftBounce)
                return "softBounce";

            if (value == EventsEnum.Blocked)
                return "blocked";

            if (value == EventsEnum.Spam)
                return "spam";

            if (value == EventsEnum.Delivered)
                return "delivered";

            if (value == EventsEnum.Request)
                return "request";

            if (value == EventsEnum.Click)
                return "click";

            if (value == EventsEnum.Invalid)
                return "invalid";

            if (value == EventsEnum.Deferred)
                return "deferred";

            if (value == EventsEnum.Opened)
                return "opened";

            if (value == EventsEnum.UniqueOpened)
                return "uniqueOpened";

            if (value == EventsEnum.Unsubscribed)
                return "unsubscribed";

            if (value == EventsEnum.ListAddition)
                return "listAddition";

            if (value == EventsEnum.ContactUpdated)
                return "contactUpdated";

            if (value == EventsEnum.ContactDeleted)
                return "contactDeleted";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// URL of the webhook
        /// </summary>
        /// <value>URL of the webhook</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the webhook
        /// </summary>
        /// <value>Description of the webhook</value>
        /* <example>Webhook triggered on contact hardbounce</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Events
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UpdateWebhook.EventsEnum>?> EventsOption { get; private set; }

        /// <summary>
        /// Events triggering the webhook. Possible values for Transactional type webhook – &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; and possible values for Marketing type webhook – &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; and &#x60;delivered&#x60;
        /// </summary>
        /// <value>Events triggering the webhook. Possible values for Transactional type webhook – &#x60;sent&#x60; OR &#x60;request&#x60;, &#x60;delivered&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;blocked&#x60;, &#x60;spam&#x60;, &#x60;invalid&#x60;, &#x60;deferred&#x60;, &#x60;click&#x60;, &#x60;opened&#x60;, &#x60;uniqueOpened&#x60; and &#x60;unsubscribed&#x60; and possible values for Marketing type webhook – &#x60;spam&#x60;, &#x60;opened&#x60;, &#x60;click&#x60;, &#x60;hardBounce&#x60;, &#x60;softBounce&#x60;, &#x60;unsubscribed&#x60;, &#x60;listAddition&#x60; and &#x60;delivered&#x60;</value>
        [JsonPropertyName("events")]
        public List<UpdateWebhook.EventsEnum>? Events { get { return this.EventsOption; } set { this.EventsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateWebhook {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateWebhook" />
    /// </summary>
    public class UpdateWebhookJsonConverter : JsonConverter<UpdateWebhook>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateWebhook" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateWebhook Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> description = default;
            Option<List<UpdateWebhook.EventsEnum>?> events = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "events":
                            events = new Option<List<UpdateWebhook.EventsEnum>?>(JsonSerializer.Deserialize<List<UpdateWebhook.EventsEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class UpdateWebhook.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UpdateWebhook.");

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class UpdateWebhook.");

            return new UpdateWebhook(url, description, events);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateWebhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWebhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateWebhook updateWebhook, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateWebhook, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateWebhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWebhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateWebhook updateWebhook, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateWebhook.UrlOption.IsSet && updateWebhook.Url == null)
                throw new ArgumentNullException(nameof(updateWebhook.Url), "Property is required for class UpdateWebhook.");

            if (updateWebhook.DescriptionOption.IsSet && updateWebhook.Description == null)
                throw new ArgumentNullException(nameof(updateWebhook.Description), "Property is required for class UpdateWebhook.");

            if (updateWebhook.EventsOption.IsSet && updateWebhook.Events == null)
                throw new ArgumentNullException(nameof(updateWebhook.Events), "Property is required for class UpdateWebhook.");

            if (updateWebhook.UrlOption.IsSet)
                writer.WriteString("url", updateWebhook.Url);

            if (updateWebhook.DescriptionOption.IsSet)
                writer.WriteString("description", updateWebhook.Description);

            if (updateWebhook.EventsOption.IsSet)
            {
                writer.WritePropertyName("events");
                JsonSerializer.Serialize(writer, updateWebhook.Events, jsonSerializerOptions);
            }
        }
    }
}
