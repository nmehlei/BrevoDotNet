// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// CreateEmailCampaign
    /// </summary>
    public partial class CreateEmailCampaign : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmailCampaign" /> class.
        /// </summary>
        /// <param name="sender">sender</param>
        /// <param name="name">Name of the campaign</param>
        /// <param name="tag">Tag of the campaign</param>
        /// <param name="htmlContent">Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)</param>
        /// <param name="htmlUrl">Mandatory if htmlContent and templateId are empty. Url to the message (HTML)</param>
        /// <param name="templateId">Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status &#39;active&#39;. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.</param>
        /// <param name="scheduledAt">Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).</param>
        /// <param name="subject">Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.</param>
        /// <param name="replyTo">Email on which the campaign recipients will be able to reply to</param>
        /// <param name="toField">To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</param>
        /// <param name="recipients">recipients</param>
        /// <param name="attachmentUrl">Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</param>
        /// <param name="inlineImageActivation">Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts (default to false)</param>
        /// <param name="mirrorActive">Use true to enable the mirror link</param>
        /// <param name="footer">Footer of the email campaign</param>
        /// <param name="header">Header of the email campaign</param>
        /// <param name="utmCampaign">Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed</param>
        /// <param name="params">Pass the set of attributes to customize the type classic campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. Only available if &#39;type&#39; is &#39;classic&#39;. It&#39;s considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;</param>
        /// <param name="sendAtBestTime">Set this to true if you want to send your campaign at best time. (default to false)</param>
        /// <param name="abTesting">Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered when abTesting is set to true. &#39;subjectA&#39; &amp; &#39;subjectB&#39; are mandatory together &amp; &#39;subject&#39; if passed is ignored. Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B (default to false)</param>
        /// <param name="subjectA">Subject A of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</param>
        /// <param name="subjectB">Subject B of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</param>
        /// <param name="splitRule">Add the size of your test groups. Mandatory if abTesting &#x3D; true &amp; &#39;recipients&#39; is passed. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else</param>
        /// <param name="winnerCriteria">Choose the metrics that will determinate the winning version. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed</param>
        /// <param name="winnerDelay">Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed</param>
        /// <param name="ipWarmupEnable">Available for dedicated ip clients. Set this to true if you wish to warm up your ip. (default to false)</param>
        /// <param name="initialQuota">Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.</param>
        /// <param name="increaseRate">Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.</param>
        [JsonConstructor]
        public CreateEmailCampaign(CreateEmailCampaignSender sender, string name, Option<string?> tag = default, Option<string?> htmlContent = default, Option<string?> htmlUrl = default, Option<long?> templateId = default, Option<DateTime?> scheduledAt = default, Option<string?> subject = default, Option<string?> replyTo = default, Option<string?> toField = default, Option<CreateEmailCampaignRecipients?> recipients = default, Option<string?> attachmentUrl = default, Option<bool?> inlineImageActivation = default, Option<bool?> mirrorActive = default, Option<string?> footer = default, Option<string?> header = default, Option<string?> utmCampaign = default, Option<Object?> @params = default, Option<bool?> sendAtBestTime = default, Option<bool?> abTesting = default, Option<string?> subjectA = default, Option<string?> subjectB = default, Option<long?> splitRule = default, Option<WinnerCriteriaEnum?> winnerCriteria = default, Option<long?> winnerDelay = default, Option<bool?> ipWarmupEnable = default, Option<long?> initialQuota = default, Option<long?> increaseRate = default)
        {
            Sender = sender;
            Name = name;
            TagOption = tag;
            HtmlContentOption = htmlContent;
            HtmlUrlOption = htmlUrl;
            TemplateIdOption = templateId;
            ScheduledAtOption = scheduledAt;
            SubjectOption = subject;
            ReplyToOption = replyTo;
            ToFieldOption = toField;
            RecipientsOption = recipients;
            AttachmentUrlOption = attachmentUrl;
            InlineImageActivationOption = inlineImageActivation;
            MirrorActiveOption = mirrorActive;
            FooterOption = footer;
            HeaderOption = header;
            UtmCampaignOption = utmCampaign;
            ParamsOption = @params;
            SendAtBestTimeOption = sendAtBestTime;
            AbTestingOption = abTesting;
            SubjectAOption = subjectA;
            SubjectBOption = subjectB;
            SplitRuleOption = splitRule;
            WinnerCriteriaOption = winnerCriteria;
            WinnerDelayOption = winnerDelay;
            IpWarmupEnableOption = ipWarmupEnable;
            InitialQuotaOption = initialQuota;
            IncreaseRateOption = increaseRate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Choose the metrics that will determinate the winning version. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed
        /// </summary>
        /// <value>Choose the metrics that will determinate the winning version. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed</value>
        public enum WinnerCriteriaEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            Open = 1,

            /// <summary>
            /// Enum Click for value: click
            /// </summary>
            Click = 2
        }

        /// <summary>
        /// Returns a <see cref="WinnerCriteriaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WinnerCriteriaEnum WinnerCriteriaEnumFromString(string value)
        {
            if (value.Equals("open"))
                return WinnerCriteriaEnum.Open;

            if (value.Equals("click"))
                return WinnerCriteriaEnum.Click;

            throw new NotImplementedException($"Could not convert value to type WinnerCriteriaEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WinnerCriteriaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WinnerCriteriaEnum? WinnerCriteriaEnumFromStringOrDefault(string value)
        {
            if (value.Equals("open"))
                return WinnerCriteriaEnum.Open;

            if (value.Equals("click"))
                return WinnerCriteriaEnum.Click;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WinnerCriteriaEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WinnerCriteriaEnumToJsonValue(WinnerCriteriaEnum? value)
        {
            if (value == WinnerCriteriaEnum.Open)
                return "open";

            if (value == WinnerCriteriaEnum.Click)
                return "click";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of WinnerCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WinnerCriteriaEnum?> WinnerCriteriaOption { get; private set; }

        /// <summary>
        /// Choose the metrics that will determinate the winning version. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed
        /// </summary>
        /// <value>Choose the metrics that will determinate the winning version. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerCriteria&#39; is ignored if passed</value>
        /* <example>open</example> */
        [JsonPropertyName("winnerCriteria")]
        public WinnerCriteriaEnum? WinnerCriteria { get { return this.WinnerCriteriaOption; } set { this.WinnerCriteriaOption = new(value); } }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public CreateEmailCampaignSender Sender { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        /// <value>Name of the campaign</value>
        /* <example>Newsletter - May 2017</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Tag of the campaign
        /// </summary>
        /// <value>Tag of the campaign</value>
        /* <example>Newsletter</example> */
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of HtmlContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HtmlContentOption { get; private set; }

        /// <summary>
        /// Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)
        /// </summary>
        /// <value>Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)</value>
        /* <example>Spring is here, discover my new collection</example> */
        [JsonPropertyName("htmlContent")]
        public string? HtmlContent { get { return this.HtmlContentOption; } set { this.HtmlContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of HtmlUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HtmlUrlOption { get; private set; }

        /// <summary>
        /// Mandatory if htmlContent and templateId are empty. Url to the message (HTML)
        /// </summary>
        /// <value>Mandatory if htmlContent and templateId are empty. Url to the message (HTML)</value>
        /* <example>https://html.domain.com</example> */
        [JsonPropertyName("htmlUrl")]
        public string? HtmlUrl { get { return this.HtmlUrlOption; } set { this.HtmlUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status &#39;active&#39;. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.
        /// </summary>
        /// <value>Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status &#39;active&#39;. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.</value>
        [JsonPropertyName("templateId")]
        public long? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ScheduledAtOption { get; private set; }

        /// <summary>
        /// Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
        /// </summary>
        /// <value>Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).</value>
        /* <example>2017-06-01T12:30+02:00</example> */
        [JsonPropertyName("scheduledAt")]
        public DateTime? ScheduledAt { get { return this.ScheduledAtOption; } set { this.ScheduledAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.
        /// </summary>
        /// <value>Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.</value>
        /* <example>Discover the New Collection !</example> */
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyToOption { get; private set; }

        /// <summary>
        /// Email on which the campaign recipients will be able to reply to
        /// </summary>
        /// <value>Email on which the campaign recipients will be able to reply to</value>
        /* <example>support@myshop.com</example> */
        [JsonPropertyName("replyTo")]
        public string? ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToField
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToFieldOption { get; private set; }

        /// <summary>
        /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        /// </summary>
        /// <value>To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</value>
        /* <example>{FNAME} {LNAME}</example> */
        [JsonPropertyName("toField")]
        public string? ToField { get { return this.ToFieldOption; } set { this.ToFieldOption = new(value); } }

        /// <summary>
        /// Used to track the state of Recipients
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateEmailCampaignRecipients?> RecipientsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public CreateEmailCampaignRecipients? Recipients { get { return this.RecipientsOption; } set { this.RecipientsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttachmentUrlOption { get; private set; }

        /// <summary>
        /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
        /// </summary>
        /// <value>Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</value>
        /* <example>https://attachment.domain.com</example> */
        [JsonPropertyName("attachmentUrl")]
        public string? AttachmentUrl { get { return this.AttachmentUrlOption; } set { this.AttachmentUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of InlineImageActivation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InlineImageActivationOption { get; private set; }

        /// <summary>
        /// Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts
        /// </summary>
        /// <value>Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts</value>
        /* <example>true</example> */
        [JsonPropertyName("inlineImageActivation")]
        public bool? InlineImageActivation { get { return this.InlineImageActivationOption; } set { this.InlineImageActivationOption = new(value); } }

        /// <summary>
        /// Used to track the state of MirrorActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MirrorActiveOption { get; private set; }

        /// <summary>
        /// Use true to enable the mirror link
        /// </summary>
        /// <value>Use true to enable the mirror link</value>
        /* <example>true</example> */
        [JsonPropertyName("mirrorActive")]
        public bool? MirrorActive { get { return this.MirrorActiveOption; } set { this.MirrorActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Footer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FooterOption { get; private set; }

        /// <summary>
        /// Footer of the email campaign
        /// </summary>
        /// <value>Footer of the email campaign</value>
        /* <example>[DEFAULT_FOOTER]</example> */
        [JsonPropertyName("footer")]
        public string? Footer { get { return this.FooterOption; } set { this.FooterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Header
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeaderOption { get; private set; }

        /// <summary>
        /// Header of the email campaign
        /// </summary>
        /// <value>Header of the email campaign</value>
        /* <example>[DEFAULT_HEADER]</example> */
        [JsonPropertyName("header")]
        public string? Header { get { return this.HeaderOption; } set { this.HeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmCampaign
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmCampaignOption { get; private set; }

        /// <summary>
        /// Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
        /// </summary>
        /// <value>Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed</value>
        /* <example>NL_05_2017</example> */
        [JsonPropertyName("utmCampaign")]
        public string? UtmCampaign { get { return this.UtmCampaignOption; } set { this.UtmCampaignOption = new(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ParamsOption { get; private set; }

        /// <summary>
        /// Pass the set of attributes to customize the type classic campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. Only available if &#39;type&#39; is &#39;classic&#39;. It&#39;s considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;
        /// </summary>
        /// <value>Pass the set of attributes to customize the type classic campaign. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. Only available if &#39;type&#39; is &#39;classic&#39;. It&#39;s considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of &#39;subject&#39;, &#39;htmlContent/htmlUrl&#39;, &#39;sender.name&#39; &amp; &#39;toField&#39;</value>
        /* <example>{&quot;FNAME&quot;:&quot;Joe&quot;,&quot;LNAME&quot;:&quot;Doe&quot;}</example> */
        [JsonPropertyName("params")]
        public Object? Params { get { return this.ParamsOption; } set { this.ParamsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SendAtBestTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SendAtBestTimeOption { get; private set; }

        /// <summary>
        /// Set this to true if you want to send your campaign at best time.
        /// </summary>
        /// <value>Set this to true if you want to send your campaign at best time.</value>
        /* <example>true</example> */
        [JsonPropertyName("sendAtBestTime")]
        public bool? SendAtBestTime { get { return this.SendAtBestTimeOption; } set { this.SendAtBestTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AbTesting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AbTestingOption { get; private set; }

        /// <summary>
        /// Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered when abTesting is set to true. &#39;subjectA&#39; &amp; &#39;subjectB&#39; are mandatory together &amp; &#39;subject&#39; if passed is ignored. Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
        /// </summary>
        /// <value>Status of A/B Test. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled. &#39;subjectA&#39;, &#39;subjectB&#39;, &#39;splitRule&#39;, &#39;winnerCriteria&#39; &amp; &#39;winnerDelay&#39; will be considered when abTesting is set to true. &#39;subjectA&#39; &amp; &#39;subjectB&#39; are mandatory together &amp; &#39;subject&#39; if passed is ignored. Can be set to true only if &#39;sendAtBestTime&#39; is &#39;false&#39;. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B</value>
        /* <example>true</example> */
        [JsonPropertyName("abTesting")]
        public bool? AbTesting { get { return this.AbTestingOption; } set { this.AbTestingOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectAOption { get; private set; }

        /// <summary>
        /// Subject A of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value
        /// </summary>
        /// <value>Subject A of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</value>
        /* <example>Discover the New Collection!</example> */
        [JsonPropertyName("subjectA")]
        public string? SubjectA { get { return this.SubjectAOption; } set { this.SubjectAOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectBOption { get; private set; }

        /// <summary>
        /// Subject B of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value
        /// </summary>
        /// <value>Subject B of the campaign. Mandatory if abTesting &#x3D; true. subjectA &amp; subjectB should have unique value</value>
        /* <example>Want to discover the New Collection?</example> */
        [JsonPropertyName("subjectB")]
        public string? SubjectB { get { return this.SubjectBOption; } set { this.SubjectBOption = new(value); } }

        /// <summary>
        /// Used to track the state of SplitRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SplitRuleOption { get; private set; }

        /// <summary>
        /// Add the size of your test groups. Mandatory if abTesting &#x3D; true &amp; &#39;recipients&#39; is passed. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else
        /// </summary>
        /// <value>Add the size of your test groups. Mandatory if abTesting &#x3D; true &amp; &#39;recipients&#39; is passed. We&#39;ll send version A and B to a random sample of recipients, and then the winning version to everyone else</value>
        /* <example>50</example> */
        [JsonPropertyName("splitRule")]
        public long? SplitRule { get { return this.SplitRuleOption; } set { this.SplitRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinnerDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> WinnerDelayOption { get; private set; }

        /// <summary>
        /// Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed
        /// </summary>
        /// <value>Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 &#x3D; 168 hours. The winning version will be sent at the end of the test. Mandatory if &#39;splitRule&#39; &gt;&#x3D; 1 and &lt; 50. If splitRule &#x3D; 50, &#39;winnerDelay&#39; is ignored if passed</value>
        /* <example>50</example> */
        [JsonPropertyName("winnerDelay")]
        public long? WinnerDelay { get { return this.WinnerDelayOption; } set { this.WinnerDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpWarmupEnable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IpWarmupEnableOption { get; private set; }

        /// <summary>
        /// Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
        /// </summary>
        /// <value>Available for dedicated ip clients. Set this to true if you wish to warm up your ip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ipWarmupEnable")]
        public bool? IpWarmupEnable { get { return this.IpWarmupEnableOption; } set { this.IpWarmupEnableOption = new(value); } }

        /// <summary>
        /// Used to track the state of InitialQuota
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> InitialQuotaOption { get; private set; }

        /// <summary>
        /// Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
        /// </summary>
        /// <value>Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.</value>
        /* <example>3000</example> */
        [JsonPropertyName("initialQuota")]
        public long? InitialQuota { get { return this.InitialQuotaOption; } set { this.InitialQuotaOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncreaseRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IncreaseRateOption { get; private set; }

        /// <summary>
        /// Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
        /// </summary>
        /// <value>Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.</value>
        /* <example>70</example> */
        [JsonPropertyName("increaseRate")]
        public long? IncreaseRate { get { return this.IncreaseRateOption; } set { this.IncreaseRateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEmailCampaign {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  InlineImageActivation: ").Append(InlineImageActivation).Append("\n");
            sb.Append("  MirrorActive: ").Append(MirrorActive).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  UtmCampaign: ").Append(UtmCampaign).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  SendAtBestTime: ").Append(SendAtBestTime).Append("\n");
            sb.Append("  AbTesting: ").Append(AbTesting).Append("\n");
            sb.Append("  SubjectA: ").Append(SubjectA).Append("\n");
            sb.Append("  SubjectB: ").Append(SubjectB).Append("\n");
            sb.Append("  SplitRule: ").Append(SplitRule).Append("\n");
            sb.Append("  WinnerCriteria: ").Append(WinnerCriteria).Append("\n");
            sb.Append("  WinnerDelay: ").Append(WinnerDelay).Append("\n");
            sb.Append("  IpWarmupEnable: ").Append(IpWarmupEnable).Append("\n");
            sb.Append("  InitialQuota: ").Append(InitialQuota).Append("\n");
            sb.Append("  IncreaseRate: ").Append(IncreaseRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SplitRule (long) maximum
            if (this.SplitRuleOption.IsSet && this.SplitRuleOption.Value > (long)50)
            {
                yield return new ValidationResult("Invalid value for SplitRule, must be a value less than or equal to 50.", new [] { "SplitRule" });
            }

            // SplitRule (long) minimum
            if (this.SplitRuleOption.IsSet && this.SplitRuleOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for SplitRule, must be a value greater than or equal to 1.", new [] { "SplitRule" });
            }

            // WinnerDelay (long) maximum
            if (this.WinnerDelayOption.IsSet && this.WinnerDelayOption.Value > (long)168)
            {
                yield return new ValidationResult("Invalid value for WinnerDelay, must be a value less than or equal to 168.", new [] { "WinnerDelay" });
            }

            // WinnerDelay (long) minimum
            if (this.WinnerDelayOption.IsSet && this.WinnerDelayOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for WinnerDelay, must be a value greater than or equal to 1.", new [] { "WinnerDelay" });
            }

            // IncreaseRate (long) maximum
            if (this.IncreaseRateOption.IsSet && this.IncreaseRateOption.Value > (long)100)
            {
                yield return new ValidationResult("Invalid value for IncreaseRate, must be a value less than or equal to 100.", new [] { "IncreaseRate" });
            }

            // IncreaseRate (long) minimum
            if (this.IncreaseRateOption.IsSet && this.IncreaseRateOption.Value < (long)0)
            {
                yield return new ValidationResult("Invalid value for IncreaseRate, must be a value greater than or equal to 0.", new [] { "IncreaseRate" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateEmailCampaign" />
    /// </summary>
    public class CreateEmailCampaignJsonConverter : JsonConverter<CreateEmailCampaign>
    {
        /// <summary>
        /// The format to use to serialize ScheduledAt
        /// </summary>
        public static string ScheduledAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateEmailCampaign" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateEmailCampaign Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateEmailCampaignSender?> sender = default;
            Option<string?> name = default;
            Option<string?> tag = default;
            Option<string?> htmlContent = default;
            Option<string?> htmlUrl = default;
            Option<long?> templateId = default;
            Option<DateTime?> scheduledAt = default;
            Option<string?> subject = default;
            Option<string?> replyTo = default;
            Option<string?> toField = default;
            Option<CreateEmailCampaignRecipients?> recipients = default;
            Option<string?> attachmentUrl = default;
            Option<bool?> inlineImageActivation = default;
            Option<bool?> mirrorActive = default;
            Option<string?> footer = default;
            Option<string?> header = default;
            Option<string?> utmCampaign = default;
            Option<Object?> varParams = default;
            Option<bool?> sendAtBestTime = default;
            Option<bool?> abTesting = default;
            Option<string?> subjectA = default;
            Option<string?> subjectB = default;
            Option<long?> splitRule = default;
            Option<CreateEmailCampaign.WinnerCriteriaEnum?> winnerCriteria = default;
            Option<long?> winnerDelay = default;
            Option<bool?> ipWarmupEnable = default;
            Option<long?> initialQuota = default;
            Option<long?> increaseRate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender":
                            sender = new Option<CreateEmailCampaignSender?>(JsonSerializer.Deserialize<CreateEmailCampaignSender>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlContent":
                            htmlContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlUrl":
                            htmlUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "templateId":
                            templateId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "scheduledAt":
                            scheduledAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "replyTo":
                            replyTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toField":
                            toField = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recipients":
                            recipients = new Option<CreateEmailCampaignRecipients?>(JsonSerializer.Deserialize<CreateEmailCampaignRecipients>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attachmentUrl":
                            attachmentUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inlineImageActivation":
                            inlineImageActivation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mirrorActive":
                            mirrorActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "footer":
                            footer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "header":
                            header = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "utmCampaign":
                            utmCampaign = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "params":
                            varParams = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sendAtBestTime":
                            sendAtBestTime = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "abTesting":
                            abTesting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subjectA":
                            subjectA = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectB":
                            subjectB = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "splitRule":
                            splitRule = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "winnerCriteria":
                            string? winnerCriteriaRawValue = utf8JsonReader.GetString();
                            if (winnerCriteriaRawValue != null)
                                winnerCriteria = new Option<CreateEmailCampaign.WinnerCriteriaEnum?>(CreateEmailCampaign.WinnerCriteriaEnumFromStringOrDefault(winnerCriteriaRawValue));
                            break;
                        case "winnerDelay":
                            winnerDelay = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ipWarmupEnable":
                            ipWarmupEnable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "initialQuota":
                            initialQuota = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "increaseRate":
                            increaseRate = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class CreateEmailCampaign.", nameof(sender));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateEmailCampaign.", nameof(name));

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class CreateEmailCampaign.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateEmailCampaign.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class CreateEmailCampaign.");

            if (htmlContent.IsSet && htmlContent.Value == null)
                throw new ArgumentNullException(nameof(htmlContent), "Property is not nullable for class CreateEmailCampaign.");

            if (htmlUrl.IsSet && htmlUrl.Value == null)
                throw new ArgumentNullException(nameof(htmlUrl), "Property is not nullable for class CreateEmailCampaign.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class CreateEmailCampaign.");

            if (scheduledAt.IsSet && scheduledAt.Value == null)
                throw new ArgumentNullException(nameof(scheduledAt), "Property is not nullable for class CreateEmailCampaign.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class CreateEmailCampaign.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class CreateEmailCampaign.");

            if (toField.IsSet && toField.Value == null)
                throw new ArgumentNullException(nameof(toField), "Property is not nullable for class CreateEmailCampaign.");

            if (recipients.IsSet && recipients.Value == null)
                throw new ArgumentNullException(nameof(recipients), "Property is not nullable for class CreateEmailCampaign.");

            if (attachmentUrl.IsSet && attachmentUrl.Value == null)
                throw new ArgumentNullException(nameof(attachmentUrl), "Property is not nullable for class CreateEmailCampaign.");

            if (inlineImageActivation.IsSet && inlineImageActivation.Value == null)
                throw new ArgumentNullException(nameof(inlineImageActivation), "Property is not nullable for class CreateEmailCampaign.");

            if (mirrorActive.IsSet && mirrorActive.Value == null)
                throw new ArgumentNullException(nameof(mirrorActive), "Property is not nullable for class CreateEmailCampaign.");

            if (footer.IsSet && footer.Value == null)
                throw new ArgumentNullException(nameof(footer), "Property is not nullable for class CreateEmailCampaign.");

            if (header.IsSet && header.Value == null)
                throw new ArgumentNullException(nameof(header), "Property is not nullable for class CreateEmailCampaign.");

            if (utmCampaign.IsSet && utmCampaign.Value == null)
                throw new ArgumentNullException(nameof(utmCampaign), "Property is not nullable for class CreateEmailCampaign.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class CreateEmailCampaign.");

            if (sendAtBestTime.IsSet && sendAtBestTime.Value == null)
                throw new ArgumentNullException(nameof(sendAtBestTime), "Property is not nullable for class CreateEmailCampaign.");

            if (abTesting.IsSet && abTesting.Value == null)
                throw new ArgumentNullException(nameof(abTesting), "Property is not nullable for class CreateEmailCampaign.");

            if (subjectA.IsSet && subjectA.Value == null)
                throw new ArgumentNullException(nameof(subjectA), "Property is not nullable for class CreateEmailCampaign.");

            if (subjectB.IsSet && subjectB.Value == null)
                throw new ArgumentNullException(nameof(subjectB), "Property is not nullable for class CreateEmailCampaign.");

            if (splitRule.IsSet && splitRule.Value == null)
                throw new ArgumentNullException(nameof(splitRule), "Property is not nullable for class CreateEmailCampaign.");

            if (winnerCriteria.IsSet && winnerCriteria.Value == null)
                throw new ArgumentNullException(nameof(winnerCriteria), "Property is not nullable for class CreateEmailCampaign.");

            if (winnerDelay.IsSet && winnerDelay.Value == null)
                throw new ArgumentNullException(nameof(winnerDelay), "Property is not nullable for class CreateEmailCampaign.");

            if (ipWarmupEnable.IsSet && ipWarmupEnable.Value == null)
                throw new ArgumentNullException(nameof(ipWarmupEnable), "Property is not nullable for class CreateEmailCampaign.");

            if (initialQuota.IsSet && initialQuota.Value == null)
                throw new ArgumentNullException(nameof(initialQuota), "Property is not nullable for class CreateEmailCampaign.");

            if (increaseRate.IsSet && increaseRate.Value == null)
                throw new ArgumentNullException(nameof(increaseRate), "Property is not nullable for class CreateEmailCampaign.");

            return new CreateEmailCampaign(sender.Value!, name.Value!, tag, htmlContent, htmlUrl, templateId, scheduledAt, subject, replyTo, toField, recipients, attachmentUrl, inlineImageActivation, mirrorActive, footer, header, utmCampaign, varParams, sendAtBestTime, abTesting, subjectA, subjectB, splitRule, winnerCriteria, winnerDelay, ipWarmupEnable, initialQuota, increaseRate);
        }

        /// <summary>
        /// Serializes a <see cref="CreateEmailCampaign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEmailCampaign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateEmailCampaign createEmailCampaign, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createEmailCampaign, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateEmailCampaign" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEmailCampaign"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateEmailCampaign createEmailCampaign, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createEmailCampaign.Sender == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Sender), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.Name == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Name), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.TagOption.IsSet && createEmailCampaign.Tag == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Tag), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.HtmlContentOption.IsSet && createEmailCampaign.HtmlContent == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.HtmlContent), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.HtmlUrlOption.IsSet && createEmailCampaign.HtmlUrl == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.HtmlUrl), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.SubjectOption.IsSet && createEmailCampaign.Subject == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Subject), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.ReplyToOption.IsSet && createEmailCampaign.ReplyTo == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.ReplyTo), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.ToFieldOption.IsSet && createEmailCampaign.ToField == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.ToField), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.RecipientsOption.IsSet && createEmailCampaign.Recipients == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Recipients), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.AttachmentUrlOption.IsSet && createEmailCampaign.AttachmentUrl == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.AttachmentUrl), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.FooterOption.IsSet && createEmailCampaign.Footer == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Footer), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.HeaderOption.IsSet && createEmailCampaign.Header == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Header), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.UtmCampaignOption.IsSet && createEmailCampaign.UtmCampaign == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.UtmCampaign), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.ParamsOption.IsSet && createEmailCampaign.Params == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.Params), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.SubjectAOption.IsSet && createEmailCampaign.SubjectA == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.SubjectA), "Property is required for class CreateEmailCampaign.");

            if (createEmailCampaign.SubjectBOption.IsSet && createEmailCampaign.SubjectB == null)
                throw new ArgumentNullException(nameof(createEmailCampaign.SubjectB), "Property is required for class CreateEmailCampaign.");

            writer.WritePropertyName("sender");
            JsonSerializer.Serialize(writer, createEmailCampaign.Sender, jsonSerializerOptions);
            writer.WriteString("name", createEmailCampaign.Name);

            if (createEmailCampaign.TagOption.IsSet)
                writer.WriteString("tag", createEmailCampaign.Tag);

            if (createEmailCampaign.HtmlContentOption.IsSet)
                writer.WriteString("htmlContent", createEmailCampaign.HtmlContent);

            if (createEmailCampaign.HtmlUrlOption.IsSet)
                writer.WriteString("htmlUrl", createEmailCampaign.HtmlUrl);

            if (createEmailCampaign.TemplateIdOption.IsSet)
                writer.WriteNumber("templateId", createEmailCampaign.TemplateIdOption.Value!.Value);

            if (createEmailCampaign.ScheduledAtOption.IsSet)
                writer.WriteString("scheduledAt", createEmailCampaign.ScheduledAtOption.Value!.Value.ToString(ScheduledAtFormat));

            if (createEmailCampaign.SubjectOption.IsSet)
                writer.WriteString("subject", createEmailCampaign.Subject);

            if (createEmailCampaign.ReplyToOption.IsSet)
                writer.WriteString("replyTo", createEmailCampaign.ReplyTo);

            if (createEmailCampaign.ToFieldOption.IsSet)
                writer.WriteString("toField", createEmailCampaign.ToField);

            if (createEmailCampaign.RecipientsOption.IsSet)
            {
                writer.WritePropertyName("recipients");
                JsonSerializer.Serialize(writer, createEmailCampaign.Recipients, jsonSerializerOptions);
            }
            if (createEmailCampaign.AttachmentUrlOption.IsSet)
                writer.WriteString("attachmentUrl", createEmailCampaign.AttachmentUrl);

            if (createEmailCampaign.InlineImageActivationOption.IsSet)
                writer.WriteBoolean("inlineImageActivation", createEmailCampaign.InlineImageActivationOption.Value!.Value);

            if (createEmailCampaign.MirrorActiveOption.IsSet)
                writer.WriteBoolean("mirrorActive", createEmailCampaign.MirrorActiveOption.Value!.Value);

            if (createEmailCampaign.FooterOption.IsSet)
                writer.WriteString("footer", createEmailCampaign.Footer);

            if (createEmailCampaign.HeaderOption.IsSet)
                writer.WriteString("header", createEmailCampaign.Header);

            if (createEmailCampaign.UtmCampaignOption.IsSet)
                writer.WriteString("utmCampaign", createEmailCampaign.UtmCampaign);

            if (createEmailCampaign.ParamsOption.IsSet)
            {
                writer.WritePropertyName("params");
                JsonSerializer.Serialize(writer, createEmailCampaign.Params, jsonSerializerOptions);
            }
            if (createEmailCampaign.SendAtBestTimeOption.IsSet)
                writer.WriteBoolean("sendAtBestTime", createEmailCampaign.SendAtBestTimeOption.Value!.Value);

            if (createEmailCampaign.AbTestingOption.IsSet)
                writer.WriteBoolean("abTesting", createEmailCampaign.AbTestingOption.Value!.Value);

            if (createEmailCampaign.SubjectAOption.IsSet)
                writer.WriteString("subjectA", createEmailCampaign.SubjectA);

            if (createEmailCampaign.SubjectBOption.IsSet)
                writer.WriteString("subjectB", createEmailCampaign.SubjectB);

            if (createEmailCampaign.SplitRuleOption.IsSet)
                writer.WriteNumber("splitRule", createEmailCampaign.SplitRuleOption.Value!.Value);

            var winnerCriteriaRawValue = CreateEmailCampaign.WinnerCriteriaEnumToJsonValue(createEmailCampaign.WinnerCriteriaOption.Value!.Value);
            writer.WriteString("winnerCriteria", winnerCriteriaRawValue);
            if (createEmailCampaign.WinnerDelayOption.IsSet)
                writer.WriteNumber("winnerDelay", createEmailCampaign.WinnerDelayOption.Value!.Value);

            if (createEmailCampaign.IpWarmupEnableOption.IsSet)
                writer.WriteBoolean("ipWarmupEnable", createEmailCampaign.IpWarmupEnableOption.Value!.Value);

            if (createEmailCampaign.InitialQuotaOption.IsSet)
                writer.WriteNumber("initialQuota", createEmailCampaign.InitialQuotaOption.Value!.Value);

            if (createEmailCampaign.IncreaseRateOption.IsSet)
                writer.WriteNumber("increaseRate", createEmailCampaign.IncreaseRateOption.Value!.Value);
        }
    }
}
