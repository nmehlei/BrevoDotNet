// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetSmtpTemplateOverview
    /// </summary>
    public partial class GetSmtpTemplateOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmtpTemplateOverview" /> class.
        /// </summary>
        /// <param name="id">ID of the template</param>
        /// <param name="name">Name of the template</param>
        /// <param name="subject">Subject of the template</param>
        /// <param name="isActive">Status of template (true&#x3D;active, false&#x3D;inactive)</param>
        /// <param name="testSent">Status of test sending for the template (true&#x3D;test email has been sent, false&#x3D;test email has not been sent)</param>
        /// <param name="sender">sender</param>
        /// <param name="replyTo">Email defined as the \&quot;Reply to\&quot; for the template</param>
        /// <param name="toField">Customisation of the \&quot;to\&quot; field for the template</param>
        /// <param name="tag">Tag of the template</param>
        /// <param name="htmlContent">HTML content of the template</param>
        /// <param name="createdAt">Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="doiTemplate">It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.</param>
        [JsonConstructor]
        public GetSmtpTemplateOverview(long id, string name, string subject, bool isActive, bool testSent, GetSmtpTemplateOverviewSender sender, string replyTo, string toField, string tag, string htmlContent, DateTime createdAt, DateTime modifiedAt, Option<bool?> doiTemplate = default)
        {
            Id = id;
            Name = name;
            Subject = subject;
            IsActive = isActive;
            TestSent = testSent;
            Sender = sender;
            ReplyTo = replyTo;
            ToField = toField;
            Tag = tag;
            HtmlContent = htmlContent;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            DoiTemplateOption = doiTemplate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the template
        /// </summary>
        /// <value>ID of the template</value>
        /* <example>4</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the template
        /// </summary>
        /// <value>Name of the template</value>
        /* <example>Order Confirmation - EN</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Subject of the template
        /// </summary>
        /// <value>Subject of the template</value>
        /* <example>Thanks for your order !</example> */
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Status of template (true&#x3D;active, false&#x3D;inactive)
        /// </summary>
        /// <value>Status of template (true&#x3D;active, false&#x3D;inactive)</value>
        /* <example>true</example> */
        [JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        /// <summary>
        /// Status of test sending for the template (true&#x3D;test email has been sent, false&#x3D;test email has not been sent)
        /// </summary>
        /// <value>Status of test sending for the template (true&#x3D;test email has been sent, false&#x3D;test email has not been sent)</value>
        /* <example>true</example> */
        [JsonPropertyName("testSent")]
        public bool TestSent { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public GetSmtpTemplateOverviewSender Sender { get; set; }

        /// <summary>
        /// Email defined as the \&quot;Reply to\&quot; for the template
        /// </summary>
        /// <value>Email defined as the \&quot;Reply to\&quot; for the template</value>
        /* <example>replyto@domain.com</example> */
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Customisation of the \&quot;to\&quot; field for the template
        /// </summary>
        /// <value>Customisation of the \&quot;to\&quot; field for the template</value>
        /* <example>{FIRSTNAME} {LASTNAME}</example> */
        [JsonPropertyName("toField")]
        public string ToField { get; set; }

        /// <summary>
        /// Tag of the template
        /// </summary>
        /// <value>Tag of the template</value>
        /* <example>sports</example> */
        [JsonPropertyName("tag")]
        public string Tag { get; set; }

        /// <summary>
        /// HTML content of the template
        /// </summary>
        /// <value>HTML content of the template</value>
        /* <example>Your order nÂ°xxxxx has been confirmed. Thanks for your purchase.</example> */
        [JsonPropertyName("htmlContent")]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-12T12:30Z</example> */
        [JsonPropertyName("modifiedAt")]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Used to track the state of DoiTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoiTemplateOption { get; private set; }

        /// <summary>
        /// It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.
        /// </summary>
        /// <value>It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.</value>
        /* <example>false</example> */
        [JsonPropertyName("doiTemplate")]
        public bool? DoiTemplate { get { return this.DoiTemplateOption; } set { this.DoiTemplateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmtpTemplateOverview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  TestSent: ").Append(TestSent).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  DoiTemplate: ").Append(DoiTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSmtpTemplateOverview" />
    /// </summary>
    public class GetSmtpTemplateOverviewJsonConverter : JsonConverter<GetSmtpTemplateOverview>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedAt
        /// </summary>
        public static string ModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetSmtpTemplateOverview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSmtpTemplateOverview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<string?> subject = default;
            Option<bool?> isActive = default;
            Option<bool?> testSent = default;
            Option<GetSmtpTemplateOverviewSender?> sender = default;
            Option<string?> replyTo = default;
            Option<string?> toField = default;
            Option<string?> tag = default;
            Option<string?> htmlContent = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> modifiedAt = default;
            Option<bool?> doiTemplate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActive":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "testSent":
                            testSent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sender":
                            sender = new Option<GetSmtpTemplateOverviewSender?>(JsonSerializer.Deserialize<GetSmtpTemplateOverviewSender>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "replyTo":
                            replyTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toField":
                            toField = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlContent":
                            htmlContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "doiTemplate":
                            doiTemplate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(name));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(subject));

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(isActive));

            if (!testSent.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(testSent));

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(sender));

            if (!replyTo.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(replyTo));

            if (!toField.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(toField));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(tag));

            if (!htmlContent.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(htmlContent));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetSmtpTemplateOverview.", nameof(modifiedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (testSent.IsSet && testSent.Value == null)
                throw new ArgumentNullException(nameof(testSent), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (toField.IsSet && toField.Value == null)
                throw new ArgumentNullException(nameof(toField), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (htmlContent.IsSet && htmlContent.Value == null)
                throw new ArgumentNullException(nameof(htmlContent), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetSmtpTemplateOverview.");

            if (doiTemplate.IsSet && doiTemplate.Value == null)
                throw new ArgumentNullException(nameof(doiTemplate), "Property is not nullable for class GetSmtpTemplateOverview.");

            return new GetSmtpTemplateOverview(id.Value!.Value!, name.Value!, subject.Value!, isActive.Value!.Value!, testSent.Value!.Value!, sender.Value!, replyTo.Value!, toField.Value!, tag.Value!, htmlContent.Value!, createdAt.Value!.Value!, modifiedAt.Value!.Value!, doiTemplate);
        }

        /// <summary>
        /// Serializes a <see cref="GetSmtpTemplateOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmtpTemplateOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSmtpTemplateOverview getSmtpTemplateOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSmtpTemplateOverview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSmtpTemplateOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmtpTemplateOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSmtpTemplateOverview getSmtpTemplateOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSmtpTemplateOverview.Name == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.Name), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.Subject == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.Subject), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.Sender == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.Sender), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.ReplyTo == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.ReplyTo), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.ToField == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.ToField), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.Tag == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.Tag), "Property is required for class GetSmtpTemplateOverview.");

            if (getSmtpTemplateOverview.HtmlContent == null)
                throw new ArgumentNullException(nameof(getSmtpTemplateOverview.HtmlContent), "Property is required for class GetSmtpTemplateOverview.");

            writer.WriteNumber("id", getSmtpTemplateOverview.Id);

            writer.WriteString("name", getSmtpTemplateOverview.Name);

            writer.WriteString("subject", getSmtpTemplateOverview.Subject);

            writer.WriteBoolean("isActive", getSmtpTemplateOverview.IsActive);

            writer.WriteBoolean("testSent", getSmtpTemplateOverview.TestSent);

            writer.WritePropertyName("sender");
            JsonSerializer.Serialize(writer, getSmtpTemplateOverview.Sender, jsonSerializerOptions);
            writer.WriteString("replyTo", getSmtpTemplateOverview.ReplyTo);

            writer.WriteString("toField", getSmtpTemplateOverview.ToField);

            writer.WriteString("tag", getSmtpTemplateOverview.Tag);

            writer.WriteString("htmlContent", getSmtpTemplateOverview.HtmlContent);

            writer.WriteString("createdAt", getSmtpTemplateOverview.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("modifiedAt", getSmtpTemplateOverview.ModifiedAt.ToString(ModifiedAtFormat));

            if (getSmtpTemplateOverview.DoiTemplateOption.IsSet)
                writer.WriteBoolean("doiTemplate", getSmtpTemplateOverview.DoiTemplateOption.Value!.Value);
        }
    }
}
