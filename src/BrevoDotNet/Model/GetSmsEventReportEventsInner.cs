// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetSmsEventReportEventsInner
    /// </summary>
    public partial class GetSmsEventReportEventsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsEventReportEventsInner" /> class.
        /// </summary>
        /// <param name="phoneNumber">Phone number which has generated the event</param>
        /// <param name="date">UTC date-time on which the event has been generated</param>
        /// <param name="messageId">Message ID which generated the event</param>
        /// <param name="event">Event which occurred</param>
        /// <param name="reason">Reason of bounce (only available if the event is hardbounce or softbounce)</param>
        /// <param name="reply">reply</param>
        /// <param name="tag">Tag of the SMS which generated the event</param>
        [JsonConstructor]
        public GetSmsEventReportEventsInner(string phoneNumber, DateTime date, string messageId, EventEnum @event, Option<string?> reason = default, Option<string?> reply = default, Option<string?> tag = default)
        {
            PhoneNumber = phoneNumber;
            Date = date;
            MessageId = messageId;
            Event = @event;
            ReasonOption = reason;
            ReplyOption = reply;
            TagOption = tag;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Event which occurred
        /// </summary>
        /// <value>Event which occurred</value>
        public enum EventEnum
        {
            /// <summary>
            /// Enum Bounces for value: bounces
            /// </summary>
            Bounces = 1,

            /// <summary>
            /// Enum HardBounces for value: hardBounces
            /// </summary>
            HardBounces = 2,

            /// <summary>
            /// Enum SoftBounces for value: softBounces
            /// </summary>
            SoftBounces = 3,

            /// <summary>
            /// Enum Delivered for value: delivered
            /// </summary>
            Delivered = 4,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 5,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            Accepted = 6,

            /// <summary>
            /// Enum Unsubscription for value: unsubscription
            /// </summary>
            Unsubscription = 7,

            /// <summary>
            /// Enum Replies for value: replies
            /// </summary>
            Replies = 8,

            /// <summary>
            /// Enum Blocked for value: blocked
            /// </summary>
            Blocked = 9,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            Rejected = 10
        }

        /// <summary>
        /// Returns a <see cref="EventEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventEnum EventEnumFromString(string value)
        {
            if (value.Equals("bounces"))
                return EventEnum.Bounces;

            if (value.Equals("hardBounces"))
                return EventEnum.HardBounces;

            if (value.Equals("softBounces"))
                return EventEnum.SoftBounces;

            if (value.Equals("delivered"))
                return EventEnum.Delivered;

            if (value.Equals("sent"))
                return EventEnum.Sent;

            if (value.Equals("accepted"))
                return EventEnum.Accepted;

            if (value.Equals("unsubscription"))
                return EventEnum.Unsubscription;

            if (value.Equals("replies"))
                return EventEnum.Replies;

            if (value.Equals("blocked"))
                return EventEnum.Blocked;

            if (value.Equals("rejected"))
                return EventEnum.Rejected;

            throw new NotImplementedException($"Could not convert value to type EventEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventEnum? EventEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bounces"))
                return EventEnum.Bounces;

            if (value.Equals("hardBounces"))
                return EventEnum.HardBounces;

            if (value.Equals("softBounces"))
                return EventEnum.SoftBounces;

            if (value.Equals("delivered"))
                return EventEnum.Delivered;

            if (value.Equals("sent"))
                return EventEnum.Sent;

            if (value.Equals("accepted"))
                return EventEnum.Accepted;

            if (value.Equals("unsubscription"))
                return EventEnum.Unsubscription;

            if (value.Equals("replies"))
                return EventEnum.Replies;

            if (value.Equals("blocked"))
                return EventEnum.Blocked;

            if (value.Equals("rejected"))
                return EventEnum.Rejected;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventEnumToJsonValue(EventEnum value)
        {
            if (value == EventEnum.Bounces)
                return "bounces";

            if (value == EventEnum.HardBounces)
                return "hardBounces";

            if (value == EventEnum.SoftBounces)
                return "softBounces";

            if (value == EventEnum.Delivered)
                return "delivered";

            if (value == EventEnum.Sent)
                return "sent";

            if (value == EventEnum.Accepted)
                return "accepted";

            if (value == EventEnum.Unsubscription)
                return "unsubscription";

            if (value == EventEnum.Replies)
                return "replies";

            if (value == EventEnum.Blocked)
                return "blocked";

            if (value == EventEnum.Rejected)
                return "rejected";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Event which occurred
        /// </summary>
        /// <value>Event which occurred</value>
        /* <example>accepted</example> */
        [JsonPropertyName("event")]
        public EventEnum Event { get; set; }

        /// <summary>
        /// Phone number which has generated the event
        /// </summary>
        /// <value>Phone number which has generated the event</value>
        /* <example>00189001094</example> */
        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// UTC date-time on which the event has been generated
        /// </summary>
        /// <value>UTC date-time on which the event has been generated</value>
        /* <example>2017-03-12T12:30Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Message ID which generated the event
        /// </summary>
        /// <value>Message ID which generated the event</value>
        /* <example>1472640582425378</example> */
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// Reason of bounce (only available if the event is hardbounce or softbounce)
        /// </summary>
        /// <value>Reason of bounce (only available if the event is hardbounce or softbounce)</value>
        /* <example>Message is undeliverable due to an incorrect / invalid / blacklisted / permanently barred MSISDN for this operator</example> */
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reply
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reply
        /// </summary>
        [JsonPropertyName("reply")]
        public string? Reply { get { return this.ReplyOption; } set { this.ReplyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Tag of the SMS which generated the event
        /// </summary>
        /// <value>Tag of the SMS which generated the event</value>
        /* <example>CabWaiting</example> */
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmsEventReportEventsInner {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Reply: ").Append(Reply).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSmsEventReportEventsInner" />
    /// </summary>
    public class GetSmsEventReportEventsInnerJsonConverter : JsonConverter<GetSmsEventReportEventsInner>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetSmsEventReportEventsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSmsEventReportEventsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> phoneNumber = default;
            Option<DateTime?> date = default;
            Option<string?> messageId = default;
            Option<GetSmsEventReportEventsInner.EventEnum?> varEvent = default;
            Option<string?> reason = default;
            Option<string?> reply = default;
            Option<string?> tag = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "phoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "messageId":
                            messageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event":
                            string? varEventRawValue = utf8JsonReader.GetString();
                            if (varEventRawValue != null)
                                varEvent = new Option<GetSmsEventReportEventsInner.EventEnum?>(GetSmsEventReportEventsInner.EventEnumFromStringOrDefault(varEventRawValue));
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reply":
                            reply = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!phoneNumber.IsSet)
                throw new ArgumentException("Property is required for class GetSmsEventReportEventsInner.", nameof(phoneNumber));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class GetSmsEventReportEventsInner.", nameof(date));

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class GetSmsEventReportEventsInner.", nameof(messageId));

            if (!varEvent.IsSet)
                throw new ArgumentException("Property is required for class GetSmsEventReportEventsInner.", nameof(varEvent));

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (reply.IsSet && reply.Value == null)
                throw new ArgumentNullException(nameof(reply), "Property is not nullable for class GetSmsEventReportEventsInner.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class GetSmsEventReportEventsInner.");

            return new GetSmsEventReportEventsInner(phoneNumber.Value!, date.Value!.Value!, messageId.Value!, varEvent.Value!.Value!, reason, reply, tag);
        }

        /// <summary>
        /// Serializes a <see cref="GetSmsEventReportEventsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsEventReportEventsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSmsEventReportEventsInner getSmsEventReportEventsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSmsEventReportEventsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSmsEventReportEventsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsEventReportEventsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSmsEventReportEventsInner getSmsEventReportEventsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSmsEventReportEventsInner.PhoneNumber == null)
                throw new ArgumentNullException(nameof(getSmsEventReportEventsInner.PhoneNumber), "Property is required for class GetSmsEventReportEventsInner.");

            if (getSmsEventReportEventsInner.MessageId == null)
                throw new ArgumentNullException(nameof(getSmsEventReportEventsInner.MessageId), "Property is required for class GetSmsEventReportEventsInner.");

            if (getSmsEventReportEventsInner.ReasonOption.IsSet && getSmsEventReportEventsInner.Reason == null)
                throw new ArgumentNullException(nameof(getSmsEventReportEventsInner.Reason), "Property is required for class GetSmsEventReportEventsInner.");

            if (getSmsEventReportEventsInner.ReplyOption.IsSet && getSmsEventReportEventsInner.Reply == null)
                throw new ArgumentNullException(nameof(getSmsEventReportEventsInner.Reply), "Property is required for class GetSmsEventReportEventsInner.");

            if (getSmsEventReportEventsInner.TagOption.IsSet && getSmsEventReportEventsInner.Tag == null)
                throw new ArgumentNullException(nameof(getSmsEventReportEventsInner.Tag), "Property is required for class GetSmsEventReportEventsInner.");

            writer.WriteString("phoneNumber", getSmsEventReportEventsInner.PhoneNumber);

            writer.WriteString("date", getSmsEventReportEventsInner.Date.ToString(DateFormat));

            writer.WriteString("messageId", getSmsEventReportEventsInner.MessageId);

            var varEventRawValue = GetSmsEventReportEventsInner.EventEnumToJsonValue(getSmsEventReportEventsInner.Event);
            writer.WriteString("event", varEventRawValue);
            if (getSmsEventReportEventsInner.ReasonOption.IsSet)
                writer.WriteString("reason", getSmsEventReportEventsInner.Reason);

            if (getSmsEventReportEventsInner.ReplyOption.IsSet)
                writer.WriteString("reply", getSmsEventReportEventsInner.Reply);

            if (getSmsEventReportEventsInner.TagOption.IsSet)
                writer.WriteString("tag", getSmsEventReportEventsInner.Tag);
        }
    }
}
