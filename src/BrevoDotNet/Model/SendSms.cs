// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// SendSms
    /// </summary>
    public partial class SendSms : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSms" /> class.
        /// </summary>
        /// <param name="reference">reference</param>
        /// <param name="messageId">messageId</param>
        /// <param name="smsCount">Count of SMS&#39;s to send multiple text messages</param>
        /// <param name="usedCredits">SMS credits used per text message</param>
        /// <param name="remainingCredits">Remaining SMS credits of the user</param>
        [JsonConstructor]
        public SendSms(string reference, long messageId, Option<long?> smsCount = default, Option<float?> usedCredits = default, Option<float?> remainingCredits = default)
        {
            Reference = reference;
            MessageId = messageId;
            SmsCountOption = smsCount;
            UsedCreditsOption = usedCredits;
            RemainingCreditsOption = remainingCredits;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        /* <example>ab1cde2fgh3i4jklmno</example> */
        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        /* <example>1511882900176220</example> */
        [JsonPropertyName("messageId")]
        public long MessageId { get; set; }

        /// <summary>
        /// Used to track the state of SmsCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SmsCountOption { get; private set; }

        /// <summary>
        /// Count of SMS&#39;s to send multiple text messages
        /// </summary>
        /// <value>Count of SMS&#39;s to send multiple text messages</value>
        /* <example>2</example> */
        [JsonPropertyName("smsCount")]
        public long? SmsCount { get { return this.SmsCountOption; } set { this.SmsCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsedCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> UsedCreditsOption { get; private set; }

        /// <summary>
        /// SMS credits used per text message
        /// </summary>
        /// <value>SMS credits used per text message</value>
        /* <example>0.7</example> */
        [JsonPropertyName("usedCredits")]
        public float? UsedCredits { get { return this.UsedCreditsOption; } set { this.UsedCreditsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemainingCredits
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> RemainingCreditsOption { get; private set; }

        /// <summary>
        /// Remaining SMS credits of the user
        /// </summary>
        /// <value>Remaining SMS credits of the user</value>
        /* <example>82.85</example> */
        [JsonPropertyName("remainingCredits")]
        public float? RemainingCredits { get { return this.RemainingCreditsOption; } set { this.RemainingCreditsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendSms {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  SmsCount: ").Append(SmsCount).Append("\n");
            sb.Append("  UsedCredits: ").Append(UsedCredits).Append("\n");
            sb.Append("  RemainingCredits: ").Append(RemainingCredits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendSms" />
    /// </summary>
    public class SendSmsJsonConverter : JsonConverter<SendSms>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendSms" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendSms Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> reference = default;
            Option<long?> messageId = default;
            Option<long?> smsCount = default;
            Option<float?> usedCredits = default;
            Option<float?> remainingCredits = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "reference":
                            reference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "messageId":
                            messageId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "smsCount":
                            smsCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "usedCredits":
                            usedCredits = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "remainingCredits":
                            remainingCredits = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!reference.IsSet)
                throw new ArgumentException("Property is required for class SendSms.", nameof(reference));

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class SendSms.", nameof(messageId));

            if (reference.IsSet && reference.Value == null)
                throw new ArgumentNullException(nameof(reference), "Property is not nullable for class SendSms.");

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class SendSms.");

            if (smsCount.IsSet && smsCount.Value == null)
                throw new ArgumentNullException(nameof(smsCount), "Property is not nullable for class SendSms.");

            if (usedCredits.IsSet && usedCredits.Value == null)
                throw new ArgumentNullException(nameof(usedCredits), "Property is not nullable for class SendSms.");

            if (remainingCredits.IsSet && remainingCredits.Value == null)
                throw new ArgumentNullException(nameof(remainingCredits), "Property is not nullable for class SendSms.");

            return new SendSms(reference.Value!, messageId.Value!.Value!, smsCount, usedCredits, remainingCredits);
        }

        /// <summary>
        /// Serializes a <see cref="SendSms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendSms sendSms, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendSms, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendSms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendSms sendSms, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendSms.Reference == null)
                throw new ArgumentNullException(nameof(sendSms.Reference), "Property is required for class SendSms.");

            writer.WriteString("reference", sendSms.Reference);

            writer.WriteNumber("messageId", sendSms.MessageId);

            if (sendSms.SmsCountOption.IsSet)
                writer.WriteNumber("smsCount", sendSms.SmsCountOption.Value!.Value);

            if (sendSms.UsedCreditsOption.IsSet)
                writer.WriteNumber("usedCredits", sendSms.UsedCreditsOption.Value!.Value);

            if (sendSms.RemainingCreditsOption.IsSet)
                writer.WriteNumber("remainingCredits", sendSms.RemainingCreditsOption.Value!.Value);
        }
    }
}
