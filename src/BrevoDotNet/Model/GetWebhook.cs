// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetWebhook
    /// </summary>
    public partial class GetWebhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWebhook" /> class.
        /// </summary>
        /// <param name="url">URL of the webhook</param>
        /// <param name="id">ID of the webhook</param>
        /// <param name="description">Description of the webhook</param>
        /// <param name="events">events</param>
        /// <param name="type">Type of webhook (marketing or transac)</param>
        /// <param name="createdAt">Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        [JsonConstructor]
        public GetWebhook(string url, long id, string description, List<string> events, TypeEnum type, DateTime createdAt, DateTime modifiedAt)
        {
            Url = url;
            Id = id;
            Description = description;
            Events = events;
            Type = type;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of webhook (marketing or transac)
        /// </summary>
        /// <value>Type of webhook (marketing or transac)</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Marketing for value: marketing
            /// </summary>
            Marketing = 1,

            /// <summary>
            /// Enum Transac for value: transac
            /// </summary>
            Transac = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("marketing"))
                return TypeEnum.Marketing;

            if (value.Equals("transac"))
                return TypeEnum.Transac;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("marketing"))
                return TypeEnum.Marketing;

            if (value.Equals("transac"))
                return TypeEnum.Transac;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Marketing)
                return "marketing";

            if (value == TypeEnum.Transac)
                return "transac";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of webhook (marketing or transac)
        /// </summary>
        /// <value>Type of webhook (marketing or transac)</value>
        /* <example>marketing</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// URL of the webhook
        /// </summary>
        /// <value>URL of the webhook</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// ID of the webhook
        /// </summary>
        /// <value>ID of the webhook</value>
        /* <example>654</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Description of the webhook
        /// </summary>
        /// <value>Description of the webhook</value>
        /* <example>Webhook triggered on campaign openings</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [JsonPropertyName("events")]
        public List<string> Events { get; set; }

        /// <summary>
        /// Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2016-12-01T12:50Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-12T13:15Z</example> */
        [JsonPropertyName("modifiedAt")]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWebhook {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetWebhook" />
    /// </summary>
    public class GetWebhookJsonConverter : JsonConverter<GetWebhook>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedAt
        /// </summary>
        public static string ModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetWebhook" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetWebhook Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<long?> id = default;
            Option<string?> description = default;
            Option<List<string>?> events = default;
            Option<GetWebhook.TypeEnum?> type = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> modifiedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "events":
                            events = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetWebhook.TypeEnum?>(GetWebhook.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(url));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(id));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(description));

            if (!events.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(events));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(type));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetWebhook.", nameof(modifiedAt));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class GetWebhook.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetWebhook.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class GetWebhook.");

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class GetWebhook.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetWebhook.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetWebhook.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetWebhook.");

            return new GetWebhook(url.Value!, id.Value!.Value!, description.Value!, events.Value!, type.Value!.Value!, createdAt.Value!.Value!, modifiedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetWebhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWebhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetWebhook getWebhook, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getWebhook, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetWebhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWebhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetWebhook getWebhook, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getWebhook.Url == null)
                throw new ArgumentNullException(nameof(getWebhook.Url), "Property is required for class GetWebhook.");

            if (getWebhook.Description == null)
                throw new ArgumentNullException(nameof(getWebhook.Description), "Property is required for class GetWebhook.");

            if (getWebhook.Events == null)
                throw new ArgumentNullException(nameof(getWebhook.Events), "Property is required for class GetWebhook.");

            writer.WriteString("url", getWebhook.Url);

            writer.WriteNumber("id", getWebhook.Id);

            writer.WriteString("description", getWebhook.Description);

            writer.WritePropertyName("events");
            JsonSerializer.Serialize(writer, getWebhook.Events, jsonSerializerOptions);
            var typeRawValue = GetWebhook.TypeEnumToJsonValue(getWebhook.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("createdAt", getWebhook.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("modifiedAt", getWebhook.ModifiedAt.ToString(ModifiedAtFormat));
        }
    }
}
