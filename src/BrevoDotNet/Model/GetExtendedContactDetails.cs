// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetExtendedContactDetails
    /// </summary>
    public partial class GetExtendedContactDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedContactDetails" /> class.
        /// </summary>
        /// <param name="id">ID of the contact for which you requested the details</param>
        /// <param name="emailBlacklisted">Blacklist status for email campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)</param>
        /// <param name="smsBlacklisted">Blacklist status for SMS campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)</param>
        /// <param name="createdAt">Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="listIds">listIds</param>
        /// <param name="attributes">Set of attributes of the contact</param>
        /// <param name="statistics">statistics</param>
        /// <param name="email">Email address of the contact for which you requested the details</param>
        /// <param name="listUnsubscribed">listUnsubscribed</param>
        [JsonConstructor]
        public GetExtendedContactDetails(long id, bool emailBlacklisted, bool smsBlacklisted, DateTime createdAt, DateTime modifiedAt, List<long> listIds, Object attributes, GetExtendedContactDetailsAllOfStatistics statistics, Option<string?> email = default, Option<List<long>?> listUnsubscribed = default)
        {
            Id = id;
            EmailBlacklisted = emailBlacklisted;
            SmsBlacklisted = smsBlacklisted;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            ListIds = listIds;
            Attributes = attributes;
            Statistics = statistics;
            EmailOption = email;
            ListUnsubscribedOption = listUnsubscribed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the contact for which you requested the details
        /// </summary>
        /// <value>ID of the contact for which you requested the details</value>
        /* <example>32</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Blacklist status for email campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)
        /// </summary>
        /// <value>Blacklist status for email campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)</value>
        /* <example>false</example> */
        [JsonPropertyName("emailBlacklisted")]
        public bool EmailBlacklisted { get; set; }

        /// <summary>
        /// Blacklist status for SMS campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)
        /// </summary>
        /// <value>Blacklist status for SMS campaigns (true&#x3D;blacklisted, false&#x3D;not blacklisted)</value>
        /* <example>true</example> */
        [JsonPropertyName("smsBlacklisted")]
        public bool SmsBlacklisted { get; set; }

        /// <summary>
        /// Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-12T12:30Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-12T12:30Z</example> */
        [JsonPropertyName("modifiedAt")]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets ListIds
        /// </summary>
        [JsonPropertyName("listIds")]
        public List<long> ListIds { get; set; }

        /// <summary>
        /// Set of attributes of the contact
        /// </summary>
        /// <value>Set of attributes of the contact</value>
        /* <example>{name&#x3D;Joe, email&#x3D;joe@example.com}</example> */
        [JsonPropertyName("attributes")]
        public Object Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [JsonPropertyName("statistics")]
        public GetExtendedContactDetailsAllOfStatistics Statistics { get; set; }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Email address of the contact for which you requested the details
        /// </summary>
        /// <value>Email address of the contact for which you requested the details</value>
        /* <example>john.smith@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of ListUnsubscribed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ListUnsubscribedOption { get; private set; }

        /// <summary>
        /// Gets or Sets ListUnsubscribed
        /// </summary>
        [JsonPropertyName("listUnsubscribed")]
        public List<long>? ListUnsubscribed { get { return this.ListUnsubscribedOption; } set { this.ListUnsubscribedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExtendedContactDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmailBlacklisted: ").Append(EmailBlacklisted).Append("\n");
            sb.Append("  SmsBlacklisted: ").Append(SmsBlacklisted).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ListUnsubscribed: ").Append(ListUnsubscribed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetExtendedContactDetails" />
    /// </summary>
    public class GetExtendedContactDetailsJsonConverter : JsonConverter<GetExtendedContactDetails>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedAt
        /// </summary>
        public static string ModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetExtendedContactDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetExtendedContactDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<bool?> emailBlacklisted = default;
            Option<bool?> smsBlacklisted = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> modifiedAt = default;
            Option<List<long>?> listIds = default;
            Option<Object?> attributes = default;
            Option<GetExtendedContactDetailsAllOfStatistics?> statistics = default;
            Option<string?> email = default;
            Option<List<long>?> listUnsubscribed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "emailBlacklisted":
                            emailBlacklisted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smsBlacklisted":
                            smsBlacklisted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "listIds":
                            listIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attributes":
                            attributes = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "statistics":
                            statistics = new Option<GetExtendedContactDetailsAllOfStatistics?>(JsonSerializer.Deserialize<GetExtendedContactDetailsAllOfStatistics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "listUnsubscribed":
                            listUnsubscribed = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(id));

            if (!emailBlacklisted.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(emailBlacklisted));

            if (!smsBlacklisted.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(smsBlacklisted));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(modifiedAt));

            if (!listIds.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(listIds));

            if (!attributes.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(attributes));

            if (!statistics.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedContactDetails.", nameof(statistics));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetExtendedContactDetails.");

            if (emailBlacklisted.IsSet && emailBlacklisted.Value == null)
                throw new ArgumentNullException(nameof(emailBlacklisted), "Property is not nullable for class GetExtendedContactDetails.");

            if (smsBlacklisted.IsSet && smsBlacklisted.Value == null)
                throw new ArgumentNullException(nameof(smsBlacklisted), "Property is not nullable for class GetExtendedContactDetails.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetExtendedContactDetails.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetExtendedContactDetails.");

            if (listIds.IsSet && listIds.Value == null)
                throw new ArgumentNullException(nameof(listIds), "Property is not nullable for class GetExtendedContactDetails.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class GetExtendedContactDetails.");

            if (statistics.IsSet && statistics.Value == null)
                throw new ArgumentNullException(nameof(statistics), "Property is not nullable for class GetExtendedContactDetails.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class GetExtendedContactDetails.");

            if (listUnsubscribed.IsSet && listUnsubscribed.Value == null)
                throw new ArgumentNullException(nameof(listUnsubscribed), "Property is not nullable for class GetExtendedContactDetails.");

            return new GetExtendedContactDetails(id.Value!.Value!, emailBlacklisted.Value!.Value!, smsBlacklisted.Value!.Value!, createdAt.Value!.Value!, modifiedAt.Value!.Value!, listIds.Value!, attributes.Value!, statistics.Value!, email, listUnsubscribed);
        }

        /// <summary>
        /// Serializes a <see cref="GetExtendedContactDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedContactDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetExtendedContactDetails getExtendedContactDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getExtendedContactDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetExtendedContactDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedContactDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetExtendedContactDetails getExtendedContactDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getExtendedContactDetails.ListIds == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetails.ListIds), "Property is required for class GetExtendedContactDetails.");

            if (getExtendedContactDetails.Attributes == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetails.Attributes), "Property is required for class GetExtendedContactDetails.");

            if (getExtendedContactDetails.Statistics == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetails.Statistics), "Property is required for class GetExtendedContactDetails.");

            if (getExtendedContactDetails.EmailOption.IsSet && getExtendedContactDetails.Email == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetails.Email), "Property is required for class GetExtendedContactDetails.");

            if (getExtendedContactDetails.ListUnsubscribedOption.IsSet && getExtendedContactDetails.ListUnsubscribed == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetails.ListUnsubscribed), "Property is required for class GetExtendedContactDetails.");

            writer.WriteNumber("id", getExtendedContactDetails.Id);

            writer.WriteBoolean("emailBlacklisted", getExtendedContactDetails.EmailBlacklisted);

            writer.WriteBoolean("smsBlacklisted", getExtendedContactDetails.SmsBlacklisted);

            writer.WriteString("createdAt", getExtendedContactDetails.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("modifiedAt", getExtendedContactDetails.ModifiedAt.ToString(ModifiedAtFormat));

            writer.WritePropertyName("listIds");
            JsonSerializer.Serialize(writer, getExtendedContactDetails.ListIds, jsonSerializerOptions);
            writer.WritePropertyName("attributes");
            JsonSerializer.Serialize(writer, getExtendedContactDetails.Attributes, jsonSerializerOptions);
            writer.WritePropertyName("statistics");
            JsonSerializer.Serialize(writer, getExtendedContactDetails.Statistics, jsonSerializerOptions);
            if (getExtendedContactDetails.EmailOption.IsSet)
                writer.WriteString("email", getExtendedContactDetails.Email);

            if (getExtendedContactDetails.ListUnsubscribedOption.IsSet)
            {
                writer.WritePropertyName("listUnsubscribed");
                JsonSerializer.Serialize(writer, getExtendedContactDetails.ListUnsubscribed, jsonSerializerOptions);
            }
        }
    }
}
