// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetTransacEmailContent
    /// </summary>
    public partial class GetTransacEmailContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransacEmailContent" /> class.
        /// </summary>
        /// <param name="email">Email address to which transactional email has been sent</param>
        /// <param name="subject">Subject of the sent email</param>
        /// <param name="date">Date on which transactional email was sent</param>
        /// <param name="events">Series of events which occurred on the transactional email</param>
        /// <param name="body">Actual content of the transactional email that has been sent</param>
        /// <param name="attachmentCount">Count of the attachments that were sent in the email</param>
        /// <param name="templateId">Id of the template</param>
        [JsonConstructor]
        public GetTransacEmailContent(string email, string subject, DateTime date, List<GetTransacEmailContentEventsInner> events, string body, long attachmentCount, Option<long?> templateId = default)
        {
            Email = email;
            Subject = subject;
            Date = date;
            Events = events;
            Body = body;
            AttachmentCount = attachmentCount;
            TemplateIdOption = templateId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Email address to which transactional email has been sent
        /// </summary>
        /// <value>Email address to which transactional email has been sent</value>
        /* <example>abc@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Subject of the sent email
        /// </summary>
        /// <value>Subject of the sent email</value>
        /* <example>Summer Camp</example> */
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Date on which transactional email was sent
        /// </summary>
        /// <value>Date on which transactional email was sent</value>
        /* <example>2017-03-12T12:30Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Series of events which occurred on the transactional email
        /// </summary>
        /// <value>Series of events which occurred on the transactional email</value>
        [JsonPropertyName("events")]
        public List<GetTransacEmailContentEventsInner> Events { get; set; }

        /// <summary>
        /// Actual content of the transactional email that has been sent
        /// </summary>
        /// <value>Actual content of the transactional email that has been sent</value>
        /* <example>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Greetings from the team&lt;/h1&gt; &lt;p&gt;This is the actual html content sent&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</example> */
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// Count of the attachments that were sent in the email
        /// </summary>
        /// <value>Count of the attachments that were sent in the email</value>
        /* <example>2</example> */
        [JsonPropertyName("attachmentCount")]
        public long AttachmentCount { get; set; }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Id of the template
        /// </summary>
        /// <value>Id of the template</value>
        /* <example>2</example> */
        [JsonPropertyName("templateId")]
        public long? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTransacEmailContent {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTransacEmailContent" />
    /// </summary>
    public class GetTransacEmailContentJsonConverter : JsonConverter<GetTransacEmailContent>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetTransacEmailContent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTransacEmailContent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> subject = default;
            Option<DateTime?> date = default;
            Option<List<GetTransacEmailContentEventsInner>?> events = default;
            Option<string?> body = default;
            Option<long?> attachmentCount = default;
            Option<long?> templateId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "events":
                            events = new Option<List<GetTransacEmailContentEventsInner>?>(JsonSerializer.Deserialize<List<GetTransacEmailContentEventsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachmentCount":
                            attachmentCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "templateId":
                            templateId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(email));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(subject));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(date));

            if (!events.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(events));

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(body));

            if (!attachmentCount.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailContent.", nameof(attachmentCount));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class GetTransacEmailContent.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class GetTransacEmailContent.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class GetTransacEmailContent.");

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class GetTransacEmailContent.");

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class GetTransacEmailContent.");

            if (attachmentCount.IsSet && attachmentCount.Value == null)
                throw new ArgumentNullException(nameof(attachmentCount), "Property is not nullable for class GetTransacEmailContent.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class GetTransacEmailContent.");

            return new GetTransacEmailContent(email.Value!, subject.Value!, date.Value!.Value!, events.Value!, body.Value!, attachmentCount.Value!.Value!, templateId);
        }

        /// <summary>
        /// Serializes a <see cref="GetTransacEmailContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransacEmailContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTransacEmailContent getTransacEmailContent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTransacEmailContent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTransacEmailContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransacEmailContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTransacEmailContent getTransacEmailContent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTransacEmailContent.Email == null)
                throw new ArgumentNullException(nameof(getTransacEmailContent.Email), "Property is required for class GetTransacEmailContent.");

            if (getTransacEmailContent.Subject == null)
                throw new ArgumentNullException(nameof(getTransacEmailContent.Subject), "Property is required for class GetTransacEmailContent.");

            if (getTransacEmailContent.Events == null)
                throw new ArgumentNullException(nameof(getTransacEmailContent.Events), "Property is required for class GetTransacEmailContent.");

            if (getTransacEmailContent.Body == null)
                throw new ArgumentNullException(nameof(getTransacEmailContent.Body), "Property is required for class GetTransacEmailContent.");

            writer.WriteString("email", getTransacEmailContent.Email);

            writer.WriteString("subject", getTransacEmailContent.Subject);

            writer.WriteString("date", getTransacEmailContent.Date.ToString(DateFormat));

            writer.WritePropertyName("events");
            JsonSerializer.Serialize(writer, getTransacEmailContent.Events, jsonSerializerOptions);
            writer.WriteString("body", getTransacEmailContent.Body);

            writer.WriteNumber("attachmentCount", getTransacEmailContent.AttachmentCount);

            if (getTransacEmailContent.TemplateIdOption.IsSet)
                writer.WriteNumber("templateId", getTransacEmailContent.TemplateIdOption.Value!.Value);
        }
    }
}
