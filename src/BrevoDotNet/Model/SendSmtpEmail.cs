// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// SendSmtpEmail
    /// </summary>
    public partial class SendSmtpEmail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSmtpEmail" /> class.
        /// </summary>
        /// <param name="to">List of email addresses and names (optional) of the recipients. For example, [{\&quot;name\&quot;:\&quot;Jimmy\&quot;, \&quot;email\&quot;:\&quot;jimmy98@example.com\&quot;}, {\&quot;name\&quot;:\&quot;Joe\&quot;, \&quot;email\&quot;:\&quot;joe@example.com\&quot;}]</param>
        /// <param name="sender">sender</param>
        /// <param name="bcc">List of email addresses and names (optional) of the recipients in bcc</param>
        /// <param name="cc">List of email addresses and names (optional) of the recipients in cc</param>
        /// <param name="htmlContent">HTML body of the message ( Mandatory if &#39;templateId&#39; is not passed, ignored if &#39;templateId&#39; is passed )</param>
        /// <param name="textContent">Plain Text body of the message ( Ignored if &#39;templateId&#39; is passed )</param>
        /// <param name="subject">Subject of the message. Mandatory if &#39;templateId&#39; is not passed</param>
        /// <param name="replyTo">replyTo</param>
        /// <param name="attachment">Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, &#x60;[{\&quot;url\&quot;:\&quot;https://attachment.domain.com/myAttachmentFromUrl.jpg\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromUrl.jpg\&quot;}, {\&quot;content\&quot;:\&quot;base64 example content\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromBase64.jpg\&quot;}]&#x60;. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If &#39;templateId&#39; is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then &#39;attachment&#39; is ignored )</param>
        /// <param name="headers">Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, &#x60;{\&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;, \&quot;X-Mailin-custom\&quot;:\&quot;some_custom_header\&quot;, \&quot;idempotencyKey\&quot;:\&quot;abc-123\&quot;}&#x60;.</param>
        /// <param name="templateId">Id of the template</param>
        /// <param name="params">Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. It&#39;s considered only if template is in New Template Language format.</param>
        /// <param name="tags">Tag your emails to find them more easily</param>
        [JsonConstructor]
        public SendSmtpEmail(List<SendSmtpEmailToInner> to, Option<SendSmtpEmailSender?> sender = default, Option<List<SendSmtpEmailBccInner>?> bcc = default, Option<List<SendSmtpEmailCcInner>?> cc = default, Option<string?> htmlContent = default, Option<string?> textContent = default, Option<string?> subject = default, Option<SendSmtpEmailReplyTo?> replyTo = default, Option<List<SendSmtpEmailAttachmentInner>?> attachment = default, Option<Object?> headers = default, Option<long?> templateId = default, Option<Object?> @params = default, Option<List<string>?> tags = default)
        {
            To = to;
            SenderOption = sender;
            BccOption = bcc;
            CcOption = cc;
            HtmlContentOption = htmlContent;
            TextContentOption = textContent;
            SubjectOption = subject;
            ReplyToOption = replyTo;
            AttachmentOption = attachment;
            HeadersOption = headers;
            TemplateIdOption = templateId;
            ParamsOption = @params;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// List of email addresses and names (optional) of the recipients. For example, [{\&quot;name\&quot;:\&quot;Jimmy\&quot;, \&quot;email\&quot;:\&quot;jimmy98@example.com\&quot;}, {\&quot;name\&quot;:\&quot;Joe\&quot;, \&quot;email\&quot;:\&quot;joe@example.com\&quot;}]
        /// </summary>
        /// <value>List of email addresses and names (optional) of the recipients. For example, [{\&quot;name\&quot;:\&quot;Jimmy\&quot;, \&quot;email\&quot;:\&quot;jimmy98@example.com\&quot;}, {\&quot;name\&quot;:\&quot;Joe\&quot;, \&quot;email\&quot;:\&quot;joe@example.com\&quot;}]</value>
        [JsonPropertyName("to")]
        public List<SendSmtpEmailToInner> To { get; set; }

        /// <summary>
        /// Used to track the state of Sender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SendSmtpEmailSender?> SenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public SendSmtpEmailSender? Sender { get { return this.SenderOption; } set { this.SenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bcc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SendSmtpEmailBccInner>?> BccOption { get; private set; }

        /// <summary>
        /// List of email addresses and names (optional) of the recipients in bcc
        /// </summary>
        /// <value>List of email addresses and names (optional) of the recipients in bcc</value>
        [JsonPropertyName("bcc")]
        public List<SendSmtpEmailBccInner>? Bcc { get { return this.BccOption; } set { this.BccOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SendSmtpEmailCcInner>?> CcOption { get; private set; }

        /// <summary>
        /// List of email addresses and names (optional) of the recipients in cc
        /// </summary>
        /// <value>List of email addresses and names (optional) of the recipients in cc</value>
        [JsonPropertyName("cc")]
        public List<SendSmtpEmailCcInner>? Cc { get { return this.CcOption; } set { this.CcOption = new(value); } }

        /// <summary>
        /// Used to track the state of HtmlContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HtmlContentOption { get; private set; }

        /// <summary>
        /// HTML body of the message ( Mandatory if &#39;templateId&#39; is not passed, ignored if &#39;templateId&#39; is passed )
        /// </summary>
        /// <value>HTML body of the message ( Mandatory if &#39;templateId&#39; is not passed, ignored if &#39;templateId&#39; is passed )</value>
        /* <example>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Confirm you email&lt;/h1&gt; &lt;p&gt;Please confirm your email address by clicking on the link below&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</example> */
        [JsonPropertyName("htmlContent")]
        public string? HtmlContent { get { return this.HtmlContentOption; } set { this.HtmlContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of TextContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextContentOption { get; private set; }

        /// <summary>
        /// Plain Text body of the message ( Ignored if &#39;templateId&#39; is passed )
        /// </summary>
        /// <value>Plain Text body of the message ( Ignored if &#39;templateId&#39; is passed )</value>
        /* <example>Please confirm your email address by clicking on the link https://text.domain.com</example> */
        [JsonPropertyName("textContent")]
        public string? TextContent { get { return this.TextContentOption; } set { this.TextContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject of the message. Mandatory if &#39;templateId&#39; is not passed
        /// </summary>
        /// <value>Subject of the message. Mandatory if &#39;templateId&#39; is not passed</value>
        /* <example>Login Email confirmation</example> */
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SendSmtpEmailReplyTo?> ReplyToOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [JsonPropertyName("replyTo")]
        public SendSmtpEmailReplyTo? ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SendSmtpEmailAttachmentInner>?> AttachmentOption { get; private set; }

        /// <summary>
        /// Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, &#x60;[{\&quot;url\&quot;:\&quot;https://attachment.domain.com/myAttachmentFromUrl.jpg\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromUrl.jpg\&quot;}, {\&quot;content\&quot;:\&quot;base64 example content\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromBase64.jpg\&quot;}]&#x60;. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If &#39;templateId&#39; is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then &#39;attachment&#39; is ignored )
        /// </summary>
        /// <value>Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, &#x60;[{\&quot;url\&quot;:\&quot;https://attachment.domain.com/myAttachmentFromUrl.jpg\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromUrl.jpg\&quot;}, {\&quot;content\&quot;:\&quot;base64 example content\&quot;, \&quot;name\&quot;:\&quot;myAttachmentFromBase64.jpg\&quot;}]&#x60;. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If &#39;templateId&#39; is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then &#39;attachment&#39; is ignored )</value>
        [JsonPropertyName("attachment")]
        public List<SendSmtpEmailAttachmentInner>? Attachment { get { return this.AttachmentOption; } set { this.AttachmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Headers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HeadersOption { get; private set; }

        /// <summary>
        /// Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, &#x60;{\&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;, \&quot;X-Mailin-custom\&quot;:\&quot;some_custom_header\&quot;, \&quot;idempotencyKey\&quot;:\&quot;abc-123\&quot;}&#x60;.
        /// </summary>
        /// <value>Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. &#39;sender.ip&#39; header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in &#x60;This-Case-Only&#x60; (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, &#x60;{\&quot;sender.ip\&quot;:\&quot;1.2.3.4\&quot;, \&quot;X-Mailin-custom\&quot;:\&quot;some_custom_header\&quot;, \&quot;idempotencyKey\&quot;:\&quot;abc-123\&quot;}&#x60;.</value>
        /* <example>{&quot;sender.ip&quot;:&quot;1.2.3.4&quot;,&quot;X-Mailin-custom&quot;:&quot;some_custom_header&quot;,&quot;idempotencyKey&quot;:&quot;abc-123&quot;}</example> */
        [JsonPropertyName("headers")]
        public Object? Headers { get { return this.HeadersOption; } set { this.HeadersOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Id of the template
        /// </summary>
        /// <value>Id of the template</value>
        /* <example>2</example> */
        [JsonPropertyName("templateId")]
        public long? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ParamsOption { get; private set; }

        /// <summary>
        /// Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. It&#39;s considered only if template is in New Template Language format.
        /// </summary>
        /// <value>Pass the set of attributes to customize the template. For example, {\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}. It&#39;s considered only if template is in New Template Language format.</value>
        /* <example>{&quot;FNAME&quot;:&quot;Joe&quot;,&quot;LNAME&quot;:&quot;Doe&quot;}</example> */
        [JsonPropertyName("params")]
        public Object? Params { get { return this.ParamsOption; } set { this.ParamsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Tag your emails to find them more easily
        /// </summary>
        /// <value>Tag your emails to find them more easily</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendSmtpEmail {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  TextContent: ").Append(TextContent).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendSmtpEmail" />
    /// </summary>
    public class SendSmtpEmailJsonConverter : JsonConverter<SendSmtpEmail>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendSmtpEmail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendSmtpEmail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<SendSmtpEmailToInner>?> to = default;
            Option<SendSmtpEmailSender?> sender = default;
            Option<List<SendSmtpEmailBccInner>?> bcc = default;
            Option<List<SendSmtpEmailCcInner>?> cc = default;
            Option<string?> htmlContent = default;
            Option<string?> textContent = default;
            Option<string?> subject = default;
            Option<SendSmtpEmailReplyTo?> replyTo = default;
            Option<List<SendSmtpEmailAttachmentInner>?> attachment = default;
            Option<Object?> headers = default;
            Option<long?> templateId = default;
            Option<Object?> varParams = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "to":
                            to = new Option<List<SendSmtpEmailToInner>?>(JsonSerializer.Deserialize<List<SendSmtpEmailToInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sender":
                            sender = new Option<SendSmtpEmailSender?>(JsonSerializer.Deserialize<SendSmtpEmailSender>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bcc":
                            bcc = new Option<List<SendSmtpEmailBccInner>?>(JsonSerializer.Deserialize<List<SendSmtpEmailBccInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cc":
                            cc = new Option<List<SendSmtpEmailCcInner>?>(JsonSerializer.Deserialize<List<SendSmtpEmailCcInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "htmlContent":
                            htmlContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "textContent":
                            textContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "replyTo":
                            replyTo = new Option<SendSmtpEmailReplyTo?>(JsonSerializer.Deserialize<SendSmtpEmailReplyTo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attachment":
                            attachment = new Option<List<SendSmtpEmailAttachmentInner>?>(JsonSerializer.Deserialize<List<SendSmtpEmailAttachmentInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "headers":
                            headers = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templateId":
                            templateId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "params":
                            varParams = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class SendSmtpEmail.", nameof(to));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class SendSmtpEmail.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class SendSmtpEmail.");

            if (bcc.IsSet && bcc.Value == null)
                throw new ArgumentNullException(nameof(bcc), "Property is not nullable for class SendSmtpEmail.");

            if (cc.IsSet && cc.Value == null)
                throw new ArgumentNullException(nameof(cc), "Property is not nullable for class SendSmtpEmail.");

            if (htmlContent.IsSet && htmlContent.Value == null)
                throw new ArgumentNullException(nameof(htmlContent), "Property is not nullable for class SendSmtpEmail.");

            if (textContent.IsSet && textContent.Value == null)
                throw new ArgumentNullException(nameof(textContent), "Property is not nullable for class SendSmtpEmail.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class SendSmtpEmail.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class SendSmtpEmail.");

            if (attachment.IsSet && attachment.Value == null)
                throw new ArgumentNullException(nameof(attachment), "Property is not nullable for class SendSmtpEmail.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class SendSmtpEmail.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class SendSmtpEmail.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class SendSmtpEmail.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class SendSmtpEmail.");

            return new SendSmtpEmail(to.Value!, sender, bcc, cc, htmlContent, textContent, subject, replyTo, attachment, headers, templateId, varParams, tags);
        }

        /// <summary>
        /// Serializes a <see cref="SendSmtpEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSmtpEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendSmtpEmail sendSmtpEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendSmtpEmail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendSmtpEmail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendSmtpEmail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendSmtpEmail sendSmtpEmail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendSmtpEmail.To == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.To), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.SenderOption.IsSet && sendSmtpEmail.Sender == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Sender), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.BccOption.IsSet && sendSmtpEmail.Bcc == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Bcc), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.CcOption.IsSet && sendSmtpEmail.Cc == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Cc), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.HtmlContentOption.IsSet && sendSmtpEmail.HtmlContent == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.HtmlContent), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.TextContentOption.IsSet && sendSmtpEmail.TextContent == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.TextContent), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.SubjectOption.IsSet && sendSmtpEmail.Subject == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Subject), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.ReplyToOption.IsSet && sendSmtpEmail.ReplyTo == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.ReplyTo), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.AttachmentOption.IsSet && sendSmtpEmail.Attachment == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Attachment), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.HeadersOption.IsSet && sendSmtpEmail.Headers == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Headers), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.ParamsOption.IsSet && sendSmtpEmail.Params == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Params), "Property is required for class SendSmtpEmail.");

            if (sendSmtpEmail.TagsOption.IsSet && sendSmtpEmail.Tags == null)
                throw new ArgumentNullException(nameof(sendSmtpEmail.Tags), "Property is required for class SendSmtpEmail.");

            writer.WritePropertyName("to");
            JsonSerializer.Serialize(writer, sendSmtpEmail.To, jsonSerializerOptions);
            if (sendSmtpEmail.SenderOption.IsSet)
            {
                writer.WritePropertyName("sender");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Sender, jsonSerializerOptions);
            }
            if (sendSmtpEmail.BccOption.IsSet)
            {
                writer.WritePropertyName("bcc");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Bcc, jsonSerializerOptions);
            }
            if (sendSmtpEmail.CcOption.IsSet)
            {
                writer.WritePropertyName("cc");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Cc, jsonSerializerOptions);
            }
            if (sendSmtpEmail.HtmlContentOption.IsSet)
                writer.WriteString("htmlContent", sendSmtpEmail.HtmlContent);

            if (sendSmtpEmail.TextContentOption.IsSet)
                writer.WriteString("textContent", sendSmtpEmail.TextContent);

            if (sendSmtpEmail.SubjectOption.IsSet)
                writer.WriteString("subject", sendSmtpEmail.Subject);

            if (sendSmtpEmail.ReplyToOption.IsSet)
            {
                writer.WritePropertyName("replyTo");
                JsonSerializer.Serialize(writer, sendSmtpEmail.ReplyTo, jsonSerializerOptions);
            }
            if (sendSmtpEmail.AttachmentOption.IsSet)
            {
                writer.WritePropertyName("attachment");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Attachment, jsonSerializerOptions);
            }
            if (sendSmtpEmail.HeadersOption.IsSet)
            {
                writer.WritePropertyName("headers");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Headers, jsonSerializerOptions);
            }
            if (sendSmtpEmail.TemplateIdOption.IsSet)
                writer.WriteNumber("templateId", sendSmtpEmail.TemplateIdOption.Value!.Value);

            if (sendSmtpEmail.ParamsOption.IsSet)
            {
                writer.WritePropertyName("params");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Params, jsonSerializerOptions);
            }
            if (sendSmtpEmail.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, sendSmtpEmail.Tags, jsonSerializerOptions);
            }
        }
    }
}
