// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
    /// </summary>
    public partial class RequestContactExportCustomContactFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExportCustomContactFilter" /> class.
        /// </summary>
        /// <param name="actionForContacts">Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. </param>
        /// <param name="actionForEmailCampaigns">Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). </param>
        /// <param name="actionForSmsCampaigns">Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. </param>
        /// <param name="listId">ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included.</param>
        /// <param name="importProcessId">Mandatory if actionForContacts is passed, ignored otherwise. import process Id of the process for which the corresponding action shall be applied in the filter.</param>
        /// <param name="segmentId">ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. </param>
        /// <param name="emailCampaignId">Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.</param>
        /// <param name="smsCampaignId">Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.</param>
        [JsonConstructor]
        public RequestContactExportCustomContactFilter(Option<ActionForContactsEnum?> actionForContacts = default, Option<ActionForEmailCampaignsEnum?> actionForEmailCampaigns = default, Option<ActionForSmsCampaignsEnum?> actionForSmsCampaigns = default, Option<long?> listId = default, Option<long?> importProcessId = default, Option<long?> segmentId = default, Option<long?> emailCampaignId = default, Option<long?> smsCampaignId = default)
        {
            ActionForContactsOption = actionForContacts;
            ActionForEmailCampaignsOption = actionForEmailCampaigns;
            ActionForSmsCampaignsOption = actionForSmsCampaigns;
            ListIdOption = listId;
            ImportProcessIdOption = importProcessId;
            SegmentIdOption = segmentId;
            EmailCampaignIdOption = emailCampaignId;
            SmsCampaignIdOption = smsCampaignId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. 
        /// </summary>
        /// <value>Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. </value>
        public enum ActionForContactsEnum
        {
            /// <summary>
            /// Enum AllContacts for value: allContacts
            /// </summary>
            AllContacts = 1,

            /// <summary>
            /// Enum Subscribed for value: subscribed
            /// </summary>
            Subscribed = 2,

            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            Unsubscribed = 3,

            /// <summary>
            /// Enum UnsubscribedPerList for value: unsubscribedPerList
            /// </summary>
            UnsubscribedPerList = 4
        }

        /// <summary>
        /// Returns a <see cref="ActionForContactsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionForContactsEnum ActionForContactsEnumFromString(string value)
        {
            if (value.Equals("allContacts"))
                return ActionForContactsEnum.AllContacts;

            if (value.Equals("subscribed"))
                return ActionForContactsEnum.Subscribed;

            if (value.Equals("unsubscribed"))
                return ActionForContactsEnum.Unsubscribed;

            if (value.Equals("unsubscribedPerList"))
                return ActionForContactsEnum.UnsubscribedPerList;

            throw new NotImplementedException($"Could not convert value to type ActionForContactsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionForContactsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionForContactsEnum? ActionForContactsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("allContacts"))
                return ActionForContactsEnum.AllContacts;

            if (value.Equals("subscribed"))
                return ActionForContactsEnum.Subscribed;

            if (value.Equals("unsubscribed"))
                return ActionForContactsEnum.Unsubscribed;

            if (value.Equals("unsubscribedPerList"))
                return ActionForContactsEnum.UnsubscribedPerList;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionForContactsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionForContactsEnumToJsonValue(ActionForContactsEnum? value)
        {
            if (value == ActionForContactsEnum.AllContacts)
                return "allContacts";

            if (value == ActionForContactsEnum.Subscribed)
                return "subscribed";

            if (value == ActionForContactsEnum.Unsubscribed)
                return "unsubscribed";

            if (value == ActionForContactsEnum.UnsubscribedPerList)
                return "unsubscribedPerList";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ActionForContacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ActionForContactsEnum?> ActionForContactsOption { get; private set; }

        /// <summary>
        /// Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. 
        /// </summary>
        /// <value>Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only. </value>
        [JsonPropertyName("actionForContacts")]
        public ActionForContactsEnum? ActionForContacts { get { return this.ActionForContactsOption; } set { this.ActionForContactsOption = new(value); } }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). </value>
        public enum ActionForEmailCampaignsEnum
        {
            /// <summary>
            /// Enum Openers for value: openers
            /// </summary>
            Openers = 1,

            /// <summary>
            /// Enum NonOpeners for value: nonOpeners
            /// </summary>
            NonOpeners = 2,

            /// <summary>
            /// Enum Clickers for value: clickers
            /// </summary>
            Clickers = 3,

            /// <summary>
            /// Enum NonClickers for value: nonClickers
            /// </summary>
            NonClickers = 4,

            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            Unsubscribed = 5,

            /// <summary>
            /// Enum HardBounces for value: hardBounces
            /// </summary>
            HardBounces = 6,

            /// <summary>
            /// Enum SoftBounces for value: softBounces
            /// </summary>
            SoftBounces = 7
        }

        /// <summary>
        /// Returns a <see cref="ActionForEmailCampaignsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionForEmailCampaignsEnum ActionForEmailCampaignsEnumFromString(string value)
        {
            if (value.Equals("openers"))
                return ActionForEmailCampaignsEnum.Openers;

            if (value.Equals("nonOpeners"))
                return ActionForEmailCampaignsEnum.NonOpeners;

            if (value.Equals("clickers"))
                return ActionForEmailCampaignsEnum.Clickers;

            if (value.Equals("nonClickers"))
                return ActionForEmailCampaignsEnum.NonClickers;

            if (value.Equals("unsubscribed"))
                return ActionForEmailCampaignsEnum.Unsubscribed;

            if (value.Equals("hardBounces"))
                return ActionForEmailCampaignsEnum.HardBounces;

            if (value.Equals("softBounces"))
                return ActionForEmailCampaignsEnum.SoftBounces;

            throw new NotImplementedException($"Could not convert value to type ActionForEmailCampaignsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionForEmailCampaignsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionForEmailCampaignsEnum? ActionForEmailCampaignsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("openers"))
                return ActionForEmailCampaignsEnum.Openers;

            if (value.Equals("nonOpeners"))
                return ActionForEmailCampaignsEnum.NonOpeners;

            if (value.Equals("clickers"))
                return ActionForEmailCampaignsEnum.Clickers;

            if (value.Equals("nonClickers"))
                return ActionForEmailCampaignsEnum.NonClickers;

            if (value.Equals("unsubscribed"))
                return ActionForEmailCampaignsEnum.Unsubscribed;

            if (value.Equals("hardBounces"))
                return ActionForEmailCampaignsEnum.HardBounces;

            if (value.Equals("softBounces"))
                return ActionForEmailCampaignsEnum.SoftBounces;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionForEmailCampaignsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionForEmailCampaignsEnumToJsonValue(ActionForEmailCampaignsEnum? value)
        {
            if (value == ActionForEmailCampaignsEnum.Openers)
                return "openers";

            if (value == ActionForEmailCampaignsEnum.NonOpeners)
                return "nonOpeners";

            if (value == ActionForEmailCampaignsEnum.Clickers)
                return "clickers";

            if (value == ActionForEmailCampaignsEnum.NonClickers)
                return "nonClickers";

            if (value == ActionForEmailCampaignsEnum.Unsubscribed)
                return "unsubscribed";

            if (value == ActionForEmailCampaignsEnum.HardBounces)
                return "hardBounces";

            if (value == ActionForEmailCampaignsEnum.SoftBounces)
                return "softBounces";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ActionForEmailCampaigns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ActionForEmailCampaignsEnum?> ActionForEmailCampaignsOption { get; private set; }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s). </value>
        [JsonPropertyName("actionForEmailCampaigns")]
        public ActionForEmailCampaignsEnum? ActionForEmailCampaigns { get { return this.ActionForEmailCampaignsOption; } set { this.ActionForEmailCampaignsOption = new(value); } }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. </value>
        public enum ActionForSmsCampaignsEnum
        {
            /// <summary>
            /// Enum HardBounces for value: hardBounces
            /// </summary>
            HardBounces = 1,

            /// <summary>
            /// Enum SoftBounces for value: softBounces
            /// </summary>
            SoftBounces = 2,

            /// <summary>
            /// Enum Unsubscribed for value: unsubscribed
            /// </summary>
            Unsubscribed = 3
        }

        /// <summary>
        /// Returns a <see cref="ActionForSmsCampaignsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionForSmsCampaignsEnum ActionForSmsCampaignsEnumFromString(string value)
        {
            if (value.Equals("hardBounces"))
                return ActionForSmsCampaignsEnum.HardBounces;

            if (value.Equals("softBounces"))
                return ActionForSmsCampaignsEnum.SoftBounces;

            if (value.Equals("unsubscribed"))
                return ActionForSmsCampaignsEnum.Unsubscribed;

            throw new NotImplementedException($"Could not convert value to type ActionForSmsCampaignsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionForSmsCampaignsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionForSmsCampaignsEnum? ActionForSmsCampaignsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("hardBounces"))
                return ActionForSmsCampaignsEnum.HardBounces;

            if (value.Equals("softBounces"))
                return ActionForSmsCampaignsEnum.SoftBounces;

            if (value.Equals("unsubscribed"))
                return ActionForSmsCampaignsEnum.Unsubscribed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionForSmsCampaignsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionForSmsCampaignsEnumToJsonValue(ActionForSmsCampaignsEnum? value)
        {
            if (value == ActionForSmsCampaignsEnum.HardBounces)
                return "hardBounces";

            if (value == ActionForSmsCampaignsEnum.SoftBounces)
                return "softBounces";

            if (value == ActionForSmsCampaignsEnum.Unsubscribed)
                return "unsubscribed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ActionForSmsCampaigns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ActionForSmsCampaignsEnum?> ActionForSmsCampaignsOption { get; private set; }

        /// <summary>
        /// Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. 
        /// </summary>
        /// <value>Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns. </value>
        [JsonPropertyName("actionForSmsCampaigns")]
        public ActionForSmsCampaignsEnum? ActionForSmsCampaigns { get { return this.ActionForSmsCampaignsOption; } set { this.ActionForSmsCampaignsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ListId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ListIdOption { get; private set; }

        /// <summary>
        /// ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included.
        /// </summary>
        /// <value>ID of the list. This is mandatory if actionForContacts is specified and segmentId is not provided. Either segmentId or listId must be included.</value>
        /* <example>2</example> */
        [JsonPropertyName("listId")]
        public long? ListId { get { return this.ListIdOption; } set { this.ListIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImportProcessId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportProcessIdOption { get; private set; }

        /// <summary>
        /// Mandatory if actionForContacts is passed, ignored otherwise. import process Id of the process for which the corresponding action shall be applied in the filter.
        /// </summary>
        /// <value>Mandatory if actionForContacts is passed, ignored otherwise. import process Id of the process for which the corresponding action shall be applied in the filter.</value>
        /* <example>333</example> */
        [JsonPropertyName("importProcessId")]
        public long? ImportProcessId { get { return this.ImportProcessIdOption; } set { this.ImportProcessIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SegmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SegmentIdOption { get; private set; }

        /// <summary>
        /// ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. 
        /// </summary>
        /// <value>ID of the segment. This is mandatory if actionForContacts is specified and listId is not provided. Either segmentId or listId must be included. </value>
        /* <example>2</example> */
        [JsonPropertyName("segmentId")]
        public long? SegmentId { get { return this.SegmentIdOption; } set { this.SegmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailCampaignId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmailCampaignIdOption { get; private set; }

        /// <summary>
        /// Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
        /// </summary>
        /// <value>Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.</value>
        /* <example>12</example> */
        [JsonPropertyName("emailCampaignId")]
        public long? EmailCampaignId { get { return this.EmailCampaignIdOption; } set { this.EmailCampaignIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SmsCampaignId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SmsCampaignIdOption { get; private set; }

        /// <summary>
        /// Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
        /// </summary>
        /// <value>Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.</value>
        /* <example>12</example> */
        [JsonPropertyName("smsCampaignId")]
        public long? SmsCampaignId { get { return this.SmsCampaignIdOption; } set { this.SmsCampaignIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContactExportCustomContactFilter {\n");
            sb.Append("  ActionForContacts: ").Append(ActionForContacts).Append("\n");
            sb.Append("  ActionForEmailCampaigns: ").Append(ActionForEmailCampaigns).Append("\n");
            sb.Append("  ActionForSmsCampaigns: ").Append(ActionForSmsCampaigns).Append("\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  ImportProcessId: ").Append(ImportProcessId).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("  EmailCampaignId: ").Append(EmailCampaignId).Append("\n");
            sb.Append("  SmsCampaignId: ").Append(SmsCampaignId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequestContactExportCustomContactFilter" />
    /// </summary>
    public class RequestContactExportCustomContactFilterJsonConverter : JsonConverter<RequestContactExportCustomContactFilter>
    {
        /// <summary>
        /// Deserializes json to <see cref="RequestContactExportCustomContactFilter" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RequestContactExportCustomContactFilter Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RequestContactExportCustomContactFilter.ActionForContactsEnum?> actionForContacts = default;
            Option<RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum?> actionForEmailCampaigns = default;
            Option<RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum?> actionForSmsCampaigns = default;
            Option<long?> listId = default;
            Option<long?> importProcessId = default;
            Option<long?> segmentId = default;
            Option<long?> emailCampaignId = default;
            Option<long?> smsCampaignId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actionForContacts":
                            string? actionForContactsRawValue = utf8JsonReader.GetString();
                            if (actionForContactsRawValue != null)
                                actionForContacts = new Option<RequestContactExportCustomContactFilter.ActionForContactsEnum?>(RequestContactExportCustomContactFilter.ActionForContactsEnumFromStringOrDefault(actionForContactsRawValue));
                            break;
                        case "actionForEmailCampaigns":
                            string? actionForEmailCampaignsRawValue = utf8JsonReader.GetString();
                            if (actionForEmailCampaignsRawValue != null)
                                actionForEmailCampaigns = new Option<RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum?>(RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnumFromStringOrDefault(actionForEmailCampaignsRawValue));
                            break;
                        case "actionForSmsCampaigns":
                            string? actionForSmsCampaignsRawValue = utf8JsonReader.GetString();
                            if (actionForSmsCampaignsRawValue != null)
                                actionForSmsCampaigns = new Option<RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum?>(RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnumFromStringOrDefault(actionForSmsCampaignsRawValue));
                            break;
                        case "listId":
                            listId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "importProcessId":
                            importProcessId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "segmentId":
                            segmentId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "emailCampaignId":
                            emailCampaignId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "smsCampaignId":
                            smsCampaignId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actionForContacts.IsSet && actionForContacts.Value == null)
                throw new ArgumentNullException(nameof(actionForContacts), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (actionForEmailCampaigns.IsSet && actionForEmailCampaigns.Value == null)
                throw new ArgumentNullException(nameof(actionForEmailCampaigns), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (actionForSmsCampaigns.IsSet && actionForSmsCampaigns.Value == null)
                throw new ArgumentNullException(nameof(actionForSmsCampaigns), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (listId.IsSet && listId.Value == null)
                throw new ArgumentNullException(nameof(listId), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (importProcessId.IsSet && importProcessId.Value == null)
                throw new ArgumentNullException(nameof(importProcessId), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (segmentId.IsSet && segmentId.Value == null)
                throw new ArgumentNullException(nameof(segmentId), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (emailCampaignId.IsSet && emailCampaignId.Value == null)
                throw new ArgumentNullException(nameof(emailCampaignId), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            if (smsCampaignId.IsSet && smsCampaignId.Value == null)
                throw new ArgumentNullException(nameof(smsCampaignId), "Property is not nullable for class RequestContactExportCustomContactFilter.");

            return new RequestContactExportCustomContactFilter(actionForContacts, actionForEmailCampaigns, actionForSmsCampaigns, listId, importProcessId, segmentId, emailCampaignId, smsCampaignId);
        }

        /// <summary>
        /// Serializes a <see cref="RequestContactExportCustomContactFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactExportCustomContactFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RequestContactExportCustomContactFilter requestContactExportCustomContactFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, requestContactExportCustomContactFilter, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RequestContactExportCustomContactFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactExportCustomContactFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RequestContactExportCustomContactFilter requestContactExportCustomContactFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            var actionForContactsRawValue = RequestContactExportCustomContactFilter.ActionForContactsEnumToJsonValue(requestContactExportCustomContactFilter.ActionForContactsOption.Value!.Value);
            writer.WriteString("actionForContacts", actionForContactsRawValue);
            var actionForEmailCampaignsRawValue = RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnumToJsonValue(requestContactExportCustomContactFilter.ActionForEmailCampaignsOption.Value!.Value);
            writer.WriteString("actionForEmailCampaigns", actionForEmailCampaignsRawValue);
            var actionForSmsCampaignsRawValue = RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnumToJsonValue(requestContactExportCustomContactFilter.ActionForSmsCampaignsOption.Value!.Value);
            writer.WriteString("actionForSmsCampaigns", actionForSmsCampaignsRawValue);
            if (requestContactExportCustomContactFilter.ListIdOption.IsSet)
                writer.WriteNumber("listId", requestContactExportCustomContactFilter.ListIdOption.Value!.Value);

            if (requestContactExportCustomContactFilter.ImportProcessIdOption.IsSet)
                writer.WriteNumber("importProcessId", requestContactExportCustomContactFilter.ImportProcessIdOption.Value!.Value);

            if (requestContactExportCustomContactFilter.SegmentIdOption.IsSet)
                writer.WriteNumber("segmentId", requestContactExportCustomContactFilter.SegmentIdOption.Value!.Value);

            if (requestContactExportCustomContactFilter.EmailCampaignIdOption.IsSet)
                writer.WriteNumber("emailCampaignId", requestContactExportCustomContactFilter.EmailCampaignIdOption.Value!.Value);

            if (requestContactExportCustomContactFilter.SmsCampaignIdOption.IsSet)
                writer.WriteNumber("smsCampaignId", requestContactExportCustomContactFilter.SmsCampaignIdOption.Value!.Value);
        }
    }
}
