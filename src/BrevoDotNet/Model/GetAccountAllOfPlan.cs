// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetAccountAllOfPlan
    /// </summary>
    public partial class GetAccountAllOfPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountAllOfPlan" /> class.
        /// </summary>
        /// <param name="type">Displays the plan type of the user</param>
        /// <param name="creditsType">This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.</param>
        /// <param name="credits">Remaining credits of the user</param>
        /// <param name="startDate">Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type)</param>
        /// <param name="endDate">Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type)</param>
        [JsonConstructor]
        public GetAccountAllOfPlan(TypeEnum type, CreditsTypeEnum creditsType, float credits, Option<DateOnly?> startDate = default, Option<DateOnly?> endDate = default)
        {
            Type = type;
            CreditsType = creditsType;
            Credits = credits;
            StartDateOption = startDate;
            EndDateOption = endDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Displays the plan type of the user
        /// </summary>
        /// <value>Displays the plan type of the user</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PayAsYouGo for value: payAsYouGo
            /// </summary>
            PayAsYouGo = 1,

            /// <summary>
            /// Enum Free for value: free
            /// </summary>
            Free = 2,

            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            Subscription = 3,

            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            Sms = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("payAsYouGo"))
                return TypeEnum.PayAsYouGo;

            if (value.Equals("free"))
                return TypeEnum.Free;

            if (value.Equals("subscription"))
                return TypeEnum.Subscription;

            if (value.Equals("sms"))
                return TypeEnum.Sms;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("payAsYouGo"))
                return TypeEnum.PayAsYouGo;

            if (value.Equals("free"))
                return TypeEnum.Free;

            if (value.Equals("subscription"))
                return TypeEnum.Subscription;

            if (value.Equals("sms"))
                return TypeEnum.Sms;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.PayAsYouGo)
                return "payAsYouGo";

            if (value == TypeEnum.Free)
                return "free";

            if (value == TypeEnum.Subscription)
                return "subscription";

            if (value == TypeEnum.Sms)
                return "sms";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Displays the plan type of the user
        /// </summary>
        /// <value>Displays the plan type of the user</value>
        /* <example>subscription</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.
        /// </summary>
        /// <value>This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.</value>
        public enum CreditsTypeEnum
        {
            /// <summary>
            /// Enum SendLimit for value: sendLimit
            /// </summary>
            SendLimit = 1
        }

        /// <summary>
        /// Returns a <see cref="CreditsTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CreditsTypeEnum CreditsTypeEnumFromString(string value)
        {
            if (value.Equals("sendLimit"))
                return CreditsTypeEnum.SendLimit;

            throw new NotImplementedException($"Could not convert value to type CreditsTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CreditsTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CreditsTypeEnum? CreditsTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("sendLimit"))
                return CreditsTypeEnum.SendLimit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CreditsTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CreditsTypeEnumToJsonValue(CreditsTypeEnum value)
        {
            if (value == CreditsTypeEnum.SendLimit)
                return "sendLimit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.
        /// </summary>
        /// <value>This is the type of the credit, \&quot;Send Limit\&quot; is one of the possible types of credit of a user. \&quot;Send Limit\&quot; implies the total number of emails you can send to the subscribers in your account.</value>
        /* <example>sendLimit</example> */
        [JsonPropertyName("creditsType")]
        public CreditsTypeEnum CreditsType { get; set; }

        /// <summary>
        /// Remaining credits of the user
        /// </summary>
        /// <value>Remaining credits of the user</value>
        /* <example>8755.0</example> */
        [JsonPropertyName("credits")]
        public float Credits { get; set; }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StartDateOption { get; private set; }

        /// <summary>
        /// Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type)
        /// </summary>
        /// <value>Date of the period from which the plan will start (only available for \&quot;subscription\&quot; plan type)</value>
        /* <example>Sat Dec 31 00:00:00 UTC 2016</example> */
        [JsonPropertyName("startDate")]
        public DateOnly? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type)
        /// </summary>
        /// <value>Date of the period from which the plan will end (only available for \&quot;subscription\&quot; plan type)</value>
        /* <example>Tue Jan 31 00:00:00 UTC 2017</example> */
        [JsonPropertyName("endDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountAllOfPlan {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreditsType: ").Append(CreditsType).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAccountAllOfPlan" />
    /// </summary>
    public class GetAccountAllOfPlanJsonConverter : JsonConverter<GetAccountAllOfPlan>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="GetAccountAllOfPlan" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAccountAllOfPlan Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetAccountAllOfPlan.TypeEnum?> type = default;
            Option<GetAccountAllOfPlan.CreditsTypeEnum?> creditsType = default;
            Option<float?> credits = default;
            Option<DateOnly?> startDate = default;
            Option<DateOnly?> endDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetAccountAllOfPlan.TypeEnum?>(GetAccountAllOfPlan.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "creditsType":
                            string? creditsTypeRawValue = utf8JsonReader.GetString();
                            if (creditsTypeRawValue != null)
                                creditsType = new Option<GetAccountAllOfPlan.CreditsTypeEnum?>(GetAccountAllOfPlan.CreditsTypeEnumFromStringOrDefault(creditsTypeRawValue));
                            break;
                        case "credits":
                            credits = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "startDate":
                            startDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfPlan.", nameof(type));

            if (!creditsType.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfPlan.", nameof(creditsType));

            if (!credits.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfPlan.", nameof(credits));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetAccountAllOfPlan.");

            if (creditsType.IsSet && creditsType.Value == null)
                throw new ArgumentNullException(nameof(creditsType), "Property is not nullable for class GetAccountAllOfPlan.");

            if (credits.IsSet && credits.Value == null)
                throw new ArgumentNullException(nameof(credits), "Property is not nullable for class GetAccountAllOfPlan.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class GetAccountAllOfPlan.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class GetAccountAllOfPlan.");

            return new GetAccountAllOfPlan(type.Value!.Value!, creditsType.Value!.Value!, credits.Value!.Value!, startDate, endDate);
        }

        /// <summary>
        /// Serializes a <see cref="GetAccountAllOfPlan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccountAllOfPlan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAccountAllOfPlan getAccountAllOfPlan, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAccountAllOfPlan, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAccountAllOfPlan" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccountAllOfPlan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAccountAllOfPlan getAccountAllOfPlan, JsonSerializerOptions jsonSerializerOptions)
        {
            var typeRawValue = GetAccountAllOfPlan.TypeEnumToJsonValue(getAccountAllOfPlan.Type);
            writer.WriteString("type", typeRawValue);
            var creditsTypeRawValue = GetAccountAllOfPlan.CreditsTypeEnumToJsonValue(getAccountAllOfPlan.CreditsType);
            writer.WriteString("creditsType", creditsTypeRawValue);
            writer.WriteNumber("credits", getAccountAllOfPlan.Credits);

            if (getAccountAllOfPlan.StartDateOption.IsSet)
                writer.WriteString("startDate", getAccountAllOfPlan.StartDateOption.Value!.Value.ToString(StartDateFormat));

            if (getAccountAllOfPlan.EndDateOption.IsSet)
                writer.WriteString("endDate", getAccountAllOfPlan.EndDateOption.Value!.Value.ToString(EndDateFormat));
        }
    }
}
