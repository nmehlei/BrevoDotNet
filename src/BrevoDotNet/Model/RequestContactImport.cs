// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// RequestContactImport
    /// </summary>
    public partial class RequestContactImport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactImport" /> class.
        /// </summary>
        /// <param name="fileUrl">Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv</param>
        /// <param name="fileBody">Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.</param>
        /// <param name="jsonBody">**Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. </param>
        /// <param name="listIds">Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].</param>
        /// <param name="notifyUrl">URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479</param>
        /// <param name="newList">newList</param>
        /// <param name="emailBlacklist">To blacklist all the contacts for email (default to false)</param>
        /// <param name="allowExport">To enable allow export. if allow export will be true, we will save import_process_ids [12, 13, 14] in the users metadata (default to false)</param>
        /// <param name="disableNotification">To disable email notification (default to false)</param>
        /// <param name="disableFrontendNotification">To disable frontend notification (default to false)</param>
        /// <param name="smsBlacklist">To blacklist all the contacts for sms (default to false)</param>
        /// <param name="updateExistingContacts">To facilitate the choice to update the existing contacts (default to true)</param>
        /// <param name="emptyContactsAttributes">To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true ) (default to false)</param>
        [JsonConstructor]
        public RequestContactImport(Option<string?> fileUrl = default, Option<string?> fileBody = default, Option<List<RequestContactImportJsonBodyInner>?> jsonBody = default, Option<List<long>?> listIds = default, Option<string?> notifyUrl = default, Option<RequestContactImportNewList?> newList = default, Option<bool?> emailBlacklist = default, Option<bool?> allowExport = default, Option<bool?> disableNotification = default, Option<bool?> disableFrontendNotification = default, Option<bool?> smsBlacklist = default, Option<bool?> updateExistingContacts = default, Option<bool?> emptyContactsAttributes = default)
        {
            FileUrlOption = fileUrl;
            FileBodyOption = fileBody;
            JsonBodyOption = jsonBody;
            ListIdsOption = listIds;
            NotifyUrlOption = notifyUrl;
            NewListOption = newList;
            EmailBlacklistOption = emailBlacklist;
            AllowExportOption = allowExport;
            DisableNotificationOption = disableNotification;
            DisableFrontendNotificationOption = disableFrontendNotification;
            SmsBlacklistOption = smsBlacklist;
            UpdateExistingContactsOption = updateExistingContacts;
            EmptyContactsAttributesOption = emptyContactsAttributes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileUrlOption { get; private set; }

        /// <summary>
        /// Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv
        /// </summary>
        /// <value>Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv</value>
        /* <example>https://importfile.domain.com</example> */
        [JsonPropertyName("fileUrl")]
        public string? FileUrl { get { return this.FileUrlOption; } set { this.FileUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileBody
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileBodyOption { get; private set; }

        /// <summary>
        /// Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
        /// </summary>
        /// <value>Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.</value>
        /* <example>NAME;SURNAME;EMAIL\n&quot;Smith&quot;;&quot;John&quot;;&quot;john.smith@example.com&quot;\n&quot;Roger&quot;;&quot;Ellie&quot;;&quot;ellie36@example.com</example> */
        [JsonPropertyName("fileBody")]
        public string? FileBody { get { return this.FileBodyOption; } set { this.FileBodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of JsonBody
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RequestContactImportJsonBodyInner>?> JsonBodyOption { get; private set; }

        /// <summary>
        /// **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. 
        /// </summary>
        /// <value>**Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files. </value>
        [JsonPropertyName("jsonBody")]
        public List<RequestContactImportJsonBodyInner>? JsonBody { get { return this.JsonBodyOption; } set { this.JsonBodyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ListIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ListIdsOption { get; private set; }

        /// <summary>
        /// Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
        /// </summary>
        /// <value>Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].</value>
        [JsonPropertyName("listIds")]
        public List<long>? ListIds { get { return this.ListIdsOption; } set { this.ListIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NotifyUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotifyUrlOption { get; private set; }

        /// <summary>
        /// URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        /// </summary>
        /// <value>URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("notifyUrl")]
        public string? NotifyUrl { get { return this.NotifyUrlOption; } set { this.NotifyUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of NewList
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RequestContactImportNewList?> NewListOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewList
        /// </summary>
        [JsonPropertyName("newList")]
        public RequestContactImportNewList? NewList { get { return this.NewListOption; } set { this.NewListOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailBlacklist
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmailBlacklistOption { get; private set; }

        /// <summary>
        /// To blacklist all the contacts for email
        /// </summary>
        /// <value>To blacklist all the contacts for email</value>
        /* <example>false</example> */
        [JsonPropertyName("emailBlacklist")]
        public bool? EmailBlacklist { get { return this.EmailBlacklistOption; } set { this.EmailBlacklistOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowExport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowExportOption { get; private set; }

        /// <summary>
        /// To enable allow export. if allow export will be true, we will save import_process_ids [12, 13, 14] in the users metadata
        /// </summary>
        /// <value>To enable allow export. if allow export will be true, we will save import_process_ids [12, 13, 14] in the users metadata</value>
        /* <example>false</example> */
        [JsonPropertyName("allowExport")]
        public bool? AllowExport { get { return this.AllowExportOption; } set { this.AllowExportOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisableNotification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisableNotificationOption { get; private set; }

        /// <summary>
        /// To disable email notification
        /// </summary>
        /// <value>To disable email notification</value>
        /* <example>false</example> */
        [JsonPropertyName("disableNotification")]
        public bool? DisableNotification { get { return this.DisableNotificationOption; } set { this.DisableNotificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisableFrontendNotification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisableFrontendNotificationOption { get; private set; }

        /// <summary>
        /// To disable frontend notification
        /// </summary>
        /// <value>To disable frontend notification</value>
        /* <example>false</example> */
        [JsonPropertyName("disableFrontendNotification")]
        public bool? DisableFrontendNotification { get { return this.DisableFrontendNotificationOption; } set { this.DisableFrontendNotificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of SmsBlacklist
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SmsBlacklistOption { get; private set; }

        /// <summary>
        /// To blacklist all the contacts for sms
        /// </summary>
        /// <value>To blacklist all the contacts for sms</value>
        /* <example>false</example> */
        [JsonPropertyName("smsBlacklist")]
        public bool? SmsBlacklist { get { return this.SmsBlacklistOption; } set { this.SmsBlacklistOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdateExistingContacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UpdateExistingContactsOption { get; private set; }

        /// <summary>
        /// To facilitate the choice to update the existing contacts
        /// </summary>
        /// <value>To facilitate the choice to update the existing contacts</value>
        /* <example>true</example> */
        [JsonPropertyName("updateExistingContacts")]
        public bool? UpdateExistingContacts { get { return this.UpdateExistingContactsOption; } set { this.UpdateExistingContactsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmptyContactsAttributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmptyContactsAttributesOption { get; private set; }

        /// <summary>
        /// To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true )
        /// </summary>
        /// <value>To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes &#x3D; true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, &amp; emptyContactsAttributes &#x3D; false means the empty fields will not affect your existing data ( only available if &#x60;updateExistingContacts&#x60; set to true )</value>
        /* <example>true</example> */
        [JsonPropertyName("emptyContactsAttributes")]
        public bool? EmptyContactsAttributes { get { return this.EmptyContactsAttributesOption; } set { this.EmptyContactsAttributesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContactImport {\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  FileBody: ").Append(FileBody).Append("\n");
            sb.Append("  JsonBody: ").Append(JsonBody).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  NewList: ").Append(NewList).Append("\n");
            sb.Append("  EmailBlacklist: ").Append(EmailBlacklist).Append("\n");
            sb.Append("  AllowExport: ").Append(AllowExport).Append("\n");
            sb.Append("  DisableNotification: ").Append(DisableNotification).Append("\n");
            sb.Append("  DisableFrontendNotification: ").Append(DisableFrontendNotification).Append("\n");
            sb.Append("  SmsBlacklist: ").Append(SmsBlacklist).Append("\n");
            sb.Append("  UpdateExistingContacts: ").Append(UpdateExistingContacts).Append("\n");
            sb.Append("  EmptyContactsAttributes: ").Append(EmptyContactsAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequestContactImport" />
    /// </summary>
    public class RequestContactImportJsonConverter : JsonConverter<RequestContactImport>
    {
        /// <summary>
        /// Deserializes json to <see cref="RequestContactImport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RequestContactImport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fileUrl = default;
            Option<string?> fileBody = default;
            Option<List<RequestContactImportJsonBodyInner>?> jsonBody = default;
            Option<List<long>?> listIds = default;
            Option<string?> notifyUrl = default;
            Option<RequestContactImportNewList?> newList = default;
            Option<bool?> emailBlacklist = default;
            Option<bool?> allowExport = default;
            Option<bool?> disableNotification = default;
            Option<bool?> disableFrontendNotification = default;
            Option<bool?> smsBlacklist = default;
            Option<bool?> updateExistingContacts = default;
            Option<bool?> emptyContactsAttributes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fileUrl":
                            fileUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fileBody":
                            fileBody = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "jsonBody":
                            jsonBody = new Option<List<RequestContactImportJsonBodyInner>?>(JsonSerializer.Deserialize<List<RequestContactImportJsonBodyInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "listIds":
                            listIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notifyUrl":
                            notifyUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "newList":
                            newList = new Option<RequestContactImportNewList?>(JsonSerializer.Deserialize<RequestContactImportNewList>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "emailBlacklist":
                            emailBlacklist = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowExport":
                            allowExport = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "disableNotification":
                            disableNotification = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "disableFrontendNotification":
                            disableFrontendNotification = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smsBlacklist":
                            smsBlacklist = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "updateExistingContacts":
                            updateExistingContacts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "emptyContactsAttributes":
                            emptyContactsAttributes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fileUrl.IsSet && fileUrl.Value == null)
                throw new ArgumentNullException(nameof(fileUrl), "Property is not nullable for class RequestContactImport.");

            if (fileBody.IsSet && fileBody.Value == null)
                throw new ArgumentNullException(nameof(fileBody), "Property is not nullable for class RequestContactImport.");

            if (jsonBody.IsSet && jsonBody.Value == null)
                throw new ArgumentNullException(nameof(jsonBody), "Property is not nullable for class RequestContactImport.");

            if (listIds.IsSet && listIds.Value == null)
                throw new ArgumentNullException(nameof(listIds), "Property is not nullable for class RequestContactImport.");

            if (notifyUrl.IsSet && notifyUrl.Value == null)
                throw new ArgumentNullException(nameof(notifyUrl), "Property is not nullable for class RequestContactImport.");

            if (newList.IsSet && newList.Value == null)
                throw new ArgumentNullException(nameof(newList), "Property is not nullable for class RequestContactImport.");

            if (emailBlacklist.IsSet && emailBlacklist.Value == null)
                throw new ArgumentNullException(nameof(emailBlacklist), "Property is not nullable for class RequestContactImport.");

            if (allowExport.IsSet && allowExport.Value == null)
                throw new ArgumentNullException(nameof(allowExport), "Property is not nullable for class RequestContactImport.");

            if (disableNotification.IsSet && disableNotification.Value == null)
                throw new ArgumentNullException(nameof(disableNotification), "Property is not nullable for class RequestContactImport.");

            if (disableFrontendNotification.IsSet && disableFrontendNotification.Value == null)
                throw new ArgumentNullException(nameof(disableFrontendNotification), "Property is not nullable for class RequestContactImport.");

            if (smsBlacklist.IsSet && smsBlacklist.Value == null)
                throw new ArgumentNullException(nameof(smsBlacklist), "Property is not nullable for class RequestContactImport.");

            if (updateExistingContacts.IsSet && updateExistingContacts.Value == null)
                throw new ArgumentNullException(nameof(updateExistingContacts), "Property is not nullable for class RequestContactImport.");

            if (emptyContactsAttributes.IsSet && emptyContactsAttributes.Value == null)
                throw new ArgumentNullException(nameof(emptyContactsAttributes), "Property is not nullable for class RequestContactImport.");

            return new RequestContactImport(fileUrl, fileBody, jsonBody, listIds, notifyUrl, newList, emailBlacklist, allowExport, disableNotification, disableFrontendNotification, smsBlacklist, updateExistingContacts, emptyContactsAttributes);
        }

        /// <summary>
        /// Serializes a <see cref="RequestContactImport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactImport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RequestContactImport requestContactImport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, requestContactImport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RequestContactImport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactImport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RequestContactImport requestContactImport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (requestContactImport.FileUrlOption.IsSet && requestContactImport.FileUrl == null)
                throw new ArgumentNullException(nameof(requestContactImport.FileUrl), "Property is required for class RequestContactImport.");

            if (requestContactImport.FileBodyOption.IsSet && requestContactImport.FileBody == null)
                throw new ArgumentNullException(nameof(requestContactImport.FileBody), "Property is required for class RequestContactImport.");

            if (requestContactImport.JsonBodyOption.IsSet && requestContactImport.JsonBody == null)
                throw new ArgumentNullException(nameof(requestContactImport.JsonBody), "Property is required for class RequestContactImport.");

            if (requestContactImport.ListIdsOption.IsSet && requestContactImport.ListIds == null)
                throw new ArgumentNullException(nameof(requestContactImport.ListIds), "Property is required for class RequestContactImport.");

            if (requestContactImport.NotifyUrlOption.IsSet && requestContactImport.NotifyUrl == null)
                throw new ArgumentNullException(nameof(requestContactImport.NotifyUrl), "Property is required for class RequestContactImport.");

            if (requestContactImport.NewListOption.IsSet && requestContactImport.NewList == null)
                throw new ArgumentNullException(nameof(requestContactImport.NewList), "Property is required for class RequestContactImport.");

            if (requestContactImport.FileUrlOption.IsSet)
                writer.WriteString("fileUrl", requestContactImport.FileUrl);

            if (requestContactImport.FileBodyOption.IsSet)
                writer.WriteString("fileBody", requestContactImport.FileBody);

            if (requestContactImport.JsonBodyOption.IsSet)
            {
                writer.WritePropertyName("jsonBody");
                JsonSerializer.Serialize(writer, requestContactImport.JsonBody, jsonSerializerOptions);
            }
            if (requestContactImport.ListIdsOption.IsSet)
            {
                writer.WritePropertyName("listIds");
                JsonSerializer.Serialize(writer, requestContactImport.ListIds, jsonSerializerOptions);
            }
            if (requestContactImport.NotifyUrlOption.IsSet)
                writer.WriteString("notifyUrl", requestContactImport.NotifyUrl);

            if (requestContactImport.NewListOption.IsSet)
            {
                writer.WritePropertyName("newList");
                JsonSerializer.Serialize(writer, requestContactImport.NewList, jsonSerializerOptions);
            }
            if (requestContactImport.EmailBlacklistOption.IsSet)
                writer.WriteBoolean("emailBlacklist", requestContactImport.EmailBlacklistOption.Value!.Value);

            if (requestContactImport.AllowExportOption.IsSet)
                writer.WriteBoolean("allowExport", requestContactImport.AllowExportOption.Value!.Value);

            if (requestContactImport.DisableNotificationOption.IsSet)
                writer.WriteBoolean("disableNotification", requestContactImport.DisableNotificationOption.Value!.Value);

            if (requestContactImport.DisableFrontendNotificationOption.IsSet)
                writer.WriteBoolean("disableFrontendNotification", requestContactImport.DisableFrontendNotificationOption.Value!.Value);

            if (requestContactImport.SmsBlacklistOption.IsSet)
                writer.WriteBoolean("smsBlacklist", requestContactImport.SmsBlacklistOption.Value!.Value);

            if (requestContactImport.UpdateExistingContactsOption.IsSet)
                writer.WriteBoolean("updateExistingContacts", requestContactImport.UpdateExistingContactsOption.Value!.Value);

            if (requestContactImport.EmptyContactsAttributesOption.IsSet)
                writer.WriteBoolean("emptyContactsAttributes", requestContactImport.EmptyContactsAttributesOption.Value!.Value);
        }
    }
}
