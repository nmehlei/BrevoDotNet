// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Listing of all the segments available in your account
    /// </summary>
    public partial class GetSegmentsSegments : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSegmentsSegments" /> class.
        /// </summary>
        /// <param name="id">ID of the list</param>
        /// <param name="segmentName">Name of the Segment</param>
        /// <param name="categoryName">Name of the Segment Category</param>
        /// <param name="updatedAt">Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        [JsonConstructor]
        public GetSegmentsSegments(Option<long?> id = default, Option<string?> segmentName = default, Option<string?> categoryName = default, Option<string?> updatedAt = default)
        {
            IdOption = id;
            SegmentNameOption = segmentName;
            CategoryNameOption = categoryName;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; private set; }

        /// <summary>
        /// ID of the list
        /// </summary>
        /// <value>ID of the list</value>
        /* <example>23</example> */
        [JsonPropertyName("id")]
        public long? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SegmentName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SegmentNameOption { get; private set; }

        /// <summary>
        /// Name of the Segment
        /// </summary>
        /// <value>Name of the Segment</value>
        /* <example>My Segment</example> */
        [JsonPropertyName("segmentName")]
        public string? SegmentName { get { return this.SegmentNameOption; } set { this.SegmentNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryNameOption { get; private set; }

        /// <summary>
        /// Name of the Segment Category
        /// </summary>
        /// <value>Name of the Segment Category</value>
        /* <example>New Category</example> */
        [JsonPropertyName("categoryName")]
        public string? CategoryName { get { return this.CategoryNameOption; } set { this.CategoryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-03-13T17:05:09Z</example> */
        [JsonPropertyName("updatedAt")]
        public string? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSegmentsSegments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SegmentName: ").Append(SegmentName).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSegmentsSegments" />
    /// </summary>
    public class GetSegmentsSegmentsJsonConverter : JsonConverter<GetSegmentsSegments>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSegmentsSegments" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSegmentsSegments Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> segmentName = default;
            Option<string?> categoryName = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "segmentName":
                            segmentName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "categoryName":
                            categoryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSegmentsSegments.");

            if (segmentName.IsSet && segmentName.Value == null)
                throw new ArgumentNullException(nameof(segmentName), "Property is not nullable for class GetSegmentsSegments.");

            if (categoryName.IsSet && categoryName.Value == null)
                throw new ArgumentNullException(nameof(categoryName), "Property is not nullable for class GetSegmentsSegments.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GetSegmentsSegments.");

            return new GetSegmentsSegments(id, segmentName, categoryName, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="GetSegmentsSegments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSegmentsSegments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSegmentsSegments getSegmentsSegments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSegmentsSegments, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSegmentsSegments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSegmentsSegments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSegmentsSegments getSegmentsSegments, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSegmentsSegments.SegmentNameOption.IsSet && getSegmentsSegments.SegmentName == null)
                throw new ArgumentNullException(nameof(getSegmentsSegments.SegmentName), "Property is required for class GetSegmentsSegments.");

            if (getSegmentsSegments.CategoryNameOption.IsSet && getSegmentsSegments.CategoryName == null)
                throw new ArgumentNullException(nameof(getSegmentsSegments.CategoryName), "Property is required for class GetSegmentsSegments.");

            if (getSegmentsSegments.UpdatedAtOption.IsSet && getSegmentsSegments.UpdatedAt == null)
                throw new ArgumentNullException(nameof(getSegmentsSegments.UpdatedAt), "Property is required for class GetSegmentsSegments.");

            if (getSegmentsSegments.IdOption.IsSet)
                writer.WriteNumber("id", getSegmentsSegments.IdOption.Value!.Value);

            if (getSegmentsSegments.SegmentNameOption.IsSet)
                writer.WriteString("segmentName", getSegmentsSegments.SegmentName);

            if (getSegmentsSegments.CategoryNameOption.IsSet)
                writer.WriteString("categoryName", getSegmentsSegments.CategoryName);

            if (getSegmentsSegments.UpdatedAtOption.IsSet)
                writer.WriteString("updatedAt", getSegmentsSegments.UpdatedAt);
        }
    }
}
