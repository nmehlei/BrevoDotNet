// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// SendTransacSms
    /// </summary>
    public partial class SendTransacSms : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendTransacSms" /> class.
        /// </summary>
        /// <param name="sender">Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**</param>
        /// <param name="recipient">Mobile number to send SMS with the country code</param>
        /// <param name="content">Content of the message. If more than 160 characters long, will be sent as multiple text messages</param>
        /// <param name="type">Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc. (default to TypeEnum.Transactional)</param>
        /// <param name="tag">Tag of the message</param>
        /// <param name="webUrl">Webhook to call for each event triggered by the message (delivered etc.)</param>
        /// <param name="organisationPrefix">A recognizable prefix will ensure your audience knows who you are.**Mandatory for U.S. Carriers**.This will be added as your Brand Name before the message content and will be included in content,**Prefer to verify maximum length of 160 characters including this prefix to avoid multiple sending of same sms**.</param>
        [JsonConstructor]
        public SendTransacSms(string sender, string recipient, string content, Option<TypeEnum?> type = default, Option<string?> tag = default, Option<string?> webUrl = default, Option<string?> organisationPrefix = default)
        {
            Sender = sender;
            Recipient = recipient;
            Content = content;
            TypeOption = type;
            TagOption = tag;
            WebUrlOption = webUrl;
            OrganisationPrefixOption = organisationPrefix;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.
        /// </summary>
        /// <value>Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Transactional for value: transactional
            /// </summary>
            Transactional = 1,

            /// <summary>
            /// Enum Marketing for value: marketing
            /// </summary>
            Marketing = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("transactional"))
                return TypeEnum.Transactional;

            if (value.Equals("marketing"))
                return TypeEnum.Marketing;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("transactional"))
                return TypeEnum.Transactional;

            if (value.Equals("marketing"))
                return TypeEnum.Marketing;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Transactional)
                return "transactional";

            if (value == TypeEnum.Marketing)
                return "marketing";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.
        /// </summary>
        /// <value>Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.</value>
        /* <example>marketing</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
        /// </summary>
        /// <value>Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**</value>
        /* <example>MyShop</example> */
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Mobile number to send SMS with the country code
        /// </summary>
        /// <value>Mobile number to send SMS with the country code</value>
        /* <example>33689965433</example> */
        [JsonPropertyName("recipient")]
        public string Recipient { get; set; }

        /// <summary>
        /// Content of the message. If more than 160 characters long, will be sent as multiple text messages
        /// </summary>
        /// <value>Content of the message. If more than 160 characters long, will be sent as multiple text messages</value>
        /* <example>Enter this code:CCJJG8 to validate your account</example> */
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Tag of the message
        /// </summary>
        /// <value>Tag of the message</value>
        /* <example>accountValidation</example> */
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebUrlOption { get; private set; }

        /// <summary>
        /// Webhook to call for each event triggered by the message (delivered etc.)
        /// </summary>
        /// <value>Webhook to call for each event triggered by the message (delivered etc.)</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("webUrl")]
        public string? WebUrl { get { return this.WebUrlOption; } set { this.WebUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganisationPrefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganisationPrefixOption { get; private set; }

        /// <summary>
        /// A recognizable prefix will ensure your audience knows who you are.**Mandatory for U.S. Carriers**.This will be added as your Brand Name before the message content and will be included in content,**Prefer to verify maximum length of 160 characters including this prefix to avoid multiple sending of same sms**.
        /// </summary>
        /// <value>A recognizable prefix will ensure your audience knows who you are.**Mandatory for U.S. Carriers**.This will be added as your Brand Name before the message content and will be included in content,**Prefer to verify maximum length of 160 characters including this prefix to avoid multiple sending of same sms**.</value>
        /* <example>MyCompany</example> */
        [JsonPropertyName("organisationPrefix")]
        public string? OrganisationPrefix { get { return this.OrganisationPrefixOption; } set { this.OrganisationPrefixOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendTransacSms {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  OrganisationPrefix: ").Append(OrganisationPrefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Sender (string) maxLength
            if (this.Sender != null && this.Sender.Length > 15)
            {
                yield return new ValidationResult("Invalid value for Sender, length must be less than 15.", new [] { "Sender" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendTransacSms" />
    /// </summary>
    public class SendTransacSmsJsonConverter : JsonConverter<SendTransacSms>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendTransacSms" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendTransacSms Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sender = default;
            Option<string?> recipient = default;
            Option<string?> content = default;
            Option<SendTransacSms.TypeEnum?> type = default;
            Option<string?> tag = default;
            Option<string?> webUrl = default;
            Option<string?> organisationPrefix = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender":
                            sender = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recipient":
                            recipient = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<SendTransacSms.TypeEnum?>(SendTransacSms.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "webUrl":
                            webUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organisationPrefix":
                            organisationPrefix = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class SendTransacSms.", nameof(sender));

            if (!recipient.IsSet)
                throw new ArgumentException("Property is required for class SendTransacSms.", nameof(recipient));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class SendTransacSms.", nameof(content));

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class SendTransacSms.");

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient), "Property is not nullable for class SendTransacSms.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class SendTransacSms.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class SendTransacSms.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class SendTransacSms.");

            if (webUrl.IsSet && webUrl.Value == null)
                throw new ArgumentNullException(nameof(webUrl), "Property is not nullable for class SendTransacSms.");

            if (organisationPrefix.IsSet && organisationPrefix.Value == null)
                throw new ArgumentNullException(nameof(organisationPrefix), "Property is not nullable for class SendTransacSms.");

            return new SendTransacSms(sender.Value!, recipient.Value!, content.Value!, type, tag, webUrl, organisationPrefix);
        }

        /// <summary>
        /// Serializes a <see cref="SendTransacSms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendTransacSms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendTransacSms sendTransacSms, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendTransacSms, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendTransacSms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendTransacSms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendTransacSms sendTransacSms, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendTransacSms.Sender == null)
                throw new ArgumentNullException(nameof(sendTransacSms.Sender), "Property is required for class SendTransacSms.");

            if (sendTransacSms.Recipient == null)
                throw new ArgumentNullException(nameof(sendTransacSms.Recipient), "Property is required for class SendTransacSms.");

            if (sendTransacSms.Content == null)
                throw new ArgumentNullException(nameof(sendTransacSms.Content), "Property is required for class SendTransacSms.");

            if (sendTransacSms.TagOption.IsSet && sendTransacSms.Tag == null)
                throw new ArgumentNullException(nameof(sendTransacSms.Tag), "Property is required for class SendTransacSms.");

            if (sendTransacSms.WebUrlOption.IsSet && sendTransacSms.WebUrl == null)
                throw new ArgumentNullException(nameof(sendTransacSms.WebUrl), "Property is required for class SendTransacSms.");

            if (sendTransacSms.OrganisationPrefixOption.IsSet && sendTransacSms.OrganisationPrefix == null)
                throw new ArgumentNullException(nameof(sendTransacSms.OrganisationPrefix), "Property is required for class SendTransacSms.");

            writer.WriteString("sender", sendTransacSms.Sender);

            writer.WriteString("recipient", sendTransacSms.Recipient);

            writer.WriteString("content", sendTransacSms.Content);

            var typeRawValue = SendTransacSms.TypeEnumToJsonValue(sendTransacSms.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (sendTransacSms.TagOption.IsSet)
                writer.WriteString("tag", sendTransacSms.Tag);

            if (sendTransacSms.WebUrlOption.IsSet)
                writer.WriteString("webUrl", sendTransacSms.WebUrl);

            if (sendTransacSms.OrganisationPrefixOption.IsSet)
                writer.WriteString("organisationPrefix", sendTransacSms.OrganisationPrefix);
        }
    }
}
