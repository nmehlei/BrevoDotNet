// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Campaign statistics of the contact
    /// </summary>
    public partial class GetExtendedContactDetailsAllOfStatistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedContactDetailsAllOfStatistics" /> class.
        /// </summary>
        /// <param name="messagesSent">Listing of the sent campaign for the contact</param>
        /// <param name="hardBounces">Listing of the hardbounes generated by the contact</param>
        /// <param name="softBounces">Listing of the softbounes generated by the contact</param>
        /// <param name="complaints">Listing of the complaints generated by the contact</param>
        /// <param name="unsubscriptions">unsubscriptions</param>
        /// <param name="opened">Listing of the openings generated by the contact</param>
        /// <param name="clicked">Listing of the clicks generated by the contact</param>
        /// <param name="transacAttributes">Listing of the transactional attributes for the contact</param>
        [JsonConstructor]
        public GetExtendedContactDetailsAllOfStatistics(Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> messagesSent = default, Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> hardBounces = default, Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> softBounces = default, Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> complaints = default, Option<GetExtendedContactDetailsAllOfStatisticsUnsubscriptions?> unsubscriptions = default, Option<List<GetExtendedContactDetailsAllOfStatisticsOpened>?> opened = default, Option<List<GetExtendedContactDetailsAllOfStatisticsClicked>?> clicked = default, Option<List<Object>?> transacAttributes = default)
        {
            MessagesSentOption = messagesSent;
            HardBouncesOption = hardBounces;
            SoftBouncesOption = softBounces;
            ComplaintsOption = complaints;
            UnsubscriptionsOption = unsubscriptions;
            OpenedOption = opened;
            ClickedOption = clicked;
            TransacAttributesOption = transacAttributes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MessagesSent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> MessagesSentOption { get; private set; }

        /// <summary>
        /// Listing of the sent campaign for the contact
        /// </summary>
        /// <value>Listing of the sent campaign for the contact</value>
        [JsonPropertyName("messagesSent")]
        public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>? MessagesSent { get { return this.MessagesSentOption; } set { this.MessagesSentOption = new(value); } }

        /// <summary>
        /// Used to track the state of HardBounces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> HardBouncesOption { get; private set; }

        /// <summary>
        /// Listing of the hardbounes generated by the contact
        /// </summary>
        /// <value>Listing of the hardbounes generated by the contact</value>
        [JsonPropertyName("hardBounces")]
        public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>? HardBounces { get { return this.HardBouncesOption; } set { this.HardBouncesOption = new(value); } }

        /// <summary>
        /// Used to track the state of SoftBounces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> SoftBouncesOption { get; private set; }

        /// <summary>
        /// Listing of the softbounes generated by the contact
        /// </summary>
        /// <value>Listing of the softbounes generated by the contact</value>
        [JsonPropertyName("softBounces")]
        public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>? SoftBounces { get { return this.SoftBouncesOption; } set { this.SoftBouncesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Complaints
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> ComplaintsOption { get; private set; }

        /// <summary>
        /// Listing of the complaints generated by the contact
        /// </summary>
        /// <value>Listing of the complaints generated by the contact</value>
        [JsonPropertyName("complaints")]
        public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>? Complaints { get { return this.ComplaintsOption; } set { this.ComplaintsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Unsubscriptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetExtendedContactDetailsAllOfStatisticsUnsubscriptions?> UnsubscriptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Unsubscriptions
        /// </summary>
        [JsonPropertyName("unsubscriptions")]
        public GetExtendedContactDetailsAllOfStatisticsUnsubscriptions? Unsubscriptions { get { return this.UnsubscriptionsOption; } set { this.UnsubscriptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Opened
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsOpened>?> OpenedOption { get; private set; }

        /// <summary>
        /// Listing of the openings generated by the contact
        /// </summary>
        /// <value>Listing of the openings generated by the contact</value>
        [JsonPropertyName("opened")]
        public List<GetExtendedContactDetailsAllOfStatisticsOpened>? Opened { get { return this.OpenedOption; } set { this.OpenedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Clicked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetExtendedContactDetailsAllOfStatisticsClicked>?> ClickedOption { get; private set; }

        /// <summary>
        /// Listing of the clicks generated by the contact
        /// </summary>
        /// <value>Listing of the clicks generated by the contact</value>
        [JsonPropertyName("clicked")]
        public List<GetExtendedContactDetailsAllOfStatisticsClicked>? Clicked { get { return this.ClickedOption; } set { this.ClickedOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransacAttributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> TransacAttributesOption { get; private set; }

        /// <summary>
        /// Listing of the transactional attributes for the contact
        /// </summary>
        /// <value>Listing of the transactional attributes for the contact</value>
        [JsonPropertyName("transacAttributes")]
        public List<Object>? TransacAttributes { get { return this.TransacAttributesOption; } set { this.TransacAttributesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExtendedContactDetailsAllOfStatistics {\n");
            sb.Append("  MessagesSent: ").Append(MessagesSent).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  Complaints: ").Append(Complaints).Append("\n");
            sb.Append("  Unsubscriptions: ").Append(Unsubscriptions).Append("\n");
            sb.Append("  Opened: ").Append(Opened).Append("\n");
            sb.Append("  Clicked: ").Append(Clicked).Append("\n");
            sb.Append("  TransacAttributes: ").Append(TransacAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetExtendedContactDetailsAllOfStatistics" />
    /// </summary>
    public class GetExtendedContactDetailsAllOfStatisticsJsonConverter : JsonConverter<GetExtendedContactDetailsAllOfStatistics>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetExtendedContactDetailsAllOfStatistics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetExtendedContactDetailsAllOfStatistics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> messagesSent = default;
            Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> hardBounces = default;
            Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> softBounces = default;
            Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?> complaints = default;
            Option<GetExtendedContactDetailsAllOfStatisticsUnsubscriptions?> unsubscriptions = default;
            Option<List<GetExtendedContactDetailsAllOfStatisticsOpened>?> opened = default;
            Option<List<GetExtendedContactDetailsAllOfStatisticsClicked>?> clicked = default;
            Option<List<Object>?> transacAttributes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messagesSent":
                            messagesSent = new Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hardBounces":
                            hardBounces = new Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "softBounces":
                            softBounces = new Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "complaints":
                            complaints = new Option<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsMessagesSent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "unsubscriptions":
                            unsubscriptions = new Option<GetExtendedContactDetailsAllOfStatisticsUnsubscriptions?>(JsonSerializer.Deserialize<GetExtendedContactDetailsAllOfStatisticsUnsubscriptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "opened":
                            opened = new Option<List<GetExtendedContactDetailsAllOfStatisticsOpened>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsOpened>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clicked":
                            clicked = new Option<List<GetExtendedContactDetailsAllOfStatisticsClicked>?>(JsonSerializer.Deserialize<List<GetExtendedContactDetailsAllOfStatisticsClicked>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "transacAttributes":
                            transacAttributes = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (messagesSent.IsSet && messagesSent.Value == null)
                throw new ArgumentNullException(nameof(messagesSent), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (hardBounces.IsSet && hardBounces.Value == null)
                throw new ArgumentNullException(nameof(hardBounces), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (softBounces.IsSet && softBounces.Value == null)
                throw new ArgumentNullException(nameof(softBounces), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (complaints.IsSet && complaints.Value == null)
                throw new ArgumentNullException(nameof(complaints), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (unsubscriptions.IsSet && unsubscriptions.Value == null)
                throw new ArgumentNullException(nameof(unsubscriptions), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (opened.IsSet && opened.Value == null)
                throw new ArgumentNullException(nameof(opened), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (clicked.IsSet && clicked.Value == null)
                throw new ArgumentNullException(nameof(clicked), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            if (transacAttributes.IsSet && transacAttributes.Value == null)
                throw new ArgumentNullException(nameof(transacAttributes), "Property is not nullable for class GetExtendedContactDetailsAllOfStatistics.");

            return new GetExtendedContactDetailsAllOfStatistics(messagesSent, hardBounces, softBounces, complaints, unsubscriptions, opened, clicked, transacAttributes);
        }

        /// <summary>
        /// Serializes a <see cref="GetExtendedContactDetailsAllOfStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedContactDetailsAllOfStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetExtendedContactDetailsAllOfStatistics getExtendedContactDetailsAllOfStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getExtendedContactDetailsAllOfStatistics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetExtendedContactDetailsAllOfStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedContactDetailsAllOfStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetExtendedContactDetailsAllOfStatistics getExtendedContactDetailsAllOfStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getExtendedContactDetailsAllOfStatistics.MessagesSentOption.IsSet && getExtendedContactDetailsAllOfStatistics.MessagesSent == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.MessagesSent), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.HardBouncesOption.IsSet && getExtendedContactDetailsAllOfStatistics.HardBounces == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.HardBounces), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.SoftBouncesOption.IsSet && getExtendedContactDetailsAllOfStatistics.SoftBounces == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.SoftBounces), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.ComplaintsOption.IsSet && getExtendedContactDetailsAllOfStatistics.Complaints == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.Complaints), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.UnsubscriptionsOption.IsSet && getExtendedContactDetailsAllOfStatistics.Unsubscriptions == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.Unsubscriptions), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.OpenedOption.IsSet && getExtendedContactDetailsAllOfStatistics.Opened == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.Opened), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.ClickedOption.IsSet && getExtendedContactDetailsAllOfStatistics.Clicked == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.Clicked), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.TransacAttributesOption.IsSet && getExtendedContactDetailsAllOfStatistics.TransacAttributes == null)
                throw new ArgumentNullException(nameof(getExtendedContactDetailsAllOfStatistics.TransacAttributes), "Property is required for class GetExtendedContactDetailsAllOfStatistics.");

            if (getExtendedContactDetailsAllOfStatistics.MessagesSentOption.IsSet)
            {
                writer.WritePropertyName("messagesSent");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.MessagesSent, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.HardBouncesOption.IsSet)
            {
                writer.WritePropertyName("hardBounces");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.HardBounces, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.SoftBouncesOption.IsSet)
            {
                writer.WritePropertyName("softBounces");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.SoftBounces, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.ComplaintsOption.IsSet)
            {
                writer.WritePropertyName("complaints");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.Complaints, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.UnsubscriptionsOption.IsSet)
            {
                writer.WritePropertyName("unsubscriptions");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.Unsubscriptions, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.OpenedOption.IsSet)
            {
                writer.WritePropertyName("opened");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.Opened, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.ClickedOption.IsSet)
            {
                writer.WritePropertyName("clicked");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.Clicked, jsonSerializerOptions);
            }
            if (getExtendedContactDetailsAllOfStatistics.TransacAttributesOption.IsSet)
            {
                writer.WritePropertyName("transacAttributes");
                JsonSerializer.Serialize(writer, getExtendedContactDetailsAllOfStatistics.TransacAttributes, jsonSerializerOptions);
            }
        }
    }
}
