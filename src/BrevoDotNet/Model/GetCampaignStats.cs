// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetCampaignStats
    /// </summary>
    public partial class GetCampaignStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCampaignStats" /> class.
        /// </summary>
        /// <param name="uniqueClicks">Number of unique clicks for the campaign</param>
        /// <param name="clickers">Number of total clicks for the campaign</param>
        /// <param name="complaints">Number of complaints (Spam reports) for the campaign</param>
        /// <param name="delivered">Number of delivered emails for the campaign</param>
        /// <param name="sent">Number of sent emails for the campaign</param>
        /// <param name="softBounces">Number of softbounce for the campaign</param>
        /// <param name="hardBounces">Number of harbounce for the campaign</param>
        /// <param name="uniqueViews">Number of unique openings for the campaign</param>
        /// <param name="trackableViews">Recipients without any privacy protection option enabled in their email client</param>
        /// <param name="unsubscriptions">Number of unsubscription for the campaign</param>
        /// <param name="viewed">Number of openings for the campaign</param>
        /// <param name="listId">List Id of email campaign (only in case of get email campaign(s)(not for global stats))</param>
        /// <param name="deferred">Number of deferred emails for the campaign</param>
        /// <param name="returnBounce">Total number of non-delivered campaigns for a particular campaign id.</param>
        [JsonConstructor]
        public GetCampaignStats(long uniqueClicks, long clickers, long complaints, long delivered, long sent, long softBounces, long hardBounces, long uniqueViews, long trackableViews, long unsubscriptions, long viewed, Option<long?> listId = default, Option<long?> deferred = default, Option<long?> returnBounce = default)
        {
            UniqueClicks = uniqueClicks;
            Clickers = clickers;
            Complaints = complaints;
            Delivered = delivered;
            Sent = sent;
            SoftBounces = softBounces;
            HardBounces = hardBounces;
            UniqueViews = uniqueViews;
            TrackableViews = trackableViews;
            Unsubscriptions = unsubscriptions;
            Viewed = viewed;
            ListIdOption = listId;
            DeferredOption = deferred;
            ReturnBounceOption = returnBounce;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of unique clicks for the campaign
        /// </summary>
        /// <value>Number of unique clicks for the campaign</value>
        /* <example>2300</example> */
        [JsonPropertyName("uniqueClicks")]
        public long UniqueClicks { get; set; }

        /// <summary>
        /// Number of total clicks for the campaign
        /// </summary>
        /// <value>Number of total clicks for the campaign</value>
        /* <example>2665</example> */
        [JsonPropertyName("clickers")]
        public long Clickers { get; set; }

        /// <summary>
        /// Number of complaints (Spam reports) for the campaign
        /// </summary>
        /// <value>Number of complaints (Spam reports) for the campaign</value>
        /* <example>1</example> */
        [JsonPropertyName("complaints")]
        public long Complaints { get; set; }

        /// <summary>
        /// Number of delivered emails for the campaign
        /// </summary>
        /// <value>Number of delivered emails for the campaign</value>
        /* <example>19765</example> */
        [JsonPropertyName("delivered")]
        public long Delivered { get; set; }

        /// <summary>
        /// Number of sent emails for the campaign
        /// </summary>
        /// <value>Number of sent emails for the campaign</value>
        /* <example>19887</example> */
        [JsonPropertyName("sent")]
        public long Sent { get; set; }

        /// <summary>
        /// Number of softbounce for the campaign
        /// </summary>
        /// <value>Number of softbounce for the campaign</value>
        /* <example>100</example> */
        [JsonPropertyName("softBounces")]
        public long SoftBounces { get; set; }

        /// <summary>
        /// Number of harbounce for the campaign
        /// </summary>
        /// <value>Number of harbounce for the campaign</value>
        /* <example>87</example> */
        [JsonPropertyName("hardBounces")]
        public long HardBounces { get; set; }

        /// <summary>
        /// Number of unique openings for the campaign
        /// </summary>
        /// <value>Number of unique openings for the campaign</value>
        /* <example>7779</example> */
        [JsonPropertyName("uniqueViews")]
        public long UniqueViews { get; set; }

        /// <summary>
        /// Recipients without any privacy protection option enabled in their email client
        /// </summary>
        /// <value>Recipients without any privacy protection option enabled in their email client</value>
        /* <example>5661</example> */
        [JsonPropertyName("trackableViews")]
        public long TrackableViews { get; set; }

        /// <summary>
        /// Number of unsubscription for the campaign
        /// </summary>
        /// <value>Number of unsubscription for the campaign</value>
        /* <example>2</example> */
        [JsonPropertyName("unsubscriptions")]
        public long Unsubscriptions { get; set; }

        /// <summary>
        /// Number of openings for the campaign
        /// </summary>
        /// <value>Number of openings for the campaign</value>
        /* <example>8999</example> */
        [JsonPropertyName("viewed")]
        public long Viewed { get; set; }

        /// <summary>
        /// Used to track the state of ListId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ListIdOption { get; private set; }

        /// <summary>
        /// List Id of email campaign (only in case of get email campaign(s)(not for global stats))
        /// </summary>
        /// <value>List Id of email campaign (only in case of get email campaign(s)(not for global stats))</value>
        /* <example>2</example> */
        [JsonPropertyName("listId")]
        public long? ListId { get { return this.ListIdOption; } set { this.ListIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deferred
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeferredOption { get; private set; }

        /// <summary>
        /// Number of deferred emails for the campaign
        /// </summary>
        /// <value>Number of deferred emails for the campaign</value>
        /* <example>30</example> */
        [JsonPropertyName("deferred")]
        public long? Deferred { get { return this.DeferredOption; } set { this.DeferredOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReturnBounce
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ReturnBounceOption { get; private set; }

        /// <summary>
        /// Total number of non-delivered campaigns for a particular campaign id.
        /// </summary>
        /// <value>Total number of non-delivered campaigns for a particular campaign id.</value>
        /* <example>5</example> */
        [JsonPropertyName("returnBounce")]
        public long? ReturnBounce { get { return this.ReturnBounceOption; } set { this.ReturnBounceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCampaignStats {\n");
            sb.Append("  UniqueClicks: ").Append(UniqueClicks).Append("\n");
            sb.Append("  Clickers: ").Append(Clickers).Append("\n");
            sb.Append("  Complaints: ").Append(Complaints).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  UniqueViews: ").Append(UniqueViews).Append("\n");
            sb.Append("  TrackableViews: ").Append(TrackableViews).Append("\n");
            sb.Append("  Unsubscriptions: ").Append(Unsubscriptions).Append("\n");
            sb.Append("  Viewed: ").Append(Viewed).Append("\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  Deferred: ").Append(Deferred).Append("\n");
            sb.Append("  ReturnBounce: ").Append(ReturnBounce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetCampaignStats" />
    /// </summary>
    public class GetCampaignStatsJsonConverter : JsonConverter<GetCampaignStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetCampaignStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetCampaignStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> uniqueClicks = default;
            Option<long?> clickers = default;
            Option<long?> complaints = default;
            Option<long?> delivered = default;
            Option<long?> sent = default;
            Option<long?> softBounces = default;
            Option<long?> hardBounces = default;
            Option<long?> uniqueViews = default;
            Option<long?> trackableViews = default;
            Option<long?> unsubscriptions = default;
            Option<long?> viewed = default;
            Option<long?> listId = default;
            Option<long?> deferred = default;
            Option<long?> returnBounce = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "uniqueClicks":
                            uniqueClicks = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "clickers":
                            clickers = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "complaints":
                            complaints = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "delivered":
                            delivered = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "sent":
                            sent = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "softBounces":
                            softBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "hardBounces":
                            hardBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "uniqueViews":
                            uniqueViews = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trackableViews":
                            trackableViews = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "unsubscriptions":
                            unsubscriptions = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "viewed":
                            viewed = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "listId":
                            listId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "deferred":
                            deferred = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "returnBounce":
                            returnBounce = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!uniqueClicks.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(uniqueClicks));

            if (!clickers.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(clickers));

            if (!complaints.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(complaints));

            if (!delivered.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(delivered));

            if (!sent.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(sent));

            if (!softBounces.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(softBounces));

            if (!hardBounces.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(hardBounces));

            if (!uniqueViews.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(uniqueViews));

            if (!trackableViews.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(trackableViews));

            if (!unsubscriptions.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(unsubscriptions));

            if (!viewed.IsSet)
                throw new ArgumentException("Property is required for class GetCampaignStats.", nameof(viewed));

            if (uniqueClicks.IsSet && uniqueClicks.Value == null)
                throw new ArgumentNullException(nameof(uniqueClicks), "Property is not nullable for class GetCampaignStats.");

            if (clickers.IsSet && clickers.Value == null)
                throw new ArgumentNullException(nameof(clickers), "Property is not nullable for class GetCampaignStats.");

            if (complaints.IsSet && complaints.Value == null)
                throw new ArgumentNullException(nameof(complaints), "Property is not nullable for class GetCampaignStats.");

            if (delivered.IsSet && delivered.Value == null)
                throw new ArgumentNullException(nameof(delivered), "Property is not nullable for class GetCampaignStats.");

            if (sent.IsSet && sent.Value == null)
                throw new ArgumentNullException(nameof(sent), "Property is not nullable for class GetCampaignStats.");

            if (softBounces.IsSet && softBounces.Value == null)
                throw new ArgumentNullException(nameof(softBounces), "Property is not nullable for class GetCampaignStats.");

            if (hardBounces.IsSet && hardBounces.Value == null)
                throw new ArgumentNullException(nameof(hardBounces), "Property is not nullable for class GetCampaignStats.");

            if (uniqueViews.IsSet && uniqueViews.Value == null)
                throw new ArgumentNullException(nameof(uniqueViews), "Property is not nullable for class GetCampaignStats.");

            if (trackableViews.IsSet && trackableViews.Value == null)
                throw new ArgumentNullException(nameof(trackableViews), "Property is not nullable for class GetCampaignStats.");

            if (unsubscriptions.IsSet && unsubscriptions.Value == null)
                throw new ArgumentNullException(nameof(unsubscriptions), "Property is not nullable for class GetCampaignStats.");

            if (viewed.IsSet && viewed.Value == null)
                throw new ArgumentNullException(nameof(viewed), "Property is not nullable for class GetCampaignStats.");

            if (listId.IsSet && listId.Value == null)
                throw new ArgumentNullException(nameof(listId), "Property is not nullable for class GetCampaignStats.");

            if (deferred.IsSet && deferred.Value == null)
                throw new ArgumentNullException(nameof(deferred), "Property is not nullable for class GetCampaignStats.");

            if (returnBounce.IsSet && returnBounce.Value == null)
                throw new ArgumentNullException(nameof(returnBounce), "Property is not nullable for class GetCampaignStats.");

            return new GetCampaignStats(uniqueClicks.Value!.Value!, clickers.Value!.Value!, complaints.Value!.Value!, delivered.Value!.Value!, sent.Value!.Value!, softBounces.Value!.Value!, hardBounces.Value!.Value!, uniqueViews.Value!.Value!, trackableViews.Value!.Value!, unsubscriptions.Value!.Value!, viewed.Value!.Value!, listId, deferred, returnBounce);
        }

        /// <summary>
        /// Serializes a <see cref="GetCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetCampaignStats getCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getCampaignStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetCampaignStats getCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("uniqueClicks", getCampaignStats.UniqueClicks);

            writer.WriteNumber("clickers", getCampaignStats.Clickers);

            writer.WriteNumber("complaints", getCampaignStats.Complaints);

            writer.WriteNumber("delivered", getCampaignStats.Delivered);

            writer.WriteNumber("sent", getCampaignStats.Sent);

            writer.WriteNumber("softBounces", getCampaignStats.SoftBounces);

            writer.WriteNumber("hardBounces", getCampaignStats.HardBounces);

            writer.WriteNumber("uniqueViews", getCampaignStats.UniqueViews);

            writer.WriteNumber("trackableViews", getCampaignStats.TrackableViews);

            writer.WriteNumber("unsubscriptions", getCampaignStats.Unsubscriptions);

            writer.WriteNumber("viewed", getCampaignStats.Viewed);

            if (getCampaignStats.ListIdOption.IsSet)
                writer.WriteNumber("listId", getCampaignStats.ListIdOption.Value!.Value);

            if (getCampaignStats.DeferredOption.IsSet)
                writer.WriteNumber("deferred", getCampaignStats.DeferredOption.Value!.Value);

            if (getCampaignStats.ReturnBounceOption.IsSet)
                writer.WriteNumber("returnBounce", getCampaignStats.ReturnBounceOption.Value!.Value);
        }
    }
}
