// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetTransacEmailsListTransactionalEmailsInner
    /// </summary>
    public partial class GetTransacEmailsListTransactionalEmailsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransacEmailsListTransactionalEmailsInner" /> class.
        /// </summary>
        /// <param name="email">Email address to which transactional email has been sent</param>
        /// <param name="subject">Subject of the sent email</param>
        /// <param name="messageId">Message Id of the sent email</param>
        /// <param name="uuid">Unique id of the email sent to a particular contact</param>
        /// <param name="date">Date on which transactional email was sent</param>
        /// <param name="templateId">Id of the template</param>
        /// <param name="from">Email address of the sender from which the email was sent</param>
        /// <param name="tags">Tags used for your email</param>
        [JsonConstructor]
        public GetTransacEmailsListTransactionalEmailsInner(string email, string subject, string messageId, string uuid, DateTime date, Option<long?> templateId = default, Option<string?> from = default, Option<List<string>?> tags = default)
        {
            Email = email;
            Subject = subject;
            MessageId = messageId;
            Uuid = uuid;
            Date = date;
            TemplateIdOption = templateId;
            FromOption = from;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Email address to which transactional email has been sent
        /// </summary>
        /// <value>Email address to which transactional email has been sent</value>
        /* <example>john.smith@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Subject of the sent email
        /// </summary>
        /// <value>Subject of the sent email</value>
        /* <example>Summer Camp</example> */
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Message Id of the sent email
        /// </summary>
        /// <value>Message Id of the sent email</value>
        /* <example>&lt;201798300811.5700093@relay.domain.com&gt;</example> */
        [JsonPropertyName("messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Unique id of the email sent to a particular contact
        /// </summary>
        /// <value>Unique id of the email sent to a particular contact</value>
        /* <example>5a78c-209ok98262910-s99a341</example> */
        [JsonPropertyName("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Date on which transactional email was sent
        /// </summary>
        /// <value>Date on which transactional email was sent</value>
        /* <example>2017-03-12T12:30Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Id of the template
        /// </summary>
        /// <value>Id of the template</value>
        /* <example>2</example> */
        [JsonPropertyName("templateId")]
        public long? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of From
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromOption { get; private set; }

        /// <summary>
        /// Email address of the sender from which the email was sent
        /// </summary>
        /// <value>Email address of the sender from which the email was sent</value>
        /* <example>diana.doe@example.com</example> */
        [JsonPropertyName("from")]
        public string? From { get { return this.FromOption; } set { this.FromOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Tags used for your email
        /// </summary>
        /// <value>Tags used for your email</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTransacEmailsListTransactionalEmailsInner {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTransacEmailsListTransactionalEmailsInner" />
    /// </summary>
    public class GetTransacEmailsListTransactionalEmailsInnerJsonConverter : JsonConverter<GetTransacEmailsListTransactionalEmailsInner>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetTransacEmailsListTransactionalEmailsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTransacEmailsListTransactionalEmailsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> subject = default;
            Option<string?> messageId = default;
            Option<string?> uuid = default;
            Option<DateTime?> date = default;
            Option<long?> templateId = default;
            Option<string?> from = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "messageId":
                            messageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "uuid":
                            uuid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "templateId":
                            templateId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "from":
                            from = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailsListTransactionalEmailsInner.", nameof(email));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailsListTransactionalEmailsInner.", nameof(subject));

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailsListTransactionalEmailsInner.", nameof(messageId));

            if (!uuid.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailsListTransactionalEmailsInner.", nameof(uuid));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class GetTransacEmailsListTransactionalEmailsInner.", nameof(date));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (uuid.IsSet && uuid.Value == null)
                throw new ArgumentNullException(nameof(uuid), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class GetTransacEmailsListTransactionalEmailsInner.");

            return new GetTransacEmailsListTransactionalEmailsInner(email.Value!, subject.Value!, messageId.Value!, uuid.Value!, date.Value!.Value!, templateId, from, tags);
        }

        /// <summary>
        /// Serializes a <see cref="GetTransacEmailsListTransactionalEmailsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransacEmailsListTransactionalEmailsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTransacEmailsListTransactionalEmailsInner getTransacEmailsListTransactionalEmailsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTransacEmailsListTransactionalEmailsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTransacEmailsListTransactionalEmailsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransacEmailsListTransactionalEmailsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTransacEmailsListTransactionalEmailsInner getTransacEmailsListTransactionalEmailsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTransacEmailsListTransactionalEmailsInner.Email == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.Email), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            if (getTransacEmailsListTransactionalEmailsInner.Subject == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.Subject), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            if (getTransacEmailsListTransactionalEmailsInner.MessageId == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.MessageId), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            if (getTransacEmailsListTransactionalEmailsInner.Uuid == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.Uuid), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            if (getTransacEmailsListTransactionalEmailsInner.FromOption.IsSet && getTransacEmailsListTransactionalEmailsInner.From == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.From), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            if (getTransacEmailsListTransactionalEmailsInner.TagsOption.IsSet && getTransacEmailsListTransactionalEmailsInner.Tags == null)
                throw new ArgumentNullException(nameof(getTransacEmailsListTransactionalEmailsInner.Tags), "Property is required for class GetTransacEmailsListTransactionalEmailsInner.");

            writer.WriteString("email", getTransacEmailsListTransactionalEmailsInner.Email);

            writer.WriteString("subject", getTransacEmailsListTransactionalEmailsInner.Subject);

            writer.WriteString("messageId", getTransacEmailsListTransactionalEmailsInner.MessageId);

            writer.WriteString("uuid", getTransacEmailsListTransactionalEmailsInner.Uuid);

            writer.WriteString("date", getTransacEmailsListTransactionalEmailsInner.Date.ToString(DateFormat));

            if (getTransacEmailsListTransactionalEmailsInner.TemplateIdOption.IsSet)
                writer.WriteNumber("templateId", getTransacEmailsListTransactionalEmailsInner.TemplateIdOption.Value!.Value);

            if (getTransacEmailsListTransactionalEmailsInner.FromOption.IsSet)
                writer.WriteString("from", getTransacEmailsListTransactionalEmailsInner.From);

            if (getTransacEmailsListTransactionalEmailsInner.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, getTransacEmailsListTransactionalEmailsInner.Tags, jsonSerializerOptions);
            }
        }
    }
}
