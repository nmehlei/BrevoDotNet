// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetWATemplatesTemplatesInner
    /// </summary>
    public partial class GetWATemplatesTemplatesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWATemplatesTemplatesInner" /> class.
        /// </summary>
        /// <param name="id">id of the template</param>
        /// <param name="name">Name of the WhatsApp template</param>
        /// <param name="status">Status of the WhatsApp template</param>
        /// <param name="language">Language in which template exists</param>
        /// <param name="category">category of the template</param>
        /// <param name="createdAt">Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="errorReason">Error reason in the template creation</param>
        [JsonConstructor]
        public GetWATemplatesTemplatesInner(string id, string name, string status, string language, string category, string createdAt, string modifiedAt, Option<string?> errorReason = default)
        {
            Id = id;
            Name = name;
            Status = status;
            Language = language;
            Category = category;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            ErrorReasonOption = errorReason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// id of the template
        /// </summary>
        /// <value>id of the template</value>
        /* <example>235</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the WhatsApp template
        /// </summary>
        /// <value>Name of the WhatsApp template</value>
        /* <example>Test template</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Status of the WhatsApp template
        /// </summary>
        /// <value>Status of the WhatsApp template</value>
        /* <example>approved</example> */
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Language in which template exists
        /// </summary>
        /// <value>Language in which template exists</value>
        /* <example>en</example> */
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// category of the template
        /// </summary>
        /// <value>category of the template</value>
        /* <example>MARKETING</example> */
        [JsonPropertyName("category")]
        public string Category { get; set; }

        /// <summary>
        /// Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-06-01T12:30:00Z</example> */
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30:00Z</example> */
        [JsonPropertyName("modifiedAt")]
        public string ModifiedAt { get; set; }

        /// <summary>
        /// Used to track the state of ErrorReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorReasonOption { get; private set; }

        /// <summary>
        /// Error reason in the template creation
        /// </summary>
        /// <value>Error reason in the template creation</value>
        /* <example>NONE</example> */
        [JsonPropertyName("errorReason")]
        public string? ErrorReason { get { return this.ErrorReasonOption; } set { this.ErrorReasonOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWATemplatesTemplatesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetWATemplatesTemplatesInner" />
    /// </summary>
    public class GetWATemplatesTemplatesInnerJsonConverter : JsonConverter<GetWATemplatesTemplatesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetWATemplatesTemplatesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetWATemplatesTemplatesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> status = default;
            Option<string?> language = default;
            Option<string?> category = default;
            Option<string?> createdAt = default;
            Option<string?> modifiedAt = default;
            Option<string?> errorReason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "errorReason":
                            errorReason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(name));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(status));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(language));

            if (!category.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(category));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetWATemplatesTemplatesInner.", nameof(modifiedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            if (errorReason.IsSet && errorReason.Value == null)
                throw new ArgumentNullException(nameof(errorReason), "Property is not nullable for class GetWATemplatesTemplatesInner.");

            return new GetWATemplatesTemplatesInner(id.Value!, name.Value!, status.Value!, language.Value!, category.Value!, createdAt.Value!, modifiedAt.Value!, errorReason);
        }

        /// <summary>
        /// Serializes a <see cref="GetWATemplatesTemplatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWATemplatesTemplatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetWATemplatesTemplatesInner getWATemplatesTemplatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getWATemplatesTemplatesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetWATemplatesTemplatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWATemplatesTemplatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetWATemplatesTemplatesInner getWATemplatesTemplatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getWATemplatesTemplatesInner.Id == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.Id), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.Name == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.Name), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.Status == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.Status), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.Language == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.Language), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.Category == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.Category), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.CreatedAt == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.CreatedAt), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.ModifiedAt == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.ModifiedAt), "Property is required for class GetWATemplatesTemplatesInner.");

            if (getWATemplatesTemplatesInner.ErrorReasonOption.IsSet && getWATemplatesTemplatesInner.ErrorReason == null)
                throw new ArgumentNullException(nameof(getWATemplatesTemplatesInner.ErrorReason), "Property is required for class GetWATemplatesTemplatesInner.");

            writer.WriteString("id", getWATemplatesTemplatesInner.Id);

            writer.WriteString("name", getWATemplatesTemplatesInner.Name);

            writer.WriteString("status", getWATemplatesTemplatesInner.Status);

            writer.WriteString("language", getWATemplatesTemplatesInner.Language);

            writer.WriteString("category", getWATemplatesTemplatesInner.Category);

            writer.WriteString("createdAt", getWATemplatesTemplatesInner.CreatedAt);

            writer.WriteString("modifiedAt", getWATemplatesTemplatesInner.ModifiedAt);

            if (getWATemplatesTemplatesInner.ErrorReasonOption.IsSet)
                writer.WriteString("errorReason", getWATemplatesTemplatesInner.ErrorReason);
        }
    }
}
