// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// RequestContactExport
    /// </summary>
    public partial class RequestContactExport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExport" /> class.
        /// </summary>
        /// <param name="exportAttributes">List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;, &#39;CONTACT ID&#39;].</param>
        /// <param name="contactFilter">This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {\&quot;blacklisted\&quot;:true} will export all the blacklisted contacts. </param>
        /// <param name="customContactFilter">customContactFilter</param>
        /// <param name="notifyUrl">Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479</param>
        /// <param name="skipFilesMerge">To stop merging the file into single file (default to false)</param>
        /// <param name="disableNotification">To disable email notification (default to false)</param>
        /// <param name="disableFrontendNotification">To disable frontend notification (default to false)</param>
        /// <param name="exportMandatoryAttributes">To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME (default to true)</param>
        /// <param name="exportSubscriptionStatus">Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact.</param>
        /// <param name="exportMetadata">Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.</param>
        [JsonConstructor]
        public RequestContactExport(Option<List<string>?> exportAttributes = default, Option<Object?> contactFilter = default, Option<RequestContactExportCustomContactFilter?> customContactFilter = default, Option<string?> notifyUrl = default, Option<bool?> skipFilesMerge = default, Option<bool?> disableNotification = default, Option<bool?> disableFrontendNotification = default, Option<bool?> exportMandatoryAttributes = default, Option<List<string>?> exportSubscriptionStatus = default, Option<List<string>?> exportMetadata = default)
        {
            ExportAttributesOption = exportAttributes;
            ContactFilterOption = contactFilter;
            CustomContactFilterOption = customContactFilter;
            NotifyUrlOption = notifyUrl;
            SkipFilesMergeOption = skipFilesMerge;
            DisableNotificationOption = disableNotification;
            DisableFrontendNotificationOption = disableFrontendNotification;
            ExportMandatoryAttributesOption = exportMandatoryAttributes;
            ExportSubscriptionStatusOption = exportSubscriptionStatus;
            ExportMetadataOption = exportMetadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExportAttributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ExportAttributesOption { get; private set; }

        /// <summary>
        /// List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;, &#39;CONTACT ID&#39;].
        /// </summary>
        /// <value>List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;, &#39;CONTACT ID&#39;].</value>
        [JsonPropertyName("exportAttributes")]
        public List<string>? ExportAttributes { get { return this.ExportAttributesOption; } set { this.ExportAttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactFilter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ContactFilterOption { get; private set; }

        /// <summary>
        /// This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {\&quot;blacklisted\&quot;:true} will export all the blacklisted contacts. 
        /// </summary>
        /// <value>This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {\&quot;blacklisted\&quot;:true} will export all the blacklisted contacts. </value>
        /* <example>{&quot;blacklisted&quot;:true,&quot;listid.id&quot;:32}</example> */
        [JsonPropertyName("contactFilter")]
        public Object? ContactFilter { get { return this.ContactFilterOption; } set { this.ContactFilterOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomContactFilter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RequestContactExportCustomContactFilter?> CustomContactFilterOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomContactFilter
        /// </summary>
        [JsonPropertyName("customContactFilter")]
        public RequestContactExportCustomContactFilter? CustomContactFilter { get { return this.CustomContactFilterOption; } set { this.CustomContactFilterOption = new(value); } }

        /// <summary>
        /// Used to track the state of NotifyUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotifyUrlOption { get; private set; }

        /// <summary>
        /// Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
        /// </summary>
        /// <value>Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479</value>
        /* <example>http://requestb.in/173lyyx1</example> */
        [JsonPropertyName("notifyUrl")]
        public string? NotifyUrl { get { return this.NotifyUrlOption; } set { this.NotifyUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of SkipFilesMerge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SkipFilesMergeOption { get; private set; }

        /// <summary>
        /// To stop merging the file into single file
        /// </summary>
        /// <value>To stop merging the file into single file</value>
        /* <example>false</example> */
        [JsonPropertyName("skipFilesMerge")]
        public bool? SkipFilesMerge { get { return this.SkipFilesMergeOption; } set { this.SkipFilesMergeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisableNotification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisableNotificationOption { get; private set; }

        /// <summary>
        /// To disable email notification
        /// </summary>
        /// <value>To disable email notification</value>
        /* <example>false</example> */
        [JsonPropertyName("disableNotification")]
        public bool? DisableNotification { get { return this.DisableNotificationOption; } set { this.DisableNotificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisableFrontendNotification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisableFrontendNotificationOption { get; private set; }

        /// <summary>
        /// To disable frontend notification
        /// </summary>
        /// <value>To disable frontend notification</value>
        /* <example>false</example> */
        [JsonPropertyName("disableFrontendNotification")]
        public bool? DisableFrontendNotification { get { return this.DisableFrontendNotificationOption; } set { this.DisableFrontendNotificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExportMandatoryAttributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExportMandatoryAttributesOption { get; private set; }

        /// <summary>
        /// To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME
        /// </summary>
        /// <value>To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME</value>
        /* <example>false</example> */
        [JsonPropertyName("exportMandatoryAttributes")]
        public bool? ExportMandatoryAttributes { get { return this.ExportMandatoryAttributesOption; } set { this.ExportMandatoryAttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExportSubscriptionStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ExportSubscriptionStatusOption { get; private set; }

        /// <summary>
        /// Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact.
        /// </summary>
        /// <value>Export subscription status of contacts for email &amp; sms marketting. Pass email_marketing to obtain the marketing email subscription status &amp; sms_marketing to retrieve the marketing SMS status of the contact.</value>
        [JsonPropertyName("exportSubscriptionStatus")]
        public List<string>? ExportSubscriptionStatus { get { return this.ExportSubscriptionStatusOption; } set { this.ExportSubscriptionStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExportMetadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ExportMetadataOption { get; private set; }

        /// <summary>
        /// Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.
        /// </summary>
        /// <value>Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.</value>
        [JsonPropertyName("exportMetadata")]
        public List<string>? ExportMetadata { get { return this.ExportMetadataOption; } set { this.ExportMetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestContactExport {\n");
            sb.Append("  ExportAttributes: ").Append(ExportAttributes).Append("\n");
            sb.Append("  ContactFilter: ").Append(ContactFilter).Append("\n");
            sb.Append("  CustomContactFilter: ").Append(CustomContactFilter).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("  SkipFilesMerge: ").Append(SkipFilesMerge).Append("\n");
            sb.Append("  DisableNotification: ").Append(DisableNotification).Append("\n");
            sb.Append("  DisableFrontendNotification: ").Append(DisableFrontendNotification).Append("\n");
            sb.Append("  ExportMandatoryAttributes: ").Append(ExportMandatoryAttributes).Append("\n");
            sb.Append("  ExportSubscriptionStatus: ").Append(ExportSubscriptionStatus).Append("\n");
            sb.Append("  ExportMetadata: ").Append(ExportMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RequestContactExport" />
    /// </summary>
    public class RequestContactExportJsonConverter : JsonConverter<RequestContactExport>
    {
        /// <summary>
        /// Deserializes json to <see cref="RequestContactExport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RequestContactExport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> exportAttributes = default;
            Option<Object?> contactFilter = default;
            Option<RequestContactExportCustomContactFilter?> customContactFilter = default;
            Option<string?> notifyUrl = default;
            Option<bool?> skipFilesMerge = default;
            Option<bool?> disableNotification = default;
            Option<bool?> disableFrontendNotification = default;
            Option<bool?> exportMandatoryAttributes = default;
            Option<List<string>?> exportSubscriptionStatus = default;
            Option<List<string>?> exportMetadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exportAttributes":
                            exportAttributes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "contactFilter":
                            contactFilter = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "customContactFilter":
                            customContactFilter = new Option<RequestContactExportCustomContactFilter?>(JsonSerializer.Deserialize<RequestContactExportCustomContactFilter>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notifyUrl":
                            notifyUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "skipFilesMerge":
                            skipFilesMerge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "disableNotification":
                            disableNotification = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "disableFrontendNotification":
                            disableFrontendNotification = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "exportMandatoryAttributes":
                            exportMandatoryAttributes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "exportSubscriptionStatus":
                            exportSubscriptionStatus = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "exportMetadata":
                            exportMetadata = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (exportAttributes.IsSet && exportAttributes.Value == null)
                throw new ArgumentNullException(nameof(exportAttributes), "Property is not nullable for class RequestContactExport.");

            if (contactFilter.IsSet && contactFilter.Value == null)
                throw new ArgumentNullException(nameof(contactFilter), "Property is not nullable for class RequestContactExport.");

            if (customContactFilter.IsSet && customContactFilter.Value == null)
                throw new ArgumentNullException(nameof(customContactFilter), "Property is not nullable for class RequestContactExport.");

            if (notifyUrl.IsSet && notifyUrl.Value == null)
                throw new ArgumentNullException(nameof(notifyUrl), "Property is not nullable for class RequestContactExport.");

            if (skipFilesMerge.IsSet && skipFilesMerge.Value == null)
                throw new ArgumentNullException(nameof(skipFilesMerge), "Property is not nullable for class RequestContactExport.");

            if (disableNotification.IsSet && disableNotification.Value == null)
                throw new ArgumentNullException(nameof(disableNotification), "Property is not nullable for class RequestContactExport.");

            if (disableFrontendNotification.IsSet && disableFrontendNotification.Value == null)
                throw new ArgumentNullException(nameof(disableFrontendNotification), "Property is not nullable for class RequestContactExport.");

            if (exportMandatoryAttributes.IsSet && exportMandatoryAttributes.Value == null)
                throw new ArgumentNullException(nameof(exportMandatoryAttributes), "Property is not nullable for class RequestContactExport.");

            if (exportSubscriptionStatus.IsSet && exportSubscriptionStatus.Value == null)
                throw new ArgumentNullException(nameof(exportSubscriptionStatus), "Property is not nullable for class RequestContactExport.");

            if (exportMetadata.IsSet && exportMetadata.Value == null)
                throw new ArgumentNullException(nameof(exportMetadata), "Property is not nullable for class RequestContactExport.");

            return new RequestContactExport(exportAttributes, contactFilter, customContactFilter, notifyUrl, skipFilesMerge, disableNotification, disableFrontendNotification, exportMandatoryAttributes, exportSubscriptionStatus, exportMetadata);
        }

        /// <summary>
        /// Serializes a <see cref="RequestContactExport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactExport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RequestContactExport requestContactExport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, requestContactExport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RequestContactExport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="requestContactExport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RequestContactExport requestContactExport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (requestContactExport.ExportAttributesOption.IsSet && requestContactExport.ExportAttributes == null)
                throw new ArgumentNullException(nameof(requestContactExport.ExportAttributes), "Property is required for class RequestContactExport.");

            if (requestContactExport.ContactFilterOption.IsSet && requestContactExport.ContactFilter == null)
                throw new ArgumentNullException(nameof(requestContactExport.ContactFilter), "Property is required for class RequestContactExport.");

            if (requestContactExport.CustomContactFilterOption.IsSet && requestContactExport.CustomContactFilter == null)
                throw new ArgumentNullException(nameof(requestContactExport.CustomContactFilter), "Property is required for class RequestContactExport.");

            if (requestContactExport.NotifyUrlOption.IsSet && requestContactExport.NotifyUrl == null)
                throw new ArgumentNullException(nameof(requestContactExport.NotifyUrl), "Property is required for class RequestContactExport.");

            if (requestContactExport.ExportSubscriptionStatusOption.IsSet && requestContactExport.ExportSubscriptionStatus == null)
                throw new ArgumentNullException(nameof(requestContactExport.ExportSubscriptionStatus), "Property is required for class RequestContactExport.");

            if (requestContactExport.ExportMetadataOption.IsSet && requestContactExport.ExportMetadata == null)
                throw new ArgumentNullException(nameof(requestContactExport.ExportMetadata), "Property is required for class RequestContactExport.");

            if (requestContactExport.ExportAttributesOption.IsSet)
            {
                writer.WritePropertyName("exportAttributes");
                JsonSerializer.Serialize(writer, requestContactExport.ExportAttributes, jsonSerializerOptions);
            }
            if (requestContactExport.ContactFilterOption.IsSet)
            {
                writer.WritePropertyName("contactFilter");
                JsonSerializer.Serialize(writer, requestContactExport.ContactFilter, jsonSerializerOptions);
            }
            if (requestContactExport.CustomContactFilterOption.IsSet)
            {
                writer.WritePropertyName("customContactFilter");
                JsonSerializer.Serialize(writer, requestContactExport.CustomContactFilter, jsonSerializerOptions);
            }
            if (requestContactExport.NotifyUrlOption.IsSet)
                writer.WriteString("notifyUrl", requestContactExport.NotifyUrl);

            if (requestContactExport.SkipFilesMergeOption.IsSet)
                writer.WriteBoolean("skipFilesMerge", requestContactExport.SkipFilesMergeOption.Value!.Value);

            if (requestContactExport.DisableNotificationOption.IsSet)
                writer.WriteBoolean("disableNotification", requestContactExport.DisableNotificationOption.Value!.Value);

            if (requestContactExport.DisableFrontendNotificationOption.IsSet)
                writer.WriteBoolean("disableFrontendNotification", requestContactExport.DisableFrontendNotificationOption.Value!.Value);

            if (requestContactExport.ExportMandatoryAttributesOption.IsSet)
                writer.WriteBoolean("exportMandatoryAttributes", requestContactExport.ExportMandatoryAttributesOption.Value!.Value);

            if (requestContactExport.ExportSubscriptionStatusOption.IsSet)
            {
                writer.WritePropertyName("exportSubscriptionStatus");
                JsonSerializer.Serialize(writer, requestContactExport.ExportSubscriptionStatus, jsonSerializerOptions);
            }
            if (requestContactExport.ExportMetadataOption.IsSet)
            {
                writer.WritePropertyName("exportMetadata");
                JsonSerializer.Serialize(writer, requestContactExport.ExportMetadata, jsonSerializerOptions);
            }
        }
    }
}
