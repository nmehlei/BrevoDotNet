// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// Data regarding the transactional email account
    /// </summary>
    public partial class GetAccountAllOfRelayData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountAllOfRelayData" /> class.
        /// </summary>
        /// <param name="userName">Email to use as login on transactional platform</param>
        /// <param name="relay">URL of the SMTP Relay</param>
        /// <param name="port">Port used for SMTP Relay</param>
        [JsonConstructor]
        public GetAccountAllOfRelayData(string userName, string relay, int port)
        {
            UserName = userName;
            Relay = relay;
            Port = port;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Email to use as login on transactional platform
        /// </summary>
        /// <value>Email to use as login on transactional platform</value>
        /* <example>john.smith@example.com</example> */
        [JsonPropertyName("userName")]
        public string UserName { get; set; }

        /// <summary>
        /// URL of the SMTP Relay
        /// </summary>
        /// <value>URL of the SMTP Relay</value>
        /* <example>relay.domain.com</example> */
        [JsonPropertyName("relay")]
        public string Relay { get; set; }

        /// <summary>
        /// Port used for SMTP Relay
        /// </summary>
        /// <value>Port used for SMTP Relay</value>
        /* <example>125</example> */
        [JsonPropertyName("port")]
        public int Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountAllOfRelayData {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Relay: ").Append(Relay).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAccountAllOfRelayData" />
    /// </summary>
    public class GetAccountAllOfRelayDataJsonConverter : JsonConverter<GetAccountAllOfRelayData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAccountAllOfRelayData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAccountAllOfRelayData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userName = default;
            Option<string?> relay = default;
            Option<int?> port = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userName":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "relay":
                            relay = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfRelayData.", nameof(userName));

            if (!relay.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfRelayData.", nameof(relay));

            if (!port.IsSet)
                throw new ArgumentException("Property is required for class GetAccountAllOfRelayData.", nameof(port));

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class GetAccountAllOfRelayData.");

            if (relay.IsSet && relay.Value == null)
                throw new ArgumentNullException(nameof(relay), "Property is not nullable for class GetAccountAllOfRelayData.");

            if (port.IsSet && port.Value == null)
                throw new ArgumentNullException(nameof(port), "Property is not nullable for class GetAccountAllOfRelayData.");

            return new GetAccountAllOfRelayData(userName.Value!, relay.Value!, port.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetAccountAllOfRelayData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccountAllOfRelayData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAccountAllOfRelayData getAccountAllOfRelayData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAccountAllOfRelayData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAccountAllOfRelayData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAccountAllOfRelayData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAccountAllOfRelayData getAccountAllOfRelayData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAccountAllOfRelayData.UserName == null)
                throw new ArgumentNullException(nameof(getAccountAllOfRelayData.UserName), "Property is required for class GetAccountAllOfRelayData.");

            if (getAccountAllOfRelayData.Relay == null)
                throw new ArgumentNullException(nameof(getAccountAllOfRelayData.Relay), "Property is required for class GetAccountAllOfRelayData.");

            writer.WriteString("userName", getAccountAllOfRelayData.UserName);

            writer.WriteString("relay", getAccountAllOfRelayData.Relay);

            writer.WriteNumber("port", getAccountAllOfRelayData.Port);
        }
    }
}
