// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// CreateChild
    /// </summary>
    public partial class CreateChild : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChild" /> class.
        /// </summary>
        /// <param name="email">Email address to create the child account</param>
        /// <param name="firstName">First name to use to create the child account</param>
        /// <param name="lastName">Last name to use to create the child account</param>
        /// <param name="companyName">Company name to use to create the child account</param>
        /// <param name="password">Password for the child account to login</param>
        /// <param name="language">Language of the child account</param>
        [JsonConstructor]
        public CreateChild(string email, string firstName, string lastName, string companyName, string password, Option<LanguageEnum?> language = default)
        {
            Email = email;
            FirstName = firstName;
            LastName = lastName;
            CompanyName = companyName;
            Password = password;
            LanguageOption = language;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Language of the child account
        /// </summary>
        /// <value>Language of the child account</value>
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            Fr = 1,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            Es = 2,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            Pt = 3,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            It = 4,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            De = 5,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            En = 6
        }

        /// <summary>
        /// Returns a <see cref="LanguageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LanguageEnum LanguageEnumFromString(string value)
        {
            if (value.Equals("fr"))
                return LanguageEnum.Fr;

            if (value.Equals("es"))
                return LanguageEnum.Es;

            if (value.Equals("pt"))
                return LanguageEnum.Pt;

            if (value.Equals("it"))
                return LanguageEnum.It;

            if (value.Equals("de"))
                return LanguageEnum.De;

            if (value.Equals("en"))
                return LanguageEnum.En;

            throw new NotImplementedException($"Could not convert value to type LanguageEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LanguageEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LanguageEnum? LanguageEnumFromStringOrDefault(string value)
        {
            if (value.Equals("fr"))
                return LanguageEnum.Fr;

            if (value.Equals("es"))
                return LanguageEnum.Es;

            if (value.Equals("pt"))
                return LanguageEnum.Pt;

            if (value.Equals("it"))
                return LanguageEnum.It;

            if (value.Equals("de"))
                return LanguageEnum.De;

            if (value.Equals("en"))
                return LanguageEnum.En;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LanguageEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LanguageEnumToJsonValue(LanguageEnum? value)
        {
            if (value == LanguageEnum.Fr)
                return "fr";

            if (value == LanguageEnum.Es)
                return "es";

            if (value == LanguageEnum.Pt)
                return "pt";

            if (value == LanguageEnum.It)
                return "it";

            if (value == LanguageEnum.De)
                return "de";

            if (value == LanguageEnum.En)
                return "en";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LanguageEnum?> LanguageOption { get; private set; }

        /// <summary>
        /// Language of the child account
        /// </summary>
        /// <value>Language of the child account</value>
        /* <example>en</example> */
        [JsonPropertyName("language")]
        public LanguageEnum? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Email address to create the child account
        /// </summary>
        /// <value>Email address to create the child account</value>
        /* <example>josh.cruise@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// First name to use to create the child account
        /// </summary>
        /// <value>First name to use to create the child account</value>
        /* <example>Josh</example> */
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name to use to create the child account
        /// </summary>
        /// <value>Last name to use to create the child account</value>
        /* <example>Cruise</example> */
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Company name to use to create the child account
        /// </summary>
        /// <value>Company name to use to create the child account</value>
        /* <example>Your Company</example> */
        [JsonPropertyName("companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Password for the child account to login
        /// </summary>
        /// <value>Password for the child account to login</value>
        /* <example>Pa55w0rd65</example> */
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateChild {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateChild" />
    /// </summary>
    public class CreateChildJsonConverter : JsonConverter<CreateChild>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateChild" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateChild Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> companyName = default;
            Option<string?> password = default;
            Option<CreateChild.LanguageEnum?> language = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "companyName":
                            companyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language":
                            string? languageRawValue = utf8JsonReader.GetString();
                            if (languageRawValue != null)
                                language = new Option<CreateChild.LanguageEnum?>(CreateChild.LanguageEnumFromStringOrDefault(languageRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class CreateChild.", nameof(email));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class CreateChild.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class CreateChild.", nameof(lastName));

            if (!companyName.IsSet)
                throw new ArgumentException("Property is required for class CreateChild.", nameof(companyName));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class CreateChild.", nameof(password));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class CreateChild.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class CreateChild.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class CreateChild.");

            if (companyName.IsSet && companyName.Value == null)
                throw new ArgumentNullException(nameof(companyName), "Property is not nullable for class CreateChild.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class CreateChild.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class CreateChild.");

            return new CreateChild(email.Value!, firstName.Value!, lastName.Value!, companyName.Value!, password.Value!, language);
        }

        /// <summary>
        /// Serializes a <see cref="CreateChild" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createChild"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateChild createChild, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createChild, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateChild" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createChild"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateChild createChild, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createChild.Email == null)
                throw new ArgumentNullException(nameof(createChild.Email), "Property is required for class CreateChild.");

            if (createChild.FirstName == null)
                throw new ArgumentNullException(nameof(createChild.FirstName), "Property is required for class CreateChild.");

            if (createChild.LastName == null)
                throw new ArgumentNullException(nameof(createChild.LastName), "Property is required for class CreateChild.");

            if (createChild.CompanyName == null)
                throw new ArgumentNullException(nameof(createChild.CompanyName), "Property is required for class CreateChild.");

            if (createChild.Password == null)
                throw new ArgumentNullException(nameof(createChild.Password), "Property is required for class CreateChild.");

            writer.WriteString("email", createChild.Email);

            writer.WriteString("firstName", createChild.FirstName);

            writer.WriteString("lastName", createChild.LastName);

            writer.WriteString("companyName", createChild.CompanyName);

            writer.WriteString("password", createChild.Password);

            var languageRawValue = CreateChild.LanguageEnumToJsonValue(createChild.LanguageOption.Value!.Value);
            writer.WriteString("language", languageRawValue);
        }
    }
}
