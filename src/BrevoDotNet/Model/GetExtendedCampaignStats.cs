// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetExtendedCampaignStats
    /// </summary>
    public partial class GetExtendedCampaignStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedCampaignStats" /> class.
        /// </summary>
        /// <param name="globalStats">Overall statistics of the campaign</param>
        /// <param name="campaignStats">List-wise statistics of the campaign.</param>
        /// <param name="mirrorClick">Number of clicks on mirror link</param>
        /// <param name="remaining">Number of remaning emails to send</param>
        /// <param name="linksStats">Statistics about the number of clicks for the links</param>
        /// <param name="statsByDomain">statsByDomain</param>
        /// <param name="statsByDevice">statsByDevice</param>
        /// <param name="statsByBrowser">statsByBrowser</param>
        [JsonConstructor]
        public GetExtendedCampaignStats(GetCampaignStats globalStats, List<GetCampaignStats> campaignStats, long mirrorClick, long remaining, Object linksStats, Dictionary<string, GetCampaignStats> statsByDomain, GetStatsByDevice statsByDevice, Dictionary<string, GetDeviceBrowserStats> statsByBrowser)
        {
            GlobalStats = globalStats;
            CampaignStats = campaignStats;
            MirrorClick = mirrorClick;
            Remaining = remaining;
            LinksStats = linksStats;
            StatsByDomain = statsByDomain;
            StatsByDevice = statsByDevice;
            StatsByBrowser = statsByBrowser;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Overall statistics of the campaign
        /// </summary>
        /// <value>Overall statistics of the campaign</value>
        [JsonPropertyName("globalStats")]
        public GetCampaignStats GlobalStats { get; set; }

        /// <summary>
        /// List-wise statistics of the campaign.
        /// </summary>
        /// <value>List-wise statistics of the campaign.</value>
        [JsonPropertyName("campaignStats")]
        public List<GetCampaignStats> CampaignStats { get; set; }

        /// <summary>
        /// Number of clicks on mirror link
        /// </summary>
        /// <value>Number of clicks on mirror link</value>
        /* <example>120</example> */
        [JsonPropertyName("mirrorClick")]
        public long MirrorClick { get; set; }

        /// <summary>
        /// Number of remaning emails to send
        /// </summary>
        /// <value>Number of remaning emails to send</value>
        /* <example>1000</example> */
        [JsonPropertyName("remaining")]
        public long Remaining { get; set; }

        /// <summary>
        /// Statistics about the number of clicks for the links
        /// </summary>
        /// <value>Statistics about the number of clicks for the links</value>
        /* <example>{&quot;example.abc.com&quot;:7,&quot;example.domain.com&quot;:10}</example> */
        [JsonPropertyName("linksStats")]
        public Object LinksStats { get; set; }

        /// <summary>
        /// Gets or Sets StatsByDomain
        /// </summary>
        [JsonPropertyName("statsByDomain")]
        public Dictionary<string, GetCampaignStats> StatsByDomain { get; set; }

        /// <summary>
        /// Gets or Sets StatsByDevice
        /// </summary>
        [JsonPropertyName("statsByDevice")]
        public GetStatsByDevice StatsByDevice { get; set; }

        /// <summary>
        /// Gets or Sets StatsByBrowser
        /// </summary>
        [JsonPropertyName("statsByBrowser")]
        public Dictionary<string, GetDeviceBrowserStats> StatsByBrowser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExtendedCampaignStats {\n");
            sb.Append("  GlobalStats: ").Append(GlobalStats).Append("\n");
            sb.Append("  CampaignStats: ").Append(CampaignStats).Append("\n");
            sb.Append("  MirrorClick: ").Append(MirrorClick).Append("\n");
            sb.Append("  Remaining: ").Append(Remaining).Append("\n");
            sb.Append("  LinksStats: ").Append(LinksStats).Append("\n");
            sb.Append("  StatsByDomain: ").Append(StatsByDomain).Append("\n");
            sb.Append("  StatsByDevice: ").Append(StatsByDevice).Append("\n");
            sb.Append("  StatsByBrowser: ").Append(StatsByBrowser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetExtendedCampaignStats" />
    /// </summary>
    public class GetExtendedCampaignStatsJsonConverter : JsonConverter<GetExtendedCampaignStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetExtendedCampaignStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetExtendedCampaignStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetCampaignStats?> globalStats = default;
            Option<List<GetCampaignStats>?> campaignStats = default;
            Option<long?> mirrorClick = default;
            Option<long?> remaining = default;
            Option<Object?> linksStats = default;
            Option<Dictionary<string, GetCampaignStats>?> statsByDomain = default;
            Option<GetStatsByDevice?> statsByDevice = default;
            Option<Dictionary<string, GetDeviceBrowserStats>?> statsByBrowser = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "globalStats":
                            globalStats = new Option<GetCampaignStats?>(JsonSerializer.Deserialize<GetCampaignStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "campaignStats":
                            campaignStats = new Option<List<GetCampaignStats>?>(JsonSerializer.Deserialize<List<GetCampaignStats>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mirrorClick":
                            mirrorClick = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "remaining":
                            remaining = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "linksStats":
                            linksStats = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "statsByDomain":
                            statsByDomain = new Option<Dictionary<string, GetCampaignStats>?>(JsonSerializer.Deserialize<Dictionary<string, GetCampaignStats>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "statsByDevice":
                            statsByDevice = new Option<GetStatsByDevice?>(JsonSerializer.Deserialize<GetStatsByDevice>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "statsByBrowser":
                            statsByBrowser = new Option<Dictionary<string, GetDeviceBrowserStats>?>(JsonSerializer.Deserialize<Dictionary<string, GetDeviceBrowserStats>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!globalStats.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(globalStats));

            if (!campaignStats.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(campaignStats));

            if (!mirrorClick.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(mirrorClick));

            if (!remaining.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(remaining));

            if (!linksStats.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(linksStats));

            if (!statsByDomain.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(statsByDomain));

            if (!statsByDevice.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(statsByDevice));

            if (!statsByBrowser.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignStats.", nameof(statsByBrowser));

            if (globalStats.IsSet && globalStats.Value == null)
                throw new ArgumentNullException(nameof(globalStats), "Property is not nullable for class GetExtendedCampaignStats.");

            if (campaignStats.IsSet && campaignStats.Value == null)
                throw new ArgumentNullException(nameof(campaignStats), "Property is not nullable for class GetExtendedCampaignStats.");

            if (mirrorClick.IsSet && mirrorClick.Value == null)
                throw new ArgumentNullException(nameof(mirrorClick), "Property is not nullable for class GetExtendedCampaignStats.");

            if (remaining.IsSet && remaining.Value == null)
                throw new ArgumentNullException(nameof(remaining), "Property is not nullable for class GetExtendedCampaignStats.");

            if (linksStats.IsSet && linksStats.Value == null)
                throw new ArgumentNullException(nameof(linksStats), "Property is not nullable for class GetExtendedCampaignStats.");

            if (statsByDomain.IsSet && statsByDomain.Value == null)
                throw new ArgumentNullException(nameof(statsByDomain), "Property is not nullable for class GetExtendedCampaignStats.");

            if (statsByDevice.IsSet && statsByDevice.Value == null)
                throw new ArgumentNullException(nameof(statsByDevice), "Property is not nullable for class GetExtendedCampaignStats.");

            if (statsByBrowser.IsSet && statsByBrowser.Value == null)
                throw new ArgumentNullException(nameof(statsByBrowser), "Property is not nullable for class GetExtendedCampaignStats.");

            return new GetExtendedCampaignStats(globalStats.Value!, campaignStats.Value!, mirrorClick.Value!.Value!, remaining.Value!.Value!, linksStats.Value!, statsByDomain.Value!, statsByDevice.Value!, statsByBrowser.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetExtendedCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetExtendedCampaignStats getExtendedCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getExtendedCampaignStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetExtendedCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetExtendedCampaignStats getExtendedCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getExtendedCampaignStats.GlobalStats == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.GlobalStats), "Property is required for class GetExtendedCampaignStats.");

            if (getExtendedCampaignStats.CampaignStats == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.CampaignStats), "Property is required for class GetExtendedCampaignStats.");

            if (getExtendedCampaignStats.LinksStats == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.LinksStats), "Property is required for class GetExtendedCampaignStats.");

            if (getExtendedCampaignStats.StatsByDomain == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.StatsByDomain), "Property is required for class GetExtendedCampaignStats.");

            if (getExtendedCampaignStats.StatsByDevice == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.StatsByDevice), "Property is required for class GetExtendedCampaignStats.");

            if (getExtendedCampaignStats.StatsByBrowser == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignStats.StatsByBrowser), "Property is required for class GetExtendedCampaignStats.");

            writer.WritePropertyName("globalStats");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.GlobalStats, jsonSerializerOptions);
            writer.WritePropertyName("campaignStats");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.CampaignStats, jsonSerializerOptions);
            writer.WriteNumber("mirrorClick", getExtendedCampaignStats.MirrorClick);

            writer.WriteNumber("remaining", getExtendedCampaignStats.Remaining);

            writer.WritePropertyName("linksStats");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.LinksStats, jsonSerializerOptions);
            writer.WritePropertyName("statsByDomain");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.StatsByDomain, jsonSerializerOptions);
            writer.WritePropertyName("statsByDevice");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.StatsByDevice, jsonSerializerOptions);
            writer.WritePropertyName("statsByBrowser");
            JsonSerializer.Serialize(writer, getExtendedCampaignStats.StatsByBrowser, jsonSerializerOptions);
        }
    }
}
