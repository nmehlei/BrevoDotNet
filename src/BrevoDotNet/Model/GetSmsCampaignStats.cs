// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetSmsCampaignStats
    /// </summary>
    public partial class GetSmsCampaignStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsCampaignStats" /> class.
        /// </summary>
        /// <param name="delivered">Number of delivered SMS</param>
        /// <param name="sent">Number of sent SMS</param>
        /// <param name="processing">Number of processing SMS</param>
        /// <param name="softBounces">Number of softbounced SMS</param>
        /// <param name="hardBounces">Number of hardbounced SMS</param>
        /// <param name="unsubscriptions">Number of unsubscription SMS</param>
        /// <param name="answered">Number of replies to the SMS</param>
        [JsonConstructor]
        public GetSmsCampaignStats(long delivered, long sent, long processing, long softBounces, long hardBounces, long unsubscriptions, long answered)
        {
            Delivered = delivered;
            Sent = sent;
            Processing = processing;
            SoftBounces = softBounces;
            HardBounces = hardBounces;
            Unsubscriptions = unsubscriptions;
            Answered = answered;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of delivered SMS
        /// </summary>
        /// <value>Number of delivered SMS</value>
        /* <example>2987</example> */
        [JsonPropertyName("delivered")]
        public long Delivered { get; set; }

        /// <summary>
        /// Number of sent SMS
        /// </summary>
        /// <value>Number of sent SMS</value>
        /* <example>3000</example> */
        [JsonPropertyName("sent")]
        public long Sent { get; set; }

        /// <summary>
        /// Number of processing SMS
        /// </summary>
        /// <value>Number of processing SMS</value>
        /* <example>0</example> */
        [JsonPropertyName("processing")]
        public long Processing { get; set; }

        /// <summary>
        /// Number of softbounced SMS
        /// </summary>
        /// <value>Number of softbounced SMS</value>
        /* <example>3</example> */
        [JsonPropertyName("softBounces")]
        public long SoftBounces { get; set; }

        /// <summary>
        /// Number of hardbounced SMS
        /// </summary>
        /// <value>Number of hardbounced SMS</value>
        /* <example>1</example> */
        [JsonPropertyName("hardBounces")]
        public long HardBounces { get; set; }

        /// <summary>
        /// Number of unsubscription SMS
        /// </summary>
        /// <value>Number of unsubscription SMS</value>
        /* <example>3</example> */
        [JsonPropertyName("unsubscriptions")]
        public long Unsubscriptions { get; set; }

        /// <summary>
        /// Number of replies to the SMS
        /// </summary>
        /// <value>Number of replies to the SMS</value>
        /* <example>2</example> */
        [JsonPropertyName("answered")]
        public long Answered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmsCampaignStats {\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Processing: ").Append(Processing).Append("\n");
            sb.Append("  SoftBounces: ").Append(SoftBounces).Append("\n");
            sb.Append("  HardBounces: ").Append(HardBounces).Append("\n");
            sb.Append("  Unsubscriptions: ").Append(Unsubscriptions).Append("\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSmsCampaignStats" />
    /// </summary>
    public class GetSmsCampaignStatsJsonConverter : JsonConverter<GetSmsCampaignStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSmsCampaignStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSmsCampaignStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> delivered = default;
            Option<long?> sent = default;
            Option<long?> processing = default;
            Option<long?> softBounces = default;
            Option<long?> hardBounces = default;
            Option<long?> unsubscriptions = default;
            Option<long?> answered = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "delivered":
                            delivered = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "sent":
                            sent = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "processing":
                            processing = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "softBounces":
                            softBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "hardBounces":
                            hardBounces = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "unsubscriptions":
                            unsubscriptions = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "answered":
                            answered = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!delivered.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(delivered));

            if (!sent.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(sent));

            if (!processing.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(processing));

            if (!softBounces.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(softBounces));

            if (!hardBounces.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(hardBounces));

            if (!unsubscriptions.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(unsubscriptions));

            if (!answered.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignStats.", nameof(answered));

            if (delivered.IsSet && delivered.Value == null)
                throw new ArgumentNullException(nameof(delivered), "Property is not nullable for class GetSmsCampaignStats.");

            if (sent.IsSet && sent.Value == null)
                throw new ArgumentNullException(nameof(sent), "Property is not nullable for class GetSmsCampaignStats.");

            if (processing.IsSet && processing.Value == null)
                throw new ArgumentNullException(nameof(processing), "Property is not nullable for class GetSmsCampaignStats.");

            if (softBounces.IsSet && softBounces.Value == null)
                throw new ArgumentNullException(nameof(softBounces), "Property is not nullable for class GetSmsCampaignStats.");

            if (hardBounces.IsSet && hardBounces.Value == null)
                throw new ArgumentNullException(nameof(hardBounces), "Property is not nullable for class GetSmsCampaignStats.");

            if (unsubscriptions.IsSet && unsubscriptions.Value == null)
                throw new ArgumentNullException(nameof(unsubscriptions), "Property is not nullable for class GetSmsCampaignStats.");

            if (answered.IsSet && answered.Value == null)
                throw new ArgumentNullException(nameof(answered), "Property is not nullable for class GetSmsCampaignStats.");

            return new GetSmsCampaignStats(delivered.Value!.Value!, sent.Value!.Value!, processing.Value!.Value!, softBounces.Value!.Value!, hardBounces.Value!.Value!, unsubscriptions.Value!.Value!, answered.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetSmsCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSmsCampaignStats getSmsCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSmsCampaignStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSmsCampaignStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsCampaignStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSmsCampaignStats getSmsCampaignStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("delivered", getSmsCampaignStats.Delivered);

            writer.WriteNumber("sent", getSmsCampaignStats.Sent);

            writer.WriteNumber("processing", getSmsCampaignStats.Processing);

            writer.WriteNumber("softBounces", getSmsCampaignStats.SoftBounces);

            writer.WriteNumber("hardBounces", getSmsCampaignStats.HardBounces);

            writer.WriteNumber("unsubscriptions", getSmsCampaignStats.Unsubscriptions);

            writer.WriteNumber("answered", getSmsCampaignStats.Answered);
        }
    }
}
