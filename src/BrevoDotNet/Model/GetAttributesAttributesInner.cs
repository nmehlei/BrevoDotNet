// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetAttributesAttributesInner
    /// </summary>
    public partial class GetAttributesAttributesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAttributesAttributesInner" /> class.
        /// </summary>
        /// <param name="name">Name of the attribute</param>
        /// <param name="category">Category of the attribute</param>
        /// <param name="type">Type of the attribute</param>
        /// <param name="enumeration">Parameter only available for \&quot;category\&quot; type attributes.</param>
        /// <param name="calculatedValue">Calculated value formula</param>
        [JsonConstructor]
        public GetAttributesAttributesInner(string name, CategoryEnum category, Option<TypeEnum?> type = default, Option<List<GetAttributesAttributesInnerEnumerationInner>?> enumeration = default, Option<string?> calculatedValue = default)
        {
            Name = name;
            Category = category;
            TypeOption = type;
            EnumerationOption = enumeration;
            CalculatedValueOption = calculatedValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Category of the attribute
        /// </summary>
        /// <value>Category of the attribute</value>
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            Normal = 1,

            /// <summary>
            /// Enum Transactional for value: transactional
            /// </summary>
            Transactional = 2,

            /// <summary>
            /// Enum Category for value: category
            /// </summary>
            Category = 3,

            /// <summary>
            /// Enum Calculated for value: calculated
            /// </summary>
            Calculated = 4,

            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            Global = 5
        }

        /// <summary>
        /// Returns a <see cref="CategoryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CategoryEnum CategoryEnumFromString(string value)
        {
            if (value.Equals("normal"))
                return CategoryEnum.Normal;

            if (value.Equals("transactional"))
                return CategoryEnum.Transactional;

            if (value.Equals("category"))
                return CategoryEnum.Category;

            if (value.Equals("calculated"))
                return CategoryEnum.Calculated;

            if (value.Equals("global"))
                return CategoryEnum.Global;

            throw new NotImplementedException($"Could not convert value to type CategoryEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CategoryEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CategoryEnum? CategoryEnumFromStringOrDefault(string value)
        {
            if (value.Equals("normal"))
                return CategoryEnum.Normal;

            if (value.Equals("transactional"))
                return CategoryEnum.Transactional;

            if (value.Equals("category"))
                return CategoryEnum.Category;

            if (value.Equals("calculated"))
                return CategoryEnum.Calculated;

            if (value.Equals("global"))
                return CategoryEnum.Global;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CategoryEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CategoryEnumToJsonValue(CategoryEnum value)
        {
            if (value == CategoryEnum.Normal)
                return "normal";

            if (value == CategoryEnum.Transactional)
                return "transactional";

            if (value == CategoryEnum.Category)
                return "category";

            if (value == CategoryEnum.Calculated)
                return "calculated";

            if (value == CategoryEnum.Global)
                return "global";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Category of the attribute
        /// </summary>
        /// <value>Category of the attribute</value>
        /* <example>category</example> */
        [JsonPropertyName("category")]
        public CategoryEnum Category { get; set; }

        /// <summary>
        /// Type of the attribute
        /// </summary>
        /// <value>Type of the attribute</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            Text = 1,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            Date = 2,

            /// <summary>
            /// Enum Float for value: float
            /// </summary>
            Float = 3,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            Id = 4,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            Boolean = 5
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("text"))
                return TypeEnum.Text;

            if (value.Equals("date"))
                return TypeEnum.Date;

            if (value.Equals("float"))
                return TypeEnum.Float;

            if (value.Equals("id"))
                return TypeEnum.Id;

            if (value.Equals("boolean"))
                return TypeEnum.Boolean;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("text"))
                return TypeEnum.Text;

            if (value.Equals("date"))
                return TypeEnum.Date;

            if (value.Equals("float"))
                return TypeEnum.Float;

            if (value.Equals("id"))
                return TypeEnum.Id;

            if (value.Equals("boolean"))
                return TypeEnum.Boolean;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Text)
                return "text";

            if (value == TypeEnum.Date)
                return "date";

            if (value == TypeEnum.Float)
                return "float";

            if (value == TypeEnum.Id)
                return "id";

            if (value == TypeEnum.Boolean)
                return "boolean";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Type of the attribute
        /// </summary>
        /// <value>Type of the attribute</value>
        /* <example>text</example> */
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Name of the attribute
        /// </summary>
        /// <value>Name of the attribute</value>
        /* <example>LASTNAME</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Enumeration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetAttributesAttributesInnerEnumerationInner>?> EnumerationOption { get; private set; }

        /// <summary>
        /// Parameter only available for \&quot;category\&quot; type attributes.
        /// </summary>
        /// <value>Parameter only available for \&quot;category\&quot; type attributes.</value>
        [JsonPropertyName("enumeration")]
        public List<GetAttributesAttributesInnerEnumerationInner>? Enumeration { get { return this.EnumerationOption; } set { this.EnumerationOption = new(value); } }

        /// <summary>
        /// Used to track the state of CalculatedValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CalculatedValueOption { get; private set; }

        /// <summary>
        /// Calculated value formula
        /// </summary>
        /// <value>Calculated value formula</value>
        /* <example>COUNT[ORDER_ID,ORDER_DATE,&#x3D;&#x3D;,NOW(-1)]</example> */
        [JsonPropertyName("calculatedValue")]
        public string? CalculatedValue { get { return this.CalculatedValueOption; } set { this.CalculatedValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAttributesAttributesInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enumeration: ").Append(Enumeration).Append("\n");
            sb.Append("  CalculatedValue: ").Append(CalculatedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAttributesAttributesInner" />
    /// </summary>
    public class GetAttributesAttributesInnerJsonConverter : JsonConverter<GetAttributesAttributesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAttributesAttributesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAttributesAttributesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<GetAttributesAttributesInner.CategoryEnum?> category = default;
            Option<GetAttributesAttributesInner.TypeEnum?> type = default;
            Option<List<GetAttributesAttributesInnerEnumerationInner>?> enumeration = default;
            Option<string?> calculatedValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category":
                            string? categoryRawValue = utf8JsonReader.GetString();
                            if (categoryRawValue != null)
                                category = new Option<GetAttributesAttributesInner.CategoryEnum?>(GetAttributesAttributesInner.CategoryEnumFromStringOrDefault(categoryRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetAttributesAttributesInner.TypeEnum?>(GetAttributesAttributesInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "enumeration":
                            enumeration = new Option<List<GetAttributesAttributesInnerEnumerationInner>?>(JsonSerializer.Deserialize<List<GetAttributesAttributesInnerEnumerationInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "calculatedValue":
                            calculatedValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetAttributesAttributesInner.", nameof(name));

            if (!category.IsSet)
                throw new ArgumentException("Property is required for class GetAttributesAttributesInner.", nameof(category));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetAttributesAttributesInner.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class GetAttributesAttributesInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetAttributesAttributesInner.");

            if (enumeration.IsSet && enumeration.Value == null)
                throw new ArgumentNullException(nameof(enumeration), "Property is not nullable for class GetAttributesAttributesInner.");

            if (calculatedValue.IsSet && calculatedValue.Value == null)
                throw new ArgumentNullException(nameof(calculatedValue), "Property is not nullable for class GetAttributesAttributesInner.");

            return new GetAttributesAttributesInner(name.Value!, category.Value!.Value!, type, enumeration, calculatedValue);
        }

        /// <summary>
        /// Serializes a <see cref="GetAttributesAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAttributesAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAttributesAttributesInner getAttributesAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAttributesAttributesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAttributesAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAttributesAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAttributesAttributesInner getAttributesAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAttributesAttributesInner.Name == null)
                throw new ArgumentNullException(nameof(getAttributesAttributesInner.Name), "Property is required for class GetAttributesAttributesInner.");

            if (getAttributesAttributesInner.EnumerationOption.IsSet && getAttributesAttributesInner.Enumeration == null)
                throw new ArgumentNullException(nameof(getAttributesAttributesInner.Enumeration), "Property is required for class GetAttributesAttributesInner.");

            if (getAttributesAttributesInner.CalculatedValueOption.IsSet && getAttributesAttributesInner.CalculatedValue == null)
                throw new ArgumentNullException(nameof(getAttributesAttributesInner.CalculatedValue), "Property is required for class GetAttributesAttributesInner.");

            writer.WriteString("name", getAttributesAttributesInner.Name);

            var categoryRawValue = GetAttributesAttributesInner.CategoryEnumToJsonValue(getAttributesAttributesInner.Category);
            writer.WriteString("category", categoryRawValue);
            var typeRawValue = GetAttributesAttributesInner.TypeEnumToJsonValue(getAttributesAttributesInner.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (getAttributesAttributesInner.EnumerationOption.IsSet)
            {
                writer.WritePropertyName("enumeration");
                JsonSerializer.Serialize(writer, getAttributesAttributesInner.Enumeration, jsonSerializerOptions);
            }
            if (getAttributesAttributesInner.CalculatedValueOption.IsSet)
                writer.WriteString("calculatedValue", getAttributesAttributesInner.CalculatedValue);
        }
    }
}
