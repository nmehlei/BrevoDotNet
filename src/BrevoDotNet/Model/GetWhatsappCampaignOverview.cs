// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetWhatsappCampaignOverview
    /// </summary>
    public partial class GetWhatsappCampaignOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetWhatsappCampaignOverview" /> class.
        /// </summary>
        /// <param name="id">ID of the WhatsApp Campaign</param>
        /// <param name="campaignName">Name of the WhatsApp Campaign</param>
        /// <param name="campaignStatus">Status of the WhatsApp Campaign</param>
        /// <param name="senderNumber">Sender of the WhatsApp Campaign</param>
        /// <param name="template">template</param>
        /// <param name="createdAt">Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="scheduledAt">UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format</param>
        /// <param name="stats">stats</param>
        [JsonConstructor]
        public GetWhatsappCampaignOverview(long id, string campaignName, CampaignStatusEnum campaignStatus, string senderNumber, WhatsappCampTemplate template, string createdAt, string modifiedAt, Option<string?> scheduledAt = default, Option<WhatsappCampStats?> stats = default)
        {
            Id = id;
            CampaignName = campaignName;
            CampaignStatus = campaignStatus;
            SenderNumber = senderNumber;
            Template = template;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            ScheduledAtOption = scheduledAt;
            StatsOption = stats;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the WhatsApp Campaign
        /// </summary>
        /// <value>Status of the WhatsApp Campaign</value>
        public enum CampaignStatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 1,

            /// <summary>
            /// Enum Scheduled for value: scheduled
            /// </summary>
            Scheduled = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 3,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            Approved = 4,

            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            Running = 5,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 6,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            Rejected = 7,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 8
        }

        /// <summary>
        /// Returns a <see cref="CampaignStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CampaignStatusEnum CampaignStatusEnumFromString(string value)
        {
            if (value.Equals("draft"))
                return CampaignStatusEnum.Draft;

            if (value.Equals("scheduled"))
                return CampaignStatusEnum.Scheduled;

            if (value.Equals("pending"))
                return CampaignStatusEnum.Pending;

            if (value.Equals("approved"))
                return CampaignStatusEnum.Approved;

            if (value.Equals("running"))
                return CampaignStatusEnum.Running;

            if (value.Equals("suspended"))
                return CampaignStatusEnum.Suspended;

            if (value.Equals("rejected"))
                return CampaignStatusEnum.Rejected;

            if (value.Equals("sent"))
                return CampaignStatusEnum.Sent;

            throw new NotImplementedException($"Could not convert value to type CampaignStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CampaignStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CampaignStatusEnum? CampaignStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("draft"))
                return CampaignStatusEnum.Draft;

            if (value.Equals("scheduled"))
                return CampaignStatusEnum.Scheduled;

            if (value.Equals("pending"))
                return CampaignStatusEnum.Pending;

            if (value.Equals("approved"))
                return CampaignStatusEnum.Approved;

            if (value.Equals("running"))
                return CampaignStatusEnum.Running;

            if (value.Equals("suspended"))
                return CampaignStatusEnum.Suspended;

            if (value.Equals("rejected"))
                return CampaignStatusEnum.Rejected;

            if (value.Equals("sent"))
                return CampaignStatusEnum.Sent;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CampaignStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CampaignStatusEnumToJsonValue(CampaignStatusEnum value)
        {
            if (value == CampaignStatusEnum.Draft)
                return "draft";

            if (value == CampaignStatusEnum.Scheduled)
                return "scheduled";

            if (value == CampaignStatusEnum.Pending)
                return "pending";

            if (value == CampaignStatusEnum.Approved)
                return "approved";

            if (value == CampaignStatusEnum.Running)
                return "running";

            if (value == CampaignStatusEnum.Suspended)
                return "suspended";

            if (value == CampaignStatusEnum.Rejected)
                return "rejected";

            if (value == CampaignStatusEnum.Sent)
                return "sent";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the WhatsApp Campaign
        /// </summary>
        /// <value>Status of the WhatsApp Campaign</value>
        /* <example>draft</example> */
        [JsonPropertyName("campaignStatus")]
        public CampaignStatusEnum CampaignStatus { get; set; }

        /// <summary>
        /// ID of the WhatsApp Campaign
        /// </summary>
        /// <value>ID of the WhatsApp Campaign</value>
        /* <example>1672035851100690</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the WhatsApp Campaign
        /// </summary>
        /// <value>Name of the WhatsApp Campaign</value>
        /* <example>Test Campaign</example> */
        [JsonPropertyName("campaignName")]
        public string CampaignName { get; set; }

        /// <summary>
        /// Sender of the WhatsApp Campaign
        /// </summary>
        /// <value>Sender of the WhatsApp Campaign</value>
        /* <example>9368207029</example> */
        [JsonPropertyName("senderNumber")]
        public string SenderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [JsonPropertyName("template")]
        public WhatsappCampTemplate Template { get; set; }

        /// <summary>
        /// Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-06-01T12:30:00Z</example> */
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30:00Z</example> */
        [JsonPropertyName("modifiedAt")]
        public string ModifiedAt { get; set; }

        /// <summary>
        /// Used to track the state of ScheduledAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScheduledAtOption { get; private set; }

        /// <summary>
        /// UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
        /// </summary>
        /// <value>UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format</value>
        /* <example>2017-06-01T12:30:00Z</example> */
        [JsonPropertyName("scheduledAt")]
        public string? ScheduledAt { get { return this.ScheduledAtOption; } set { this.ScheduledAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WhatsappCampStats?> StatsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [JsonPropertyName("stats")]
        public WhatsappCampStats? Stats { get { return this.StatsOption; } set { this.StatsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWhatsappCampaignOverview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignStatus: ").Append(CampaignStatus).Append("\n");
            sb.Append("  SenderNumber: ").Append(SenderNumber).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetWhatsappCampaignOverview" />
    /// </summary>
    public class GetWhatsappCampaignOverviewJsonConverter : JsonConverter<GetWhatsappCampaignOverview>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetWhatsappCampaignOverview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetWhatsappCampaignOverview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> campaignName = default;
            Option<GetWhatsappCampaignOverview.CampaignStatusEnum?> campaignStatus = default;
            Option<string?> senderNumber = default;
            Option<WhatsappCampTemplate?> template = default;
            Option<string?> createdAt = default;
            Option<string?> modifiedAt = default;
            Option<string?> scheduledAt = default;
            Option<WhatsappCampStats?> stats = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "campaignName":
                            campaignName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "campaignStatus":
                            string? campaignStatusRawValue = utf8JsonReader.GetString();
                            if (campaignStatusRawValue != null)
                                campaignStatus = new Option<GetWhatsappCampaignOverview.CampaignStatusEnum?>(GetWhatsappCampaignOverview.CampaignStatusEnumFromStringOrDefault(campaignStatusRawValue));
                            break;
                        case "senderNumber":
                            senderNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "template":
                            template = new Option<WhatsappCampTemplate?>(JsonSerializer.Deserialize<WhatsappCampTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createdAt":
                            createdAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scheduledAt":
                            scheduledAt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stats":
                            stats = new Option<WhatsappCampStats?>(JsonSerializer.Deserialize<WhatsappCampStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(id));

            if (!campaignName.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(campaignName));

            if (!campaignStatus.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(campaignStatus));

            if (!senderNumber.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(senderNumber));

            if (!template.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(template));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetWhatsappCampaignOverview.", nameof(modifiedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (campaignName.IsSet && campaignName.Value == null)
                throw new ArgumentNullException(nameof(campaignName), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (campaignStatus.IsSet && campaignStatus.Value == null)
                throw new ArgumentNullException(nameof(campaignStatus), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (senderNumber.IsSet && senderNumber.Value == null)
                throw new ArgumentNullException(nameof(senderNumber), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (template.IsSet && template.Value == null)
                throw new ArgumentNullException(nameof(template), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (scheduledAt.IsSet && scheduledAt.Value == null)
                throw new ArgumentNullException(nameof(scheduledAt), "Property is not nullable for class GetWhatsappCampaignOverview.");

            if (stats.IsSet && stats.Value == null)
                throw new ArgumentNullException(nameof(stats), "Property is not nullable for class GetWhatsappCampaignOverview.");

            return new GetWhatsappCampaignOverview(id.Value!.Value!, campaignName.Value!, campaignStatus.Value!.Value!, senderNumber.Value!, template.Value!, createdAt.Value!, modifiedAt.Value!, scheduledAt, stats);
        }

        /// <summary>
        /// Serializes a <see cref="GetWhatsappCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWhatsappCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetWhatsappCampaignOverview getWhatsappCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getWhatsappCampaignOverview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetWhatsappCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getWhatsappCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetWhatsappCampaignOverview getWhatsappCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getWhatsappCampaignOverview.CampaignName == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.CampaignName), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.SenderNumber == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.SenderNumber), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.Template == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.Template), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.CreatedAt == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.CreatedAt), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.ModifiedAt == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.ModifiedAt), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.ScheduledAtOption.IsSet && getWhatsappCampaignOverview.ScheduledAt == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.ScheduledAt), "Property is required for class GetWhatsappCampaignOverview.");

            if (getWhatsappCampaignOverview.StatsOption.IsSet && getWhatsappCampaignOverview.Stats == null)
                throw new ArgumentNullException(nameof(getWhatsappCampaignOverview.Stats), "Property is required for class GetWhatsappCampaignOverview.");

            writer.WriteNumber("id", getWhatsappCampaignOverview.Id);

            writer.WriteString("campaignName", getWhatsappCampaignOverview.CampaignName);

            var campaignStatusRawValue = GetWhatsappCampaignOverview.CampaignStatusEnumToJsonValue(getWhatsappCampaignOverview.CampaignStatus);
            writer.WriteString("campaignStatus", campaignStatusRawValue);
            writer.WriteString("senderNumber", getWhatsappCampaignOverview.SenderNumber);

            writer.WritePropertyName("template");
            JsonSerializer.Serialize(writer, getWhatsappCampaignOverview.Template, jsonSerializerOptions);
            writer.WriteString("createdAt", getWhatsappCampaignOverview.CreatedAt);

            writer.WriteString("modifiedAt", getWhatsappCampaignOverview.ModifiedAt);

            if (getWhatsappCampaignOverview.ScheduledAtOption.IsSet)
                writer.WriteString("scheduledAt", getWhatsappCampaignOverview.ScheduledAt);

            if (getWhatsappCampaignOverview.StatsOption.IsSet)
            {
                writer.WritePropertyName("stats");
                JsonSerializer.Serialize(writer, getWhatsappCampaignOverview.Stats, jsonSerializerOptions);
            }
        }
    }
}
