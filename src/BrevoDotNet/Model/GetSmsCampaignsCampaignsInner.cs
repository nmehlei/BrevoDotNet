// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetSmsCampaignsCampaignsInner
    /// </summary>
    public partial class GetSmsCampaignsCampaignsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsCampaignsCampaignsInner" /> class.
        /// </summary>
        /// <param name="id">ID of the SMS Campaign</param>
        /// <param name="name">Name of the SMS Campaign</param>
        /// <param name="status">Status of the SMS Campaign</param>
        /// <param name="content">Content of the SMS Campaign</param>
        /// <param name="scheduledAt">UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format</param>
        /// <param name="sender">Sender of the SMS Campaign</param>
        /// <param name="createdAt">Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="recipients">recipients</param>
        /// <param name="statistics">statistics</param>
        [JsonConstructor]
        public GetSmsCampaignsCampaignsInner(long id, string name, StatusEnum status, string content, DateTime scheduledAt, string sender, DateTime createdAt, DateTime modifiedAt, GetCampaignRecipients recipients, GetSmsCampaignStats statistics)
        {
            Id = id;
            Name = name;
            Status = status;
            Content = content;
            ScheduledAt = scheduledAt;
            Sender = sender;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            Recipients = recipients;
            Statistics = statistics;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Status of the SMS Campaign
        /// </summary>
        /// <value>Status of the SMS Campaign</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 1,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 2,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            Archive = 3,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            Queued = 4,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 5,

            /// <summary>
            /// Enum InProcess for value: inProcess
            /// </summary>
            InProcess = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("inProcess"))
                return StatusEnum.InProcess;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("inProcess"))
                return StatusEnum.InProcess;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Draft)
                return "draft";

            if (value == StatusEnum.Sent)
                return "sent";

            if (value == StatusEnum.Archive)
                return "archive";

            if (value == StatusEnum.Queued)
                return "queued";

            if (value == StatusEnum.Suspended)
                return "suspended";

            if (value == StatusEnum.InProcess)
                return "inProcess";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the SMS Campaign
        /// </summary>
        /// <value>Status of the SMS Campaign</value>
        /* <example>draft</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// ID of the SMS Campaign
        /// </summary>
        /// <value>ID of the SMS Campaign</value>
        /* <example>2</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the SMS Campaign
        /// </summary>
        /// <value>Name of the SMS Campaign</value>
        /* <example>PROMO CODE</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Content of the SMS Campaign
        /// </summary>
        /// <value>Content of the SMS Campaign</value>
        /* <example>Visit our Store and get some discount !</example> */
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
        /// </summary>
        /// <value>UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format</value>
        /* <example>2017-06-01T12:30Z</example> */
        [JsonPropertyName("scheduledAt")]
        public DateTime ScheduledAt { get; set; }

        /// <summary>
        /// Sender of the SMS Campaign
        /// </summary>
        /// <value>Sender of the SMS Campaign</value>
        /* <example>MyCompany</example> */
        [JsonPropertyName("sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-06-01T12:30Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30Z</example> */
        [JsonPropertyName("modifiedAt")]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [JsonPropertyName("recipients")]
        public GetCampaignRecipients Recipients { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [JsonPropertyName("statistics")]
        public GetSmsCampaignStats Statistics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmsCampaignsCampaignsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSmsCampaignsCampaignsInner" />
    /// </summary>
    public class GetSmsCampaignsCampaignsInnerJsonConverter : JsonConverter<GetSmsCampaignsCampaignsInner>
    {
        /// <summary>
        /// The format to use to serialize ScheduledAt
        /// </summary>
        public static string ScheduledAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedAt
        /// </summary>
        public static string ModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetSmsCampaignsCampaignsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSmsCampaignsCampaignsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<GetSmsCampaignsCampaignsInner.StatusEnum?> status = default;
            Option<string?> content = default;
            Option<DateTime?> scheduledAt = default;
            Option<string?> sender = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> modifiedAt = default;
            Option<GetCampaignRecipients?> recipients = default;
            Option<GetSmsCampaignStats?> statistics = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetSmsCampaignsCampaignsInner.StatusEnum?>(GetSmsCampaignsCampaignsInner.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scheduledAt":
                            scheduledAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sender":
                            sender = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recipients":
                            recipients = new Option<GetCampaignRecipients?>(JsonSerializer.Deserialize<GetCampaignRecipients>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "statistics":
                            statistics = new Option<GetSmsCampaignStats?>(JsonSerializer.Deserialize<GetSmsCampaignStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(name));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(status));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(content));

            if (!scheduledAt.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(scheduledAt));

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(sender));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(modifiedAt));

            if (!recipients.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(recipients));

            if (!statistics.IsSet)
                throw new ArgumentException("Property is required for class GetSmsCampaignsCampaignsInner.", nameof(statistics));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (scheduledAt.IsSet && scheduledAt.Value == null)
                throw new ArgumentNullException(nameof(scheduledAt), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (recipients.IsSet && recipients.Value == null)
                throw new ArgumentNullException(nameof(recipients), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            if (statistics.IsSet && statistics.Value == null)
                throw new ArgumentNullException(nameof(statistics), "Property is not nullable for class GetSmsCampaignsCampaignsInner.");

            return new GetSmsCampaignsCampaignsInner(id.Value!.Value!, name.Value!, status.Value!.Value!, content.Value!, scheduledAt.Value!.Value!, sender.Value!, createdAt.Value!.Value!, modifiedAt.Value!.Value!, recipients.Value!, statistics.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetSmsCampaignsCampaignsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsCampaignsCampaignsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSmsCampaignsCampaignsInner getSmsCampaignsCampaignsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSmsCampaignsCampaignsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSmsCampaignsCampaignsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSmsCampaignsCampaignsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSmsCampaignsCampaignsInner getSmsCampaignsCampaignsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSmsCampaignsCampaignsInner.Name == null)
                throw new ArgumentNullException(nameof(getSmsCampaignsCampaignsInner.Name), "Property is required for class GetSmsCampaignsCampaignsInner.");

            if (getSmsCampaignsCampaignsInner.Content == null)
                throw new ArgumentNullException(nameof(getSmsCampaignsCampaignsInner.Content), "Property is required for class GetSmsCampaignsCampaignsInner.");

            if (getSmsCampaignsCampaignsInner.Sender == null)
                throw new ArgumentNullException(nameof(getSmsCampaignsCampaignsInner.Sender), "Property is required for class GetSmsCampaignsCampaignsInner.");

            if (getSmsCampaignsCampaignsInner.Recipients == null)
                throw new ArgumentNullException(nameof(getSmsCampaignsCampaignsInner.Recipients), "Property is required for class GetSmsCampaignsCampaignsInner.");

            if (getSmsCampaignsCampaignsInner.Statistics == null)
                throw new ArgumentNullException(nameof(getSmsCampaignsCampaignsInner.Statistics), "Property is required for class GetSmsCampaignsCampaignsInner.");

            writer.WriteNumber("id", getSmsCampaignsCampaignsInner.Id);

            writer.WriteString("name", getSmsCampaignsCampaignsInner.Name);

            var statusRawValue = GetSmsCampaignsCampaignsInner.StatusEnumToJsonValue(getSmsCampaignsCampaignsInner.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("content", getSmsCampaignsCampaignsInner.Content);

            writer.WriteString("scheduledAt", getSmsCampaignsCampaignsInner.ScheduledAt.ToString(ScheduledAtFormat));

            writer.WriteString("sender", getSmsCampaignsCampaignsInner.Sender);

            writer.WriteString("createdAt", getSmsCampaignsCampaignsInner.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("modifiedAt", getSmsCampaignsCampaignsInner.ModifiedAt.ToString(ModifiedAtFormat));

            writer.WritePropertyName("recipients");
            JsonSerializer.Serialize(writer, getSmsCampaignsCampaignsInner.Recipients, jsonSerializerOptions);
            writer.WritePropertyName("statistics");
            JsonSerializer.Serialize(writer, getSmsCampaignsCampaignsInner.Statistics, jsonSerializerOptions);
        }
    }
}
