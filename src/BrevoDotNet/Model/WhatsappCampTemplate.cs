// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// WhatsappCampTemplate
    /// </summary>
    public partial class WhatsappCampTemplate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCampTemplate" /> class.
        /// </summary>
        /// <param name="name">name of the template</param>
        /// <param name="category">description of the template</param>
        /// <param name="language">language of the template</param>
        /// <param name="containsButton">containsButton</param>
        /// <param name="displayHeader">displayHeader</param>
        /// <param name="headerType">type of header</param>
        /// <param name="components">array of component item objects</param>
        /// <param name="headerVariables">array of variables item object</param>
        /// <param name="bodyVariables">array of variables item variables</param>
        /// <param name="buttonType">buttonType</param>
        /// <param name="hideFooter">hideFooter</param>
        [JsonConstructor]
        public WhatsappCampTemplate(Option<string?> name = default, Option<string?> category = default, Option<string?> language = default, Option<bool?> containsButton = default, Option<bool?> displayHeader = default, Option<string?> headerType = default, Option<List<ComponentItems>?> components = default, Option<List<VariablesItems>?> headerVariables = default, Option<List<VariablesItems>?> bodyVariables = default, Option<string?> buttonType = default, Option<bool?> hideFooter = default)
        {
            NameOption = name;
            CategoryOption = category;
            LanguageOption = language;
            ContainsButtonOption = containsButton;
            DisplayHeaderOption = displayHeader;
            HeaderTypeOption = headerType;
            ComponentsOption = components;
            HeaderVariablesOption = headerVariables;
            BodyVariablesOption = bodyVariables;
            ButtonTypeOption = buttonType;
            HideFooterOption = hideFooter;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// name of the template
        /// </summary>
        /// <value>name of the template</value>
        /* <example>wta107</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// description of the template
        /// </summary>
        /// <value>description of the template</value>
        /* <example>Marketing</example> */
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// language of the template
        /// </summary>
        /// <value>language of the template</value>
        /* <example>en_GB</example> */
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContainsButton
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ContainsButtonOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContainsButton
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("contains_button")]
        public bool? ContainsButton { get { return this.ContainsButtonOption; } set { this.ContainsButtonOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisplayHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayHeader
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("display_header")]
        public bool? DisplayHeader { get { return this.DisplayHeaderOption; } set { this.DisplayHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeaderType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HeaderTypeOption { get; private set; }

        /// <summary>
        /// type of header
        /// </summary>
        /// <value>type of header</value>
        /* <example>text</example> */
        [JsonPropertyName("header_type")]
        public string? HeaderType { get { return this.HeaderTypeOption; } set { this.HeaderTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Components
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ComponentItems>?> ComponentsOption { get; private set; }

        /// <summary>
        /// array of component item objects
        /// </summary>
        /// <value>array of component item objects</value>
        [JsonPropertyName("components")]
        public List<ComponentItems>? Components { get { return this.ComponentsOption; } set { this.ComponentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of HeaderVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VariablesItems>?> HeaderVariablesOption { get; private set; }

        /// <summary>
        /// array of variables item object
        /// </summary>
        /// <value>array of variables item object</value>
        [JsonPropertyName("header_variables")]
        public List<VariablesItems>? HeaderVariables { get { return this.HeaderVariablesOption; } set { this.HeaderVariablesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BodyVariables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VariablesItems>?> BodyVariablesOption { get; private set; }

        /// <summary>
        /// array of variables item variables
        /// </summary>
        /// <value>array of variables item variables</value>
        [JsonPropertyName("body_variables")]
        public List<VariablesItems>? BodyVariables { get { return this.BodyVariablesOption; } set { this.BodyVariablesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ButtonType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ButtonTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ButtonType
        /// </summary>
        /* <example>QUICK_REPLIES</example> */
        [JsonPropertyName("button_type")]
        public string? ButtonType { get { return this.ButtonTypeOption; } set { this.ButtonTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of HideFooter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HideFooterOption { get; private set; }

        /// <summary>
        /// Gets or Sets HideFooter
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("hide_footer")]
        public bool? HideFooter { get { return this.HideFooterOption; } set { this.HideFooterOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsappCampTemplate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ContainsButton: ").Append(ContainsButton).Append("\n");
            sb.Append("  DisplayHeader: ").Append(DisplayHeader).Append("\n");
            sb.Append("  HeaderType: ").Append(HeaderType).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  HeaderVariables: ").Append(HeaderVariables).Append("\n");
            sb.Append("  BodyVariables: ").Append(BodyVariables).Append("\n");
            sb.Append("  ButtonType: ").Append(ButtonType).Append("\n");
            sb.Append("  HideFooter: ").Append(HideFooter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WhatsappCampTemplate" />
    /// </summary>
    public class WhatsappCampTemplateJsonConverter : JsonConverter<WhatsappCampTemplate>
    {
        /// <summary>
        /// Deserializes json to <see cref="WhatsappCampTemplate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WhatsappCampTemplate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> category = default;
            Option<string?> language = default;
            Option<bool?> containsButton = default;
            Option<bool?> displayHeader = default;
            Option<string?> headerType = default;
            Option<List<ComponentItems>?> components = default;
            Option<List<VariablesItems>?> headerVariables = default;
            Option<List<VariablesItems>?> bodyVariables = default;
            Option<string?> buttonType = default;
            Option<bool?> hideFooter = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contains_button":
                            containsButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "display_header":
                            displayHeader = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "header_type":
                            headerType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "components":
                            components = new Option<List<ComponentItems>?>(JsonSerializer.Deserialize<List<ComponentItems>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "header_variables":
                            headerVariables = new Option<List<VariablesItems>?>(JsonSerializer.Deserialize<List<VariablesItems>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "body_variables":
                            bodyVariables = new Option<List<VariablesItems>?>(JsonSerializer.Deserialize<List<VariablesItems>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "button_type":
                            buttonType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hide_footer":
                            hideFooter = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WhatsappCampTemplate.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class WhatsappCampTemplate.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class WhatsappCampTemplate.");

            if (containsButton.IsSet && containsButton.Value == null)
                throw new ArgumentNullException(nameof(containsButton), "Property is not nullable for class WhatsappCampTemplate.");

            if (displayHeader.IsSet && displayHeader.Value == null)
                throw new ArgumentNullException(nameof(displayHeader), "Property is not nullable for class WhatsappCampTemplate.");

            if (headerType.IsSet && headerType.Value == null)
                throw new ArgumentNullException(nameof(headerType), "Property is not nullable for class WhatsappCampTemplate.");

            if (components.IsSet && components.Value == null)
                throw new ArgumentNullException(nameof(components), "Property is not nullable for class WhatsappCampTemplate.");

            if (headerVariables.IsSet && headerVariables.Value == null)
                throw new ArgumentNullException(nameof(headerVariables), "Property is not nullable for class WhatsappCampTemplate.");

            if (bodyVariables.IsSet && bodyVariables.Value == null)
                throw new ArgumentNullException(nameof(bodyVariables), "Property is not nullable for class WhatsappCampTemplate.");

            if (buttonType.IsSet && buttonType.Value == null)
                throw new ArgumentNullException(nameof(buttonType), "Property is not nullable for class WhatsappCampTemplate.");

            if (hideFooter.IsSet && hideFooter.Value == null)
                throw new ArgumentNullException(nameof(hideFooter), "Property is not nullable for class WhatsappCampTemplate.");

            return new WhatsappCampTemplate(name, category, language, containsButton, displayHeader, headerType, components, headerVariables, bodyVariables, buttonType, hideFooter);
        }

        /// <summary>
        /// Serializes a <see cref="WhatsappCampTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="whatsappCampTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WhatsappCampTemplate whatsappCampTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, whatsappCampTemplate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WhatsappCampTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="whatsappCampTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WhatsappCampTemplate whatsappCampTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (whatsappCampTemplate.NameOption.IsSet && whatsappCampTemplate.Name == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.Name), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.CategoryOption.IsSet && whatsappCampTemplate.Category == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.Category), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.LanguageOption.IsSet && whatsappCampTemplate.Language == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.Language), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.HeaderTypeOption.IsSet && whatsappCampTemplate.HeaderType == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.HeaderType), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.ComponentsOption.IsSet && whatsappCampTemplate.Components == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.Components), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.HeaderVariablesOption.IsSet && whatsappCampTemplate.HeaderVariables == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.HeaderVariables), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.BodyVariablesOption.IsSet && whatsappCampTemplate.BodyVariables == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.BodyVariables), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.ButtonTypeOption.IsSet && whatsappCampTemplate.ButtonType == null)
                throw new ArgumentNullException(nameof(whatsappCampTemplate.ButtonType), "Property is required for class WhatsappCampTemplate.");

            if (whatsappCampTemplate.NameOption.IsSet)
                writer.WriteString("name", whatsappCampTemplate.Name);

            if (whatsappCampTemplate.CategoryOption.IsSet)
                writer.WriteString("category", whatsappCampTemplate.Category);

            if (whatsappCampTemplate.LanguageOption.IsSet)
                writer.WriteString("language", whatsappCampTemplate.Language);

            if (whatsappCampTemplate.ContainsButtonOption.IsSet)
                writer.WriteBoolean("contains_button", whatsappCampTemplate.ContainsButtonOption.Value!.Value);

            if (whatsappCampTemplate.DisplayHeaderOption.IsSet)
                writer.WriteBoolean("display_header", whatsappCampTemplate.DisplayHeaderOption.Value!.Value);

            if (whatsappCampTemplate.HeaderTypeOption.IsSet)
                writer.WriteString("header_type", whatsappCampTemplate.HeaderType);

            if (whatsappCampTemplate.ComponentsOption.IsSet)
            {
                writer.WritePropertyName("components");
                JsonSerializer.Serialize(writer, whatsappCampTemplate.Components, jsonSerializerOptions);
            }
            if (whatsappCampTemplate.HeaderVariablesOption.IsSet)
            {
                writer.WritePropertyName("header_variables");
                JsonSerializer.Serialize(writer, whatsappCampTemplate.HeaderVariables, jsonSerializerOptions);
            }
            if (whatsappCampTemplate.BodyVariablesOption.IsSet)
            {
                writer.WritePropertyName("body_variables");
                JsonSerializer.Serialize(writer, whatsappCampTemplate.BodyVariables, jsonSerializerOptions);
            }
            if (whatsappCampTemplate.ButtonTypeOption.IsSet)
                writer.WriteString("button_type", whatsappCampTemplate.ButtonType);

            if (whatsappCampTemplate.HideFooterOption.IsSet)
                writer.WriteBoolean("hide_footer", whatsappCampTemplate.HideFooterOption.Value!.Value);
        }
    }
}
