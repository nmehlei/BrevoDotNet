// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// GetExtendedCampaignOverview
    /// </summary>
    public partial class GetExtendedCampaignOverview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetExtendedCampaignOverview" /> class.
        /// </summary>
        /// <param name="id">ID of the campaign</param>
        /// <param name="name">Name of the campaign</param>
        /// <param name="type">Type of campaign</param>
        /// <param name="status">Status of the campaign</param>
        /// <param name="testSent">Retrieved the status of test email sending. (true&#x3D;Test email has been sent  false&#x3D;Test email has not been sent)</param>
        /// <param name="header">Header of the campaign</param>
        /// <param name="footer">Footer of the campaign</param>
        /// <param name="sender">sender</param>
        /// <param name="replyTo">Email defined as the \&quot;Reply to\&quot; of the campaign</param>
        /// <param name="toField">Customisation of the \&quot;to\&quot; field of the campaign</param>
        /// <param name="htmlContent">HTML content of the campaign</param>
        /// <param name="tag">Tag of the campaign</param>
        /// <param name="createdAt">Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="modifiedAt">UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="subject">Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;</param>
        /// <param name="scheduledAt">UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)</param>
        /// <param name="abTesting">Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.</param>
        /// <param name="subjectA">Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="subjectB">Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="splitRule">The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="winnerCriteria">Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="winnerDelay">The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</param>
        /// <param name="sendAtBestTime">It is true if you have chosen to send your campaign at best time, otherwise it is false</param>
        /// <param name="shareLink">Link to share the campaign on social medias</param>
        /// <param name="inlineImageActivation">Status of inline image. inlineImageActivation &#x3D; false means image canâ€™t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email.</param>
        /// <param name="mirrorActive">Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign</param>
        /// <param name="recurring">FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times</param>
        /// <param name="sentDate">Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if &#39;status&#39; of the campaign is &#39;sent&#39;</param>
        /// <param name="returnBounce">Total number of non-delivered campaigns for a particular campaign id.</param>
        [JsonConstructor]
        public GetExtendedCampaignOverview(long id, string name, TypeEnum type, StatusEnum status, bool testSent, string header, string footer, GetExtendedCampaignOverviewAllOfSender sender, string replyTo, string toField, string htmlContent, string tag, DateTime createdAt, DateTime modifiedAt, Option<string?> subject = default, Option<DateTime?> scheduledAt = default, Option<bool?> abTesting = default, Option<string?> subjectA = default, Option<string?> subjectB = default, Option<int?> splitRule = default, Option<string?> winnerCriteria = default, Option<int?> winnerDelay = default, Option<bool?> sendAtBestTime = default, Option<string?> shareLink = default, Option<bool?> inlineImageActivation = default, Option<bool?> mirrorActive = default, Option<bool?> recurring = default, Option<DateTime?> sentDate = default, Option<long?> returnBounce = default)
        {
            Id = id;
            Name = name;
            Type = type;
            Status = status;
            TestSent = testSent;
            Header = header;
            Footer = footer;
            Sender = sender;
            ReplyTo = replyTo;
            ToField = toField;
            HtmlContent = htmlContent;
            Tag = tag;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            SubjectOption = subject;
            ScheduledAtOption = scheduledAt;
            AbTestingOption = abTesting;
            SubjectAOption = subjectA;
            SubjectBOption = subjectB;
            SplitRuleOption = splitRule;
            WinnerCriteriaOption = winnerCriteria;
            WinnerDelayOption = winnerDelay;
            SendAtBestTimeOption = sendAtBestTime;
            ShareLinkOption = shareLink;
            InlineImageActivationOption = inlineImageActivation;
            MirrorActiveOption = mirrorActive;
            RecurringOption = recurring;
            SentDateOption = sentDate;
            ReturnBounceOption = returnBounce;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of campaign
        /// </summary>
        /// <value>Type of campaign</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Classic for value: classic
            /// </summary>
            Classic = 1,

            /// <summary>
            /// Enum Trigger for value: trigger
            /// </summary>
            Trigger = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("classic"))
                return TypeEnum.Classic;

            if (value.Equals("trigger"))
                return TypeEnum.Trigger;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("classic"))
                return TypeEnum.Classic;

            if (value.Equals("trigger"))
                return TypeEnum.Trigger;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Classic)
                return "classic";

            if (value == TypeEnum.Trigger)
                return "trigger";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of campaign
        /// </summary>
        /// <value>Type of campaign</value>
        /* <example>classic</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            Draft = 1,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 2,

            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            Archive = 3,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            Queued = 4,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 5,

            /// <summary>
            /// Enum InProcess for value: in_process
            /// </summary>
            InProcess = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("draft"))
                return StatusEnum.Draft;

            if (value.Equals("sent"))
                return StatusEnum.Sent;

            if (value.Equals("archive"))
                return StatusEnum.Archive;

            if (value.Equals("queued"))
                return StatusEnum.Queued;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("in_process"))
                return StatusEnum.InProcess;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Draft)
                return "draft";

            if (value == StatusEnum.Sent)
                return "sent";

            if (value == StatusEnum.Archive)
                return "archive";

            if (value == StatusEnum.Queued)
                return "queued";

            if (value == StatusEnum.Suspended)
                return "suspended";

            if (value == StatusEnum.InProcess)
                return "in_process";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Status of the campaign
        /// </summary>
        /// <value>Status of the campaign</value>
        /* <example>sent</example> */
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// ID of the campaign
        /// </summary>
        /// <value>ID of the campaign</value>
        /* <example>12</example> */
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Name of the campaign
        /// </summary>
        /// <value>Name of the campaign</value>
        /* <example>EN - Sales Summer 2017</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Retrieved the status of test email sending. (true&#x3D;Test email has been sent  false&#x3D;Test email has not been sent)
        /// </summary>
        /// <value>Retrieved the status of test email sending. (true&#x3D;Test email has been sent  false&#x3D;Test email has not been sent)</value>
        /* <example>true</example> */
        [JsonPropertyName("testSent")]
        public bool TestSent { get; set; }

        /// <summary>
        /// Header of the campaign
        /// </summary>
        /// <value>Header of the campaign</value>
        /* <example>[DEFAULT_HEADER]</example> */
        [JsonPropertyName("header")]
        public string Header { get; set; }

        /// <summary>
        /// Footer of the campaign
        /// </summary>
        /// <value>Footer of the campaign</value>
        /* <example>[DEFAULT_FOOTER]</example> */
        [JsonPropertyName("footer")]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public GetExtendedCampaignOverviewAllOfSender Sender { get; set; }

        /// <summary>
        /// Email defined as the \&quot;Reply to\&quot; of the campaign
        /// </summary>
        /// <value>Email defined as the \&quot;Reply to\&quot; of the campaign</value>
        /* <example>replyto@domain.com</example> */
        [JsonPropertyName("replyTo")]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Customisation of the \&quot;to\&quot; field of the campaign
        /// </summary>
        /// <value>Customisation of the \&quot;to\&quot; field of the campaign</value>
        /* <example>{FNAME} {LNAME}</example> */
        [JsonPropertyName("toField")]
        public string ToField { get; set; }

        /// <summary>
        /// HTML content of the campaign
        /// </summary>
        /// <value>HTML content of the campaign</value>
        /* <example>This is my HTML Content</example> */
        [JsonPropertyName("htmlContent")]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Tag of the campaign
        /// </summary>
        /// <value>Tag of the campaign</value>
        /* <example>Newsletter</example> */
        [JsonPropertyName("tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-05-01T12:30Z</example> */
        [JsonPropertyName("modifiedAt")]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;
        /// </summary>
        /// <value>Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;</value>
        /* <example>20% OFF for 2017 Summer Sales</example> */
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ScheduledAtOption { get; private set; }

        /// <summary>
        /// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
        /// </summary>
        /// <value>UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)</value>
        /* <example>2017-06-01T12:30Z</example> */
        [JsonPropertyName("scheduledAt")]
        public DateTime? ScheduledAt { get { return this.ScheduledAtOption; } set { this.ScheduledAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of AbTesting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AbTestingOption { get; private set; }

        /// <summary>
        /// Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.
        /// </summary>
        /// <value>Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.</value>
        /* <example>true</example> */
        [JsonPropertyName("abTesting")]
        public bool? AbTesting { get { return this.AbTestingOption; } set { this.AbTestingOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectAOption { get; private set; }

        /// <summary>
        /// Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>Discover the New Collection!</example> */
        [JsonPropertyName("subjectA")]
        public string? SubjectA { get { return this.SubjectAOption; } set { this.SubjectAOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectBOption { get; private set; }

        /// <summary>
        /// Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>Want to discover the New Collection?</example> */
        [JsonPropertyName("subjectB")]
        public string? SubjectB { get { return this.SubjectBOption; } set { this.SubjectBOption = new(value); } }

        /// <summary>
        /// Used to track the state of SplitRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SplitRuleOption { get; private set; }

        /// <summary>
        /// The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>25</example> */
        [JsonPropertyName("splitRule")]
        public int? SplitRule { get { return this.SplitRuleOption; } set { this.SplitRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinnerCriteria
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WinnerCriteriaOption { get; private set; }

        /// <summary>
        /// Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>open</example> */
        [JsonPropertyName("winnerCriteria")]
        public string? WinnerCriteria { get { return this.WinnerCriteriaOption; } set { this.WinnerCriteriaOption = new(value); } }

        /// <summary>
        /// Used to track the state of WinnerDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WinnerDelayOption { get; private set; }

        /// <summary>
        /// The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
        /// </summary>
        /// <value>The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;</value>
        /* <example>50</example> */
        [JsonPropertyName("winnerDelay")]
        public int? WinnerDelay { get { return this.WinnerDelayOption; } set { this.WinnerDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of SendAtBestTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SendAtBestTimeOption { get; private set; }

        /// <summary>
        /// It is true if you have chosen to send your campaign at best time, otherwise it is false
        /// </summary>
        /// <value>It is true if you have chosen to send your campaign at best time, otherwise it is false</value>
        /* <example>true</example> */
        [JsonPropertyName("sendAtBestTime")]
        public bool? SendAtBestTime { get { return this.SendAtBestTimeOption; } set { this.SendAtBestTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShareLink
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShareLinkOption { get; private set; }

        /// <summary>
        /// Link to share the campaign on social medias
        /// </summary>
        /// <value>Link to share the campaign on social medias</value>
        /* <example>http://dhh.sendinblue.com/fhsgccc.html?t&#x3D;9865448900</example> */
        [JsonPropertyName("shareLink")]
        public string? ShareLink { get { return this.ShareLinkOption; } set { this.ShareLinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of InlineImageActivation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InlineImageActivationOption { get; private set; }

        /// <summary>
        /// Status of inline image. inlineImageActivation &#x3D; false means image canâ€™t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email.
        /// </summary>
        /// <value>Status of inline image. inlineImageActivation &#x3D; false means image canâ€™t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email.</value>
        /* <example>true</example> */
        [JsonPropertyName("inlineImageActivation")]
        public bool? InlineImageActivation { get { return this.InlineImageActivationOption; } set { this.InlineImageActivationOption = new(value); } }

        /// <summary>
        /// Used to track the state of MirrorActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MirrorActiveOption { get; private set; }

        /// <summary>
        /// Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign
        /// </summary>
        /// <value>Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign</value>
        /* <example>true</example> */
        [JsonPropertyName("mirrorActive")]
        public bool? MirrorActive { get { return this.MirrorActiveOption; } set { this.MirrorActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Recurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RecurringOption { get; private set; }

        /// <summary>
        /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times
        /// </summary>
        /// <value>FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times</value>
        /* <example>true</example> */
        [JsonPropertyName("recurring")]
        public bool? Recurring { get { return this.RecurringOption; } set { this.RecurringOption = new(value); } }

        /// <summary>
        /// Used to track the state of SentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SentDateOption { get; private set; }

        /// <summary>
        /// Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if &#39;status&#39; of the campaign is &#39;sent&#39;
        /// </summary>
        /// <value>Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if &#39;status&#39; of the campaign is &#39;sent&#39;</value>
        /* <example>2018-12-01T16:30Z</example> */
        [JsonPropertyName("sentDate")]
        public DateTime? SentDate { get { return this.SentDateOption; } set { this.SentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReturnBounce
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ReturnBounceOption { get; private set; }

        /// <summary>
        /// Total number of non-delivered campaigns for a particular campaign id.
        /// </summary>
        /// <value>Total number of non-delivered campaigns for a particular campaign id.</value>
        /* <example>5</example> */
        [JsonPropertyName("returnBounce")]
        public long? ReturnBounce { get { return this.ReturnBounceOption; } set { this.ReturnBounceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetExtendedCampaignOverview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TestSent: ").Append(TestSent).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  AbTesting: ").Append(AbTesting).Append("\n");
            sb.Append("  SubjectA: ").Append(SubjectA).Append("\n");
            sb.Append("  SubjectB: ").Append(SubjectB).Append("\n");
            sb.Append("  SplitRule: ").Append(SplitRule).Append("\n");
            sb.Append("  WinnerCriteria: ").Append(WinnerCriteria).Append("\n");
            sb.Append("  WinnerDelay: ").Append(WinnerDelay).Append("\n");
            sb.Append("  SendAtBestTime: ").Append(SendAtBestTime).Append("\n");
            sb.Append("  ShareLink: ").Append(ShareLink).Append("\n");
            sb.Append("  InlineImageActivation: ").Append(InlineImageActivation).Append("\n");
            sb.Append("  MirrorActive: ").Append(MirrorActive).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  SentDate: ").Append(SentDate).Append("\n");
            sb.Append("  ReturnBounce: ").Append(ReturnBounce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetExtendedCampaignOverview" />
    /// </summary>
    public class GetExtendedCampaignOverviewJsonConverter : JsonConverter<GetExtendedCampaignOverview>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedAt
        /// </summary>
        public static string ModifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ScheduledAt
        /// </summary>
        public static string ScheduledAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SentDate
        /// </summary>
        public static string SentDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetExtendedCampaignOverview" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetExtendedCampaignOverview Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<GetExtendedCampaignOverview.TypeEnum?> type = default;
            Option<GetExtendedCampaignOverview.StatusEnum?> status = default;
            Option<bool?> testSent = default;
            Option<string?> header = default;
            Option<string?> footer = default;
            Option<GetExtendedCampaignOverviewAllOfSender?> sender = default;
            Option<string?> replyTo = default;
            Option<string?> toField = default;
            Option<string?> htmlContent = default;
            Option<string?> tag = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> modifiedAt = default;
            Option<string?> subject = default;
            Option<DateTime?> scheduledAt = default;
            Option<bool?> abTesting = default;
            Option<string?> subjectA = default;
            Option<string?> subjectB = default;
            Option<int?> splitRule = default;
            Option<string?> winnerCriteria = default;
            Option<int?> winnerDelay = default;
            Option<bool?> sendAtBestTime = default;
            Option<string?> shareLink = default;
            Option<bool?> inlineImageActivation = default;
            Option<bool?> mirrorActive = default;
            Option<bool?> recurring = default;
            Option<DateTime?> sentDate = default;
            Option<long?> returnBounce = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<GetExtendedCampaignOverview.TypeEnum?>(GetExtendedCampaignOverview.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetExtendedCampaignOverview.StatusEnum?>(GetExtendedCampaignOverview.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "testSent":
                            testSent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "header":
                            header = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "footer":
                            footer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sender":
                            sender = new Option<GetExtendedCampaignOverviewAllOfSender?>(JsonSerializer.Deserialize<GetExtendedCampaignOverviewAllOfSender>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "replyTo":
                            replyTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toField":
                            toField = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlContent":
                            htmlContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "modifiedAt":
                            modifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scheduledAt":
                            scheduledAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "abTesting":
                            abTesting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subjectA":
                            subjectA = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectB":
                            subjectB = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "splitRule":
                            splitRule = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "winnerCriteria":
                            winnerCriteria = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "winnerDelay":
                            winnerDelay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sendAtBestTime":
                            sendAtBestTime = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shareLink":
                            shareLink = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inlineImageActivation":
                            inlineImageActivation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mirrorActive":
                            mirrorActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "recurring":
                            recurring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sentDate":
                            sentDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "returnBounce":
                            returnBounce = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(type));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(status));

            if (!testSent.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(testSent));

            if (!header.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(header));

            if (!footer.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(footer));

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(sender));

            if (!replyTo.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(replyTo));

            if (!toField.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(toField));

            if (!htmlContent.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(htmlContent));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(tag));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(createdAt));

            if (!modifiedAt.IsSet)
                throw new ArgumentException("Property is required for class GetExtendedCampaignOverview.", nameof(modifiedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (testSent.IsSet && testSent.Value == null)
                throw new ArgumentNullException(nameof(testSent), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (header.IsSet && header.Value == null)
                throw new ArgumentNullException(nameof(header), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (footer.IsSet && footer.Value == null)
                throw new ArgumentNullException(nameof(footer), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (toField.IsSet && toField.Value == null)
                throw new ArgumentNullException(nameof(toField), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (htmlContent.IsSet && htmlContent.Value == null)
                throw new ArgumentNullException(nameof(htmlContent), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (modifiedAt.IsSet && modifiedAt.Value == null)
                throw new ArgumentNullException(nameof(modifiedAt), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (scheduledAt.IsSet && scheduledAt.Value == null)
                throw new ArgumentNullException(nameof(scheduledAt), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (abTesting.IsSet && abTesting.Value == null)
                throw new ArgumentNullException(nameof(abTesting), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (subjectA.IsSet && subjectA.Value == null)
                throw new ArgumentNullException(nameof(subjectA), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (subjectB.IsSet && subjectB.Value == null)
                throw new ArgumentNullException(nameof(subjectB), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (splitRule.IsSet && splitRule.Value == null)
                throw new ArgumentNullException(nameof(splitRule), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (winnerCriteria.IsSet && winnerCriteria.Value == null)
                throw new ArgumentNullException(nameof(winnerCriteria), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (winnerDelay.IsSet && winnerDelay.Value == null)
                throw new ArgumentNullException(nameof(winnerDelay), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (sendAtBestTime.IsSet && sendAtBestTime.Value == null)
                throw new ArgumentNullException(nameof(sendAtBestTime), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (shareLink.IsSet && shareLink.Value == null)
                throw new ArgumentNullException(nameof(shareLink), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (inlineImageActivation.IsSet && inlineImageActivation.Value == null)
                throw new ArgumentNullException(nameof(inlineImageActivation), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (mirrorActive.IsSet && mirrorActive.Value == null)
                throw new ArgumentNullException(nameof(mirrorActive), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (recurring.IsSet && recurring.Value == null)
                throw new ArgumentNullException(nameof(recurring), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (sentDate.IsSet && sentDate.Value == null)
                throw new ArgumentNullException(nameof(sentDate), "Property is not nullable for class GetExtendedCampaignOverview.");

            if (returnBounce.IsSet && returnBounce.Value == null)
                throw new ArgumentNullException(nameof(returnBounce), "Property is not nullable for class GetExtendedCampaignOverview.");

            return new GetExtendedCampaignOverview(id.Value!.Value!, name.Value!, type.Value!.Value!, status.Value!.Value!, testSent.Value!.Value!, header.Value!, footer.Value!, sender.Value!, replyTo.Value!, toField.Value!, htmlContent.Value!, tag.Value!, createdAt.Value!.Value!, modifiedAt.Value!.Value!, subject, scheduledAt, abTesting, subjectA, subjectB, splitRule, winnerCriteria, winnerDelay, sendAtBestTime, shareLink, inlineImageActivation, mirrorActive, recurring, sentDate, returnBounce);
        }

        /// <summary>
        /// Serializes a <see cref="GetExtendedCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetExtendedCampaignOverview getExtendedCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getExtendedCampaignOverview, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetExtendedCampaignOverview" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getExtendedCampaignOverview"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetExtendedCampaignOverview getExtendedCampaignOverview, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getExtendedCampaignOverview.Name == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Name), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.Header == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Header), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.Footer == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Footer), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.Sender == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Sender), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.ReplyTo == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.ReplyTo), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.ToField == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.ToField), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.HtmlContent == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.HtmlContent), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.Tag == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Tag), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.SubjectOption.IsSet && getExtendedCampaignOverview.Subject == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.Subject), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.SubjectAOption.IsSet && getExtendedCampaignOverview.SubjectA == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.SubjectA), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.SubjectBOption.IsSet && getExtendedCampaignOverview.SubjectB == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.SubjectB), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.WinnerCriteriaOption.IsSet && getExtendedCampaignOverview.WinnerCriteria == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.WinnerCriteria), "Property is required for class GetExtendedCampaignOverview.");

            if (getExtendedCampaignOverview.ShareLinkOption.IsSet && getExtendedCampaignOverview.ShareLink == null)
                throw new ArgumentNullException(nameof(getExtendedCampaignOverview.ShareLink), "Property is required for class GetExtendedCampaignOverview.");

            writer.WriteNumber("id", getExtendedCampaignOverview.Id);

            writer.WriteString("name", getExtendedCampaignOverview.Name);

            var typeRawValue = GetExtendedCampaignOverview.TypeEnumToJsonValue(getExtendedCampaignOverview.Type);
            writer.WriteString("type", typeRawValue);
            var statusRawValue = GetExtendedCampaignOverview.StatusEnumToJsonValue(getExtendedCampaignOverview.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteBoolean("testSent", getExtendedCampaignOverview.TestSent);

            writer.WriteString("header", getExtendedCampaignOverview.Header);

            writer.WriteString("footer", getExtendedCampaignOverview.Footer);

            writer.WritePropertyName("sender");
            JsonSerializer.Serialize(writer, getExtendedCampaignOverview.Sender, jsonSerializerOptions);
            writer.WriteString("replyTo", getExtendedCampaignOverview.ReplyTo);

            writer.WriteString("toField", getExtendedCampaignOverview.ToField);

            writer.WriteString("htmlContent", getExtendedCampaignOverview.HtmlContent);

            writer.WriteString("tag", getExtendedCampaignOverview.Tag);

            writer.WriteString("createdAt", getExtendedCampaignOverview.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("modifiedAt", getExtendedCampaignOverview.ModifiedAt.ToString(ModifiedAtFormat));

            if (getExtendedCampaignOverview.SubjectOption.IsSet)
                writer.WriteString("subject", getExtendedCampaignOverview.Subject);

            if (getExtendedCampaignOverview.ScheduledAtOption.IsSet)
                writer.WriteString("scheduledAt", getExtendedCampaignOverview.ScheduledAtOption.Value!.Value.ToString(ScheduledAtFormat));

            if (getExtendedCampaignOverview.AbTestingOption.IsSet)
                writer.WriteBoolean("abTesting", getExtendedCampaignOverview.AbTestingOption.Value!.Value);

            if (getExtendedCampaignOverview.SubjectAOption.IsSet)
                writer.WriteString("subjectA", getExtendedCampaignOverview.SubjectA);

            if (getExtendedCampaignOverview.SubjectBOption.IsSet)
                writer.WriteString("subjectB", getExtendedCampaignOverview.SubjectB);

            if (getExtendedCampaignOverview.SplitRuleOption.IsSet)
                writer.WriteNumber("splitRule", getExtendedCampaignOverview.SplitRuleOption.Value!.Value);

            if (getExtendedCampaignOverview.WinnerCriteriaOption.IsSet)
                writer.WriteString("winnerCriteria", getExtendedCampaignOverview.WinnerCriteria);

            if (getExtendedCampaignOverview.WinnerDelayOption.IsSet)
                writer.WriteNumber("winnerDelay", getExtendedCampaignOverview.WinnerDelayOption.Value!.Value);

            if (getExtendedCampaignOverview.SendAtBestTimeOption.IsSet)
                writer.WriteBoolean("sendAtBestTime", getExtendedCampaignOverview.SendAtBestTimeOption.Value!.Value);

            if (getExtendedCampaignOverview.ShareLinkOption.IsSet)
                writer.WriteString("shareLink", getExtendedCampaignOverview.ShareLink);

            if (getExtendedCampaignOverview.InlineImageActivationOption.IsSet)
                writer.WriteBoolean("inlineImageActivation", getExtendedCampaignOverview.InlineImageActivationOption.Value!.Value);

            if (getExtendedCampaignOverview.MirrorActiveOption.IsSet)
                writer.WriteBoolean("mirrorActive", getExtendedCampaignOverview.MirrorActiveOption.Value!.Value);

            if (getExtendedCampaignOverview.RecurringOption.IsSet)
                writer.WriteBoolean("recurring", getExtendedCampaignOverview.RecurringOption.Value!.Value);

            if (getExtendedCampaignOverview.SentDateOption.IsSet)
                writer.WriteString("sentDate", getExtendedCampaignOverview.SentDateOption.Value!.Value.ToString(SentDateFormat));

            if (getExtendedCampaignOverview.ReturnBounceOption.IsSet)
                writer.WriteNumber("returnBounce", getExtendedCampaignOverview.ReturnBounceOption.Value!.Value);
        }
    }
}
