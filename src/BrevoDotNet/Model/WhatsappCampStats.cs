// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// WhatsappCampStats
    /// </summary>
    public partial class WhatsappCampStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappCampStats" /> class.
        /// </summary>
        /// <param name="sent">sent</param>
        /// <param name="delivered">delivered</param>
        /// <param name="read">read</param>
        /// <param name="unsubscribe">unsubscribe</param>
        /// <param name="notSent">notSent</param>
        [JsonConstructor]
        public WhatsappCampStats(int sent, int delivered, int read, int unsubscribe, int notSent)
        {
            Sent = sent;
            Delivered = delivered;
            Read = read;
            Unsubscribe = unsubscribe;
            NotSent = notSent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Sent
        /// </summary>
        /* <example>3</example> */
        [JsonPropertyName("sent")]
        public int Sent { get; set; }

        /// <summary>
        /// Gets or Sets Delivered
        /// </summary>
        /* <example>3</example> */
        [JsonPropertyName("delivered")]
        public int Delivered { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("read")]
        public int Read { get; set; }

        /// <summary>
        /// Gets or Sets Unsubscribe
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("unsubscribe")]
        public int Unsubscribe { get; set; }

        /// <summary>
        /// Gets or Sets NotSent
        /// </summary>
        /* <example>4</example> */
        [JsonPropertyName("notSent")]
        public int NotSent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WhatsappCampStats {\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Unsubscribe: ").Append(Unsubscribe).Append("\n");
            sb.Append("  NotSent: ").Append(NotSent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WhatsappCampStats" />
    /// </summary>
    public class WhatsappCampStatsJsonConverter : JsonConverter<WhatsappCampStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="WhatsappCampStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WhatsappCampStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> sent = default;
            Option<int?> delivered = default;
            Option<int?> read = default;
            Option<int?> unsubscribe = default;
            Option<int?> notSent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sent":
                            sent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "delivered":
                            delivered = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "read":
                            read = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "unsubscribe":
                            unsubscribe = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "notSent":
                            notSent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sent.IsSet)
                throw new ArgumentException("Property is required for class WhatsappCampStats.", nameof(sent));

            if (!delivered.IsSet)
                throw new ArgumentException("Property is required for class WhatsappCampStats.", nameof(delivered));

            if (!read.IsSet)
                throw new ArgumentException("Property is required for class WhatsappCampStats.", nameof(read));

            if (!unsubscribe.IsSet)
                throw new ArgumentException("Property is required for class WhatsappCampStats.", nameof(unsubscribe));

            if (!notSent.IsSet)
                throw new ArgumentException("Property is required for class WhatsappCampStats.", nameof(notSent));

            if (sent.IsSet && sent.Value == null)
                throw new ArgumentNullException(nameof(sent), "Property is not nullable for class WhatsappCampStats.");

            if (delivered.IsSet && delivered.Value == null)
                throw new ArgumentNullException(nameof(delivered), "Property is not nullable for class WhatsappCampStats.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class WhatsappCampStats.");

            if (unsubscribe.IsSet && unsubscribe.Value == null)
                throw new ArgumentNullException(nameof(unsubscribe), "Property is not nullable for class WhatsappCampStats.");

            if (notSent.IsSet && notSent.Value == null)
                throw new ArgumentNullException(nameof(notSent), "Property is not nullable for class WhatsappCampStats.");

            return new WhatsappCampStats(sent.Value!.Value!, delivered.Value!.Value!, read.Value!.Value!, unsubscribe.Value!.Value!, notSent.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WhatsappCampStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="whatsappCampStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WhatsappCampStats whatsappCampStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, whatsappCampStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WhatsappCampStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="whatsappCampStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WhatsappCampStats whatsappCampStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("sent", whatsappCampStats.Sent);

            writer.WriteNumber("delivered", whatsappCampStats.Delivered);

            writer.WriteNumber("read", whatsappCampStats.Read);

            writer.WriteNumber("unsubscribe", whatsappCampStats.Unsubscribe);

            writer.WriteNumber("notSent", whatsappCampStats.NotSent);
        }
    }
}
