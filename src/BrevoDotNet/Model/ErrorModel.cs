// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// ErrorModel
    /// </summary>
    public partial class ErrorModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorModel" /> class.
        /// </summary>
        /// <param name="code">Error code displayed in case of a failure</param>
        /// <param name="message">Readable message associated to the failure</param>
        [JsonConstructor]
        public ErrorModel(CodeEnum code, string message)
        {
            Code = code;
            Message = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Error code displayed in case of a failure
        /// </summary>
        /// <value>Error code displayed in case of a failure</value>
        public enum CodeEnum
        {
            /// <summary>
            /// Enum InvalidParameter for value: invalid_parameter
            /// </summary>
            InvalidParameter = 1,

            /// <summary>
            /// Enum MissingParameter for value: missing_parameter
            /// </summary>
            MissingParameter = 2,

            /// <summary>
            /// Enum OutOfRange for value: out_of_range
            /// </summary>
            OutOfRange = 3,

            /// <summary>
            /// Enum CampaignProcessing for value: campaign_processing
            /// </summary>
            CampaignProcessing = 4,

            /// <summary>
            /// Enum CampaignSent for value: campaign_sent
            /// </summary>
            CampaignSent = 5,

            /// <summary>
            /// Enum DocumentNotFound for value: document_not_found
            /// </summary>
            DocumentNotFound = 6,

            /// <summary>
            /// Enum NotEnoughCredits for value: not_enough_credits
            /// </summary>
            NotEnoughCredits = 7,

            /// <summary>
            /// Enum PermissionDenied for value: permission_denied
            /// </summary>
            PermissionDenied = 8,

            /// <summary>
            /// Enum DuplicateParameter for value: duplicate_parameter
            /// </summary>
            DuplicateParameter = 9,

            /// <summary>
            /// Enum DuplicateRequest for value: duplicate_request
            /// </summary>
            DuplicateRequest = 10,

            /// <summary>
            /// Enum MethodNotAllowed for value: method_not_allowed
            /// </summary>
            MethodNotAllowed = 11,

            /// <summary>
            /// Enum Unauthorized for value: unauthorized
            /// </summary>
            Unauthorized = 12,

            /// <summary>
            /// Enum AccountUnderValidation for value: account_under_validation
            /// </summary>
            AccountUnderValidation = 13,

            /// <summary>
            /// Enum NotAcceptable for value: not_acceptable
            /// </summary>
            NotAcceptable = 14
        }

        /// <summary>
        /// Returns a <see cref="CodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CodeEnum CodeEnumFromString(string value)
        {
            if (value.Equals("invalid_parameter"))
                return CodeEnum.InvalidParameter;

            if (value.Equals("missing_parameter"))
                return CodeEnum.MissingParameter;

            if (value.Equals("out_of_range"))
                return CodeEnum.OutOfRange;

            if (value.Equals("campaign_processing"))
                return CodeEnum.CampaignProcessing;

            if (value.Equals("campaign_sent"))
                return CodeEnum.CampaignSent;

            if (value.Equals("document_not_found"))
                return CodeEnum.DocumentNotFound;

            if (value.Equals("not_enough_credits"))
                return CodeEnum.NotEnoughCredits;

            if (value.Equals("permission_denied"))
                return CodeEnum.PermissionDenied;

            if (value.Equals("duplicate_parameter"))
                return CodeEnum.DuplicateParameter;

            if (value.Equals("duplicate_request"))
                return CodeEnum.DuplicateRequest;

            if (value.Equals("method_not_allowed"))
                return CodeEnum.MethodNotAllowed;

            if (value.Equals("unauthorized"))
                return CodeEnum.Unauthorized;

            if (value.Equals("account_under_validation"))
                return CodeEnum.AccountUnderValidation;

            if (value.Equals("not_acceptable"))
                return CodeEnum.NotAcceptable;

            throw new NotImplementedException($"Could not convert value to type CodeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CodeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CodeEnum? CodeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("invalid_parameter"))
                return CodeEnum.InvalidParameter;

            if (value.Equals("missing_parameter"))
                return CodeEnum.MissingParameter;

            if (value.Equals("out_of_range"))
                return CodeEnum.OutOfRange;

            if (value.Equals("campaign_processing"))
                return CodeEnum.CampaignProcessing;

            if (value.Equals("campaign_sent"))
                return CodeEnum.CampaignSent;

            if (value.Equals("document_not_found"))
                return CodeEnum.DocumentNotFound;

            if (value.Equals("not_enough_credits"))
                return CodeEnum.NotEnoughCredits;

            if (value.Equals("permission_denied"))
                return CodeEnum.PermissionDenied;

            if (value.Equals("duplicate_parameter"))
                return CodeEnum.DuplicateParameter;

            if (value.Equals("duplicate_request"))
                return CodeEnum.DuplicateRequest;

            if (value.Equals("method_not_allowed"))
                return CodeEnum.MethodNotAllowed;

            if (value.Equals("unauthorized"))
                return CodeEnum.Unauthorized;

            if (value.Equals("account_under_validation"))
                return CodeEnum.AccountUnderValidation;

            if (value.Equals("not_acceptable"))
                return CodeEnum.NotAcceptable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CodeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CodeEnumToJsonValue(CodeEnum value)
        {
            if (value == CodeEnum.InvalidParameter)
                return "invalid_parameter";

            if (value == CodeEnum.MissingParameter)
                return "missing_parameter";

            if (value == CodeEnum.OutOfRange)
                return "out_of_range";

            if (value == CodeEnum.CampaignProcessing)
                return "campaign_processing";

            if (value == CodeEnum.CampaignSent)
                return "campaign_sent";

            if (value == CodeEnum.DocumentNotFound)
                return "document_not_found";

            if (value == CodeEnum.NotEnoughCredits)
                return "not_enough_credits";

            if (value == CodeEnum.PermissionDenied)
                return "permission_denied";

            if (value == CodeEnum.DuplicateParameter)
                return "duplicate_parameter";

            if (value == CodeEnum.DuplicateRequest)
                return "duplicate_request";

            if (value == CodeEnum.MethodNotAllowed)
                return "method_not_allowed";

            if (value == CodeEnum.Unauthorized)
                return "unauthorized";

            if (value == CodeEnum.AccountUnderValidation)
                return "account_under_validation";

            if (value == CodeEnum.NotAcceptable)
                return "not_acceptable";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Error code displayed in case of a failure
        /// </summary>
        /// <value>Error code displayed in case of a failure</value>
        /* <example>method_not_allowed</example> */
        [JsonPropertyName("code")]
        public CodeEnum Code { get; set; }

        /// <summary>
        /// Readable message associated to the failure
        /// </summary>
        /// <value>Readable message associated to the failure</value>
        /* <example>POST Method is not allowed on this path</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorModel" />
    /// </summary>
    public class ErrorModelJsonConverter : JsonConverter<ErrorModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ErrorModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ErrorModel.CodeEnum?> code = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            string? codeRawValue = utf8JsonReader.GetString();
                            if (codeRawValue != null)
                                code = new Option<ErrorModel.CodeEnum?>(ErrorModel.CodeEnumFromStringOrDefault(codeRawValue));
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class ErrorModel.", nameof(code));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class ErrorModel.", nameof(message));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class ErrorModel.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ErrorModel.");

            return new ErrorModel(code.Value!.Value!, message.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorModel errorModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorModel errorModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorModel.Message == null)
                throw new ArgumentNullException(nameof(errorModel.Message), "Property is required for class ErrorModel.");

            var codeRawValue = ErrorModel.CodeEnumToJsonValue(errorModel.Code);
            writer.WriteString("code", codeRawValue);
            writer.WriteString("message", errorModel.Message);
        }
    }
}
