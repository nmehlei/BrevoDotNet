// <auto-generated>
/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrevoDotNet.Client;

namespace BrevoDotNet.Model
{
    /// <summary>
    /// CreateSmtpTemplate
    /// </summary>
    public partial class CreateSmtpTemplate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmtpTemplate" /> class.
        /// </summary>
        /// <param name="sender">sender</param>
        /// <param name="templateName">Name of the template</param>
        /// <param name="subject">Subject of the template</param>
        /// <param name="tag">Tag of the template</param>
        /// <param name="htmlContent">Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty</param>
        /// <param name="htmlUrl">Url which contents the body of the email message. REQUIRED if htmlContent is empty</param>
        /// <param name="replyTo">Email on which campaign recipients will be able to reply to</param>
        /// <param name="toField">To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</param>
        /// <param name="attachmentUrl">Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</param>
        /// <param name="isActive">Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive</param>
        [JsonConstructor]
        public CreateSmtpTemplate(CreateSmtpTemplateSender sender, string templateName, string subject, Option<string?> tag = default, Option<string?> htmlContent = default, Option<string?> htmlUrl = default, Option<string?> replyTo = default, Option<string?> toField = default, Option<string?> attachmentUrl = default, Option<bool?> isActive = default)
        {
            Sender = sender;
            TemplateName = templateName;
            Subject = subject;
            TagOption = tag;
            HtmlContentOption = htmlContent;
            HtmlUrlOption = htmlUrl;
            ReplyToOption = replyTo;
            ToFieldOption = toField;
            AttachmentUrlOption = attachmentUrl;
            IsActiveOption = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [JsonPropertyName("sender")]
        public CreateSmtpTemplateSender Sender { get; set; }

        /// <summary>
        /// Name of the template
        /// </summary>
        /// <value>Name of the template</value>
        /* <example>Order Confirmation - EN</example> */
        [JsonPropertyName("templateName")]
        public string TemplateName { get; set; }

        /// <summary>
        /// Subject of the template
        /// </summary>
        /// <value>Subject of the template</value>
        /* <example>Thanks for your purchase !</example> */
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Tag of the template
        /// </summary>
        /// <value>Tag of the template</value>
        /* <example>OrderConfirmation</example> */
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of HtmlContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HtmlContentOption { get; private set; }

        /// <summary>
        /// Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty
        /// </summary>
        /// <value>Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty</value>
        /* <example>The order n°xxxxx has been confirmed. Thanks for your purchase</example> */
        [JsonPropertyName("htmlContent")]
        public string? HtmlContent { get { return this.HtmlContentOption; } set { this.HtmlContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of HtmlUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HtmlUrlOption { get; private set; }

        /// <summary>
        /// Url which contents the body of the email message. REQUIRED if htmlContent is empty
        /// </summary>
        /// <value>Url which contents the body of the email message. REQUIRED if htmlContent is empty</value>
        /* <example>https://html.domain.com</example> */
        [JsonPropertyName("htmlUrl")]
        public string? HtmlUrl { get { return this.HtmlUrlOption; } set { this.HtmlUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReplyTo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyToOption { get; private set; }

        /// <summary>
        /// Email on which campaign recipients will be able to reply to
        /// </summary>
        /// <value>Email on which campaign recipients will be able to reply to</value>
        /* <example>support@myshop.com</example> */
        [JsonPropertyName("replyTo")]
        public string? ReplyTo { get { return this.ReplyToOption; } set { this.ReplyToOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToField
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToFieldOption { get; private set; }

        /// <summary>
        /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
        /// </summary>
        /// <value>To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization</value>
        /* <example>{FNAME} {LNAME}</example> */
        [JsonPropertyName("toField")]
        public string? ToField { get { return this.ToFieldOption; } set { this.ToFieldOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachmentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttachmentUrlOption { get; private set; }

        /// <summary>
        /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
        /// </summary>
        /// <value>Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps</value>
        /* <example>https://attachment.domain.com</example> */
        [JsonPropertyName("attachmentUrl")]
        public string? AttachmentUrl { get { return this.AttachmentUrlOption; } set { this.AttachmentUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive
        /// </summary>
        /// <value>Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive</value>
        /* <example>true</example> */
        [JsonPropertyName("isActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSmtpTemplate {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  ToField: ").Append(ToField).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateSmtpTemplate" />
    /// </summary>
    public class CreateSmtpTemplateJsonConverter : JsonConverter<CreateSmtpTemplate>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateSmtpTemplate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateSmtpTemplate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateSmtpTemplateSender?> sender = default;
            Option<string?> templateName = default;
            Option<string?> subject = default;
            Option<string?> tag = default;
            Option<string?> htmlContent = default;
            Option<string?> htmlUrl = default;
            Option<string?> replyTo = default;
            Option<string?> toField = default;
            Option<string?> attachmentUrl = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender":
                            sender = new Option<CreateSmtpTemplateSender?>(JsonSerializer.Deserialize<CreateSmtpTemplateSender>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templateName":
                            templateName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlContent":
                            htmlContent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "htmlUrl":
                            htmlUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "replyTo":
                            replyTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "toField":
                            toField = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachmentUrl":
                            attachmentUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActive":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sender.IsSet)
                throw new ArgumentException("Property is required for class CreateSmtpTemplate.", nameof(sender));

            if (!templateName.IsSet)
                throw new ArgumentException("Property is required for class CreateSmtpTemplate.", nameof(templateName));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class CreateSmtpTemplate.", nameof(subject));

            if (sender.IsSet && sender.Value == null)
                throw new ArgumentNullException(nameof(sender), "Property is not nullable for class CreateSmtpTemplate.");

            if (templateName.IsSet && templateName.Value == null)
                throw new ArgumentNullException(nameof(templateName), "Property is not nullable for class CreateSmtpTemplate.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class CreateSmtpTemplate.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class CreateSmtpTemplate.");

            if (htmlContent.IsSet && htmlContent.Value == null)
                throw new ArgumentNullException(nameof(htmlContent), "Property is not nullable for class CreateSmtpTemplate.");

            if (htmlUrl.IsSet && htmlUrl.Value == null)
                throw new ArgumentNullException(nameof(htmlUrl), "Property is not nullable for class CreateSmtpTemplate.");

            if (replyTo.IsSet && replyTo.Value == null)
                throw new ArgumentNullException(nameof(replyTo), "Property is not nullable for class CreateSmtpTemplate.");

            if (toField.IsSet && toField.Value == null)
                throw new ArgumentNullException(nameof(toField), "Property is not nullable for class CreateSmtpTemplate.");

            if (attachmentUrl.IsSet && attachmentUrl.Value == null)
                throw new ArgumentNullException(nameof(attachmentUrl), "Property is not nullable for class CreateSmtpTemplate.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class CreateSmtpTemplate.");

            return new CreateSmtpTemplate(sender.Value!, templateName.Value!, subject.Value!, tag, htmlContent, htmlUrl, replyTo, toField, attachmentUrl, isActive);
        }

        /// <summary>
        /// Serializes a <see cref="CreateSmtpTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createSmtpTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateSmtpTemplate createSmtpTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createSmtpTemplate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateSmtpTemplate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createSmtpTemplate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateSmtpTemplate createSmtpTemplate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createSmtpTemplate.Sender == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.Sender), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.TemplateName == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.TemplateName), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.Subject == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.Subject), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.TagOption.IsSet && createSmtpTemplate.Tag == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.Tag), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.HtmlContentOption.IsSet && createSmtpTemplate.HtmlContent == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.HtmlContent), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.HtmlUrlOption.IsSet && createSmtpTemplate.HtmlUrl == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.HtmlUrl), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.ReplyToOption.IsSet && createSmtpTemplate.ReplyTo == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.ReplyTo), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.ToFieldOption.IsSet && createSmtpTemplate.ToField == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.ToField), "Property is required for class CreateSmtpTemplate.");

            if (createSmtpTemplate.AttachmentUrlOption.IsSet && createSmtpTemplate.AttachmentUrl == null)
                throw new ArgumentNullException(nameof(createSmtpTemplate.AttachmentUrl), "Property is required for class CreateSmtpTemplate.");

            writer.WritePropertyName("sender");
            JsonSerializer.Serialize(writer, createSmtpTemplate.Sender, jsonSerializerOptions);
            writer.WriteString("templateName", createSmtpTemplate.TemplateName);

            writer.WriteString("subject", createSmtpTemplate.Subject);

            if (createSmtpTemplate.TagOption.IsSet)
                writer.WriteString("tag", createSmtpTemplate.Tag);

            if (createSmtpTemplate.HtmlContentOption.IsSet)
                writer.WriteString("htmlContent", createSmtpTemplate.HtmlContent);

            if (createSmtpTemplate.HtmlUrlOption.IsSet)
                writer.WriteString("htmlUrl", createSmtpTemplate.HtmlUrl);

            if (createSmtpTemplate.ReplyToOption.IsSet)
                writer.WriteString("replyTo", createSmtpTemplate.ReplyTo);

            if (createSmtpTemplate.ToFieldOption.IsSet)
                writer.WriteString("toField", createSmtpTemplate.ToField);

            if (createSmtpTemplate.AttachmentUrlOption.IsSet)
                writer.WriteString("attachmentUrl", createSmtpTemplate.AttachmentUrl);

            if (createSmtpTemplate.IsActiveOption.IsSet)
                writer.WriteBoolean("isActive", createSmtpTemplate.IsActiveOption.Value!.Value);
        }
    }
}
