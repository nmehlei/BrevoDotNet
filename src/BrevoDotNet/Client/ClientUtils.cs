/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using BrevoDotNet.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("BrevoDotNet.Test")]

namespace BrevoDotNet.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// An enum of headers
        /// </summary>
        public enum ApiKeyHeader
        {
            /// <summary>
            /// The api-key header
            /// </summary>
            Api_key
        }

        /// <summary>
        /// Converte an ApiKeyHeader to a string
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="System.ComponentModel.InvalidEnumArgumentException"></exception>
        public static string ApiKeyHeaderToString(ApiKeyHeader value)
        {
            return value switch
            {
                ApiKeyHeader.Api_key => "api-key",
                _ => throw new System.ComponentModel.InvalidEnumArgumentException(nameof(value), (int)value, typeof(ApiKeyHeader)),
            };
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is AbTestCampaignResult.WinningVersionEnum abTestCampaignResultWinningVersionEnum)
                return AbTestCampaignResult.WinningVersionEnumToJsonValue(abTestCampaignResultWinningVersionEnum);
            if (obj is AbTestCampaignResult.WinningCriteriaEnum abTestCampaignResultWinningCriteriaEnum)
                return AbTestCampaignResult.WinningCriteriaEnumToJsonValue(abTestCampaignResultWinningCriteriaEnum);
            if (obj is ContactErrorModel.CodeEnum contactErrorModelCodeEnum)
                return ContactErrorModel.CodeEnumToJsonValue(contactErrorModelCodeEnum);
            if (obj is CreateAttribute.TypeEnum createAttributeTypeEnum)
                return CreateAttribute.TypeEnumToJsonValue(createAttributeTypeEnum);
            if (obj is CreateChild.LanguageEnum createChildLanguageEnum)
                return CreateChild.LanguageEnumToJsonValue(createChildLanguageEnum);
            if (obj is CreateEmailCampaign.WinnerCriteriaEnum createEmailCampaignWinnerCriteriaEnum)
                return CreateEmailCampaign.WinnerCriteriaEnumToJsonValue(createEmailCampaignWinnerCriteriaEnum);
            if (obj is CreateWebhook.EventsEnum createWebhookEventsEnum)
                return CreateWebhook.EventsEnumToJsonValue(createWebhookEventsEnum);
            if (obj is CreateWebhook.TypeEnum createWebhookTypeEnum)
                return CreateWebhook.TypeEnumToJsonValue(createWebhookTypeEnum);
            if (obj is EmailExportRecipients.RecipientsTypeEnum emailExportRecipientsRecipientsTypeEnum)
                return EmailExportRecipients.RecipientsTypeEnumToJsonValue(emailExportRecipientsRecipientsTypeEnum);
            if (obj is ErrorModel.CodeEnum errorModelCodeEnum)
                return ErrorModel.CodeEnumToJsonValue(errorModelCodeEnum);
            if (obj is GetAccountAllOfPlan.TypeEnum getAccountAllOfPlanTypeEnum)
                return GetAccountAllOfPlan.TypeEnumToJsonValue(getAccountAllOfPlanTypeEnum);
            if (obj is GetAccountAllOfPlan.CreditsTypeEnum getAccountAllOfPlanCreditsTypeEnum)
                return GetAccountAllOfPlan.CreditsTypeEnumToJsonValue(getAccountAllOfPlanCreditsTypeEnum);
            if (obj is GetAttributesAttributesInner.CategoryEnum getAttributesAttributesInnerCategoryEnum)
                return GetAttributesAttributesInner.CategoryEnumToJsonValue(getAttributesAttributesInnerCategoryEnum);
            if (obj is GetAttributesAttributesInner.TypeEnum getAttributesAttributesInnerTypeEnum)
                return GetAttributesAttributesInner.TypeEnumToJsonValue(getAttributesAttributesInnerTypeEnum);
            if (obj is GetCampaignOverview.TypeEnum getCampaignOverviewTypeEnum)
                return GetCampaignOverview.TypeEnumToJsonValue(getCampaignOverviewTypeEnum);
            if (obj is GetCampaignOverview.StatusEnum getCampaignOverviewStatusEnum)
                return GetCampaignOverview.StatusEnumToJsonValue(getCampaignOverviewStatusEnum);
            if (obj is GetEmailCampaign.TypeEnum getEmailCampaignTypeEnum)
                return GetEmailCampaign.TypeEnumToJsonValue(getEmailCampaignTypeEnum);
            if (obj is GetEmailCampaign.StatusEnum getEmailCampaignStatusEnum)
                return GetEmailCampaign.StatusEnumToJsonValue(getEmailCampaignStatusEnum);
            if (obj is GetEmailCampaignsCampaignsInner.TypeEnum getEmailCampaignsCampaignsInnerTypeEnum)
                return GetEmailCampaignsCampaignsInner.TypeEnumToJsonValue(getEmailCampaignsCampaignsInnerTypeEnum);
            if (obj is GetEmailCampaignsCampaignsInner.StatusEnum getEmailCampaignsCampaignsInnerStatusEnum)
                return GetEmailCampaignsCampaignsInner.StatusEnumToJsonValue(getEmailCampaignsCampaignsInnerStatusEnum);
            if (obj is GetEmailEventReportEventsInner.EventEnum getEmailEventReportEventsInnerEventEnum)
                return GetEmailEventReportEventsInner.EventEnumToJsonValue(getEmailEventReportEventsInnerEventEnum);
            if (obj is GetExtendedCampaignOverview.TypeEnum getExtendedCampaignOverviewTypeEnum)
                return GetExtendedCampaignOverview.TypeEnumToJsonValue(getExtendedCampaignOverviewTypeEnum);
            if (obj is GetExtendedCampaignOverview.StatusEnum getExtendedCampaignOverviewStatusEnum)
                return GetExtendedCampaignOverview.StatusEnumToJsonValue(getExtendedCampaignOverviewStatusEnum);
            if (obj is GetProcess.StatusEnum getProcessStatusEnum)
                return GetProcess.StatusEnumToJsonValue(getProcessStatusEnum);
            if (obj is GetSmsCampaign.StatusEnum getSmsCampaignStatusEnum)
                return GetSmsCampaign.StatusEnumToJsonValue(getSmsCampaignStatusEnum);
            if (obj is GetSmsCampaignOverview.StatusEnum getSmsCampaignOverviewStatusEnum)
                return GetSmsCampaignOverview.StatusEnumToJsonValue(getSmsCampaignOverviewStatusEnum);
            if (obj is GetSmsCampaignsCampaignsInner.StatusEnum getSmsCampaignsCampaignsInnerStatusEnum)
                return GetSmsCampaignsCampaignsInner.StatusEnumToJsonValue(getSmsCampaignsCampaignsInnerStatusEnum);
            if (obj is GetSmsEventReportEventsInner.EventEnum getSmsEventReportEventsInnerEventEnum)
                return GetSmsEventReportEventsInner.EventEnumToJsonValue(getSmsEventReportEventsInnerEventEnum);
            if (obj is GetTransacBlockedContactsContactsInnerReason.CodeEnum getTransacBlockedContactsContactsInnerReasonCodeEnum)
                return GetTransacBlockedContactsContactsInnerReason.CodeEnumToJsonValue(getTransacBlockedContactsContactsInnerReasonCodeEnum);
            if (obj is GetWebhook.TypeEnum getWebhookTypeEnum)
                return GetWebhook.TypeEnumToJsonValue(getWebhookTypeEnum);
            if (obj is GetWhatsappCampaignOverview.CampaignStatusEnum getWhatsappCampaignOverviewCampaignStatusEnum)
                return GetWhatsappCampaignOverview.CampaignStatusEnumToJsonValue(getWhatsappCampaignOverviewCampaignStatusEnum);
            if (obj is GetWhatsappCampaignsCampaignsInner.CampaignStatusEnum getWhatsappCampaignsCampaignsInnerCampaignStatusEnum)
                return GetWhatsappCampaignsCampaignsInner.CampaignStatusEnumToJsonValue(getWhatsappCampaignsCampaignsInnerCampaignStatusEnum);
            if (obj is RequestContactExportCustomContactFilter.ActionForContactsEnum requestContactExportCustomContactFilterActionForContactsEnum)
                return RequestContactExportCustomContactFilter.ActionForContactsEnumToJsonValue(requestContactExportCustomContactFilterActionForContactsEnum);
            if (obj is RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum requestContactExportCustomContactFilterActionForEmailCampaignsEnum)
                return RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnumToJsonValue(requestContactExportCustomContactFilterActionForEmailCampaignsEnum);
            if (obj is RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum requestContactExportCustomContactFilterActionForSmsCampaignsEnum)
                return RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnumToJsonValue(requestContactExportCustomContactFilterActionForSmsCampaignsEnum);
            if (obj is RequestSmsRecipientExport.RecipientsTypeEnum requestSmsRecipientExportRecipientsTypeEnum)
                return RequestSmsRecipientExport.RecipientsTypeEnumToJsonValue(requestSmsRecipientExportRecipientsTypeEnum);
            if (obj is SendReport.LanguageEnum sendReportLanguageEnum)
                return SendReport.LanguageEnumToJsonValue(sendReportLanguageEnum);
            if (obj is SendTransacSms.TypeEnum sendTransacSmsTypeEnum)
                return SendTransacSms.TypeEnumToJsonValue(sendTransacSmsTypeEnum);
            if (obj is UpdateCampaignStatus.StatusEnum updateCampaignStatusStatusEnum)
                return UpdateCampaignStatus.StatusEnumToJsonValue(updateCampaignStatusStatusEnum);
            if (obj is UpdateEmailCampaign.WinnerCriteriaEnum updateEmailCampaignWinnerCriteriaEnum)
                return UpdateEmailCampaign.WinnerCriteriaEnumToJsonValue(updateEmailCampaignWinnerCriteriaEnum);
            if (obj is UpdateWebhook.EventsEnum updateWebhookEventsEnum)
                return UpdateWebhook.EventsEnumToJsonValue(updateWebhookEventsEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://api.sendinblue.com/v3";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "/v3";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "api.sendinblue.com";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
